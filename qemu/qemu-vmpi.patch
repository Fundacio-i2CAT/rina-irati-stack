diff --git a/hw/net/Makefile.objs b/hw/net/Makefile.objs
index ea93293..c0568b6 100644
--- a/hw/net/Makefile.objs
+++ b/hw/net/Makefile.objs
@@ -30,8 +30,9 @@ obj-$(CONFIG_MILKYMIST) += milkymist-minimac2.o
 obj-$(CONFIG_PSERIES) += spapr_llan.o
 obj-$(CONFIG_XILINX_ETHLITE) += xilinx_ethlite.o
 
-obj-$(CONFIG_VIRTIO) += virtio-net.o
+obj-$(CONFIG_VIRTIO) += virtio-net.o virtio-mpi.o
 obj-y += vhost_net.o
+obj-y += vhost_mpi.o
 
 obj-$(CONFIG_ETSEC) += fsl_etsec/etsec.o fsl_etsec/registers.o \
 			fsl_etsec/rings.o fsl_etsec/miim.o
diff --git a/hw/net/vhost_mpi.c b/hw/net/vhost_mpi.c
new file mode 100644
index 0000000..5da4eab
--- /dev/null
+++ b/hw/net/vhost_mpi.c
@@ -0,0 +1,263 @@
+/*
+ * vhost support for MPI
+ *
+ * Copyright Nextworks 2014
+ *
+ * Authors:
+ *  Vincenzo Maffione <v.maffione@nextworks.com>
+ *
+ * This work is licensed under the terms of the GNU GPL, version 2.  See
+ * the COPYING file in the top-level directory.
+ *
+ * Contributions after 2012-01-13 are licensed under the terms of the
+ * GNU GPL, version 2 or (at your option) any later version.
+ */
+
+#include "hw/virtio/virtio-mpi.h"
+#include "net/vhost_mpi.h"
+#include "qemu/error-report.h"
+
+#include "config.h"
+
+// TODO #ifdef CONFIG_VHOST_MPI
+#include <linux/vhost.h>
+#include <sys/socket.h>
+#include <linux/kvm.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <linux/virtio_ring.h>
+
+#include <stdio.h>
+
+#include "hw/virtio/vhost.h"
+#include "hw/virtio/virtio-bus.h"
+
+
+struct vhost_mpi {
+    struct vhost_dev dev;
+    struct vhost_virtqueue vqs[2];
+};
+
+unsigned vhost_mpi_get_features(struct vhost_mpi *mpi, unsigned features)
+{
+    /* Clear features not supported by host kernel. */
+    if (!(mpi->dev.features & (1 << VIRTIO_F_NOTIFY_ON_EMPTY))) {
+        features &= ~(1 << VIRTIO_F_NOTIFY_ON_EMPTY);
+    }
+    if (!(mpi->dev.features & (1 << VIRTIO_RING_F_INDIRECT_DESC))) {
+        features &= ~(1 << VIRTIO_RING_F_INDIRECT_DESC);
+    }
+    if (!(mpi->dev.features & (1 << VIRTIO_RING_F_EVENT_IDX))) {
+        features &= ~(1 << VIRTIO_RING_F_EVENT_IDX);
+    }
+    return features;
+}
+
+void vhost_mpi_ack_features(struct vhost_mpi *mpi, unsigned features)
+{
+    mpi->dev.acked_features = mpi->dev.backend_features;
+    if (features & (1 << VIRTIO_F_NOTIFY_ON_EMPTY)) {
+        mpi->dev.acked_features |= (1 << VIRTIO_F_NOTIFY_ON_EMPTY);
+    }
+    if (features & (1 << VIRTIO_RING_F_INDIRECT_DESC)) {
+        mpi->dev.acked_features |= (1 << VIRTIO_RING_F_INDIRECT_DESC);
+    }
+    if (features & (1 << VIRTIO_RING_F_EVENT_IDX)) {
+        mpi->dev.acked_features |= (1 << VIRTIO_RING_F_EVENT_IDX);
+    }
+}
+
+struct vhost_mpi *vhost_mpi_init(int devfd, bool force)
+{
+    int r;
+    struct vhost_mpi *mpi = g_malloc(sizeof *mpi);
+    mpi->dev.backend_features = 0;
+
+    /* XXX probably VirtIODevice could be VirtIOMpi, and the
+        caller needs to link the VirtIOMpi instance to the vhost_mpi instance
+        allocated here.  */
+
+    mpi->dev.nvqs = 2;
+    mpi->dev.vqs = mpi->vqs;
+
+    r = vhost_dev_init(&mpi->dev, devfd, "/dev/vhost-mpi", force);
+    if (r < 0) {
+        goto fail;
+    }
+    if (~mpi->dev.features & mpi->dev.backend_features) {
+        fprintf(stderr, "vhost lacks feature mask %" PRIu64 " for backend\n",
+                (uint64_t)(~mpi->dev.features & mpi->dev.backend_features));
+        vhost_dev_cleanup(&mpi->dev);
+        goto fail;
+    }
+
+    /* Set sane init value. Override when guest acks. */
+    vhost_mpi_ack_features(mpi, 0);
+    return mpi;
+fail:
+    g_free(mpi);
+    return NULL;
+}
+
+bool vhost_mpi_query(VHostMpiState *mpi, VirtIODevice *dev)
+{
+    return vhost_dev_query(&mpi->dev, dev);
+}
+
+struct vhost_mpi_command {
+    unsigned int index;
+    unsigned int enable;
+};
+
+/* Name overloading. Should be a temporary solution. */
+#define VHOST_MPI_STARTSTOP     VHOST_NET_SET_BACKEND
+
+static int vhost_mpi_start_one(struct vhost_mpi *mpi,
+                               VirtIODevice *dev,
+                               int vq_index)
+{
+    int r;
+    struct vhost_mpi_command cmd = {
+            .enable = 1,
+        };
+
+    if (mpi->dev.started) {
+        return 0;
+    }
+
+    mpi->dev.nvqs = 2;
+    mpi->dev.vqs = mpi->vqs;
+    mpi->dev.vq_index = vq_index;
+
+    r = vhost_dev_enable_notifiers(&mpi->dev, dev);
+    if (r < 0) {
+        goto fail_notifiers;
+    }
+
+    r = vhost_dev_start(&mpi->dev, dev);
+    if (r < 0) {
+        goto fail_start;
+    }
+
+    /* VHOST_NET_SET_BACKEND used to implement "VHOST_MPI_START" */
+    for (cmd.index = 0; cmd.index < mpi->dev.nvqs; cmd.index++) {
+        r = ioctl(mpi->dev.control, VHOST_MPI_STARTSTOP, &cmd);
+        if (r < 0) {
+            r = -errno;
+            goto fail;
+        }
+    }
+
+    return 0;
+fail:
+    cmd.enable = 0;
+    while (cmd.index-- > 0) {
+        int r = ioctl(mpi->dev.control, VHOST_NET_SET_BACKEND, &cmd);
+        assert(r >= 0);
+    }
+    vhost_dev_stop(&mpi->dev, dev);
+fail_start:
+    vhost_dev_disable_notifiers(&mpi->dev, dev);
+fail_notifiers:
+    return r;
+}
+
+static void vhost_mpi_stop_one(struct vhost_mpi *mpi,
+                               VirtIODevice *dev)
+{
+    struct vhost_mpi_command cmd = {
+            .enable = 0,
+        };
+
+    if (!mpi->dev.started) {
+        return;
+    }
+
+    /* VHOST_NET_SET_BACKEND used to implement "VHOST_MPI_STOP" */
+    for (cmd.index = 0; cmd.index < mpi->dev.nvqs; cmd.index++) {
+        int r = ioctl(mpi->dev.control, VHOST_MPI_STARTSTOP, &cmd);
+        assert(r >= 0);
+    }
+
+    vhost_dev_stop(&mpi->dev, dev);
+    vhost_dev_disable_notifiers(&mpi->dev, dev);
+}
+
+int vhost_mpi_start(VirtIODevice *dev, int total_queues)
+{
+    BusState *qbus = BUS(qdev_get_parent_bus(DEVICE(dev)));
+    VirtioBusState *vbus = VIRTIO_BUS(qbus);
+    VirtioBusClass *k = VIRTIO_BUS_GET_CLASS(vbus);
+    VHostMpiState *mpi = VIRTIO_MPI(dev)->vhost_mpi;
+    int r, i = 0;
+
+    IFV(printf("vhost_mpi_start\n"));
+
+    if (!k->set_guest_notifiers) {
+        error_report("binding does not support guest notifiers");
+        r = -ENOSYS;
+        goto err;
+    }
+
+    for (i = 0; i < total_queues; i++) {
+        r = vhost_mpi_start_one(mpi, dev, i * 2);
+
+        if (r < 0) {
+            goto err;
+        }
+    }
+
+    r = k->set_guest_notifiers(qbus->parent, total_queues * 2, true);
+    if (r < 0) {
+        error_report("Error binding guest notifier: %d", -r);
+        goto err;
+    }
+
+    return 0;
+
+err:
+    while (--i >= 0) {
+        vhost_mpi_stop_one(NULL, dev);
+    }
+    return r;
+}
+
+void vhost_mpi_stop(VirtIODevice *dev, int total_queues)
+{
+    BusState *qbus = BUS(qdev_get_parent_bus(DEVICE(dev)));
+    VirtioBusState *vbus = VIRTIO_BUS(qbus);
+    VirtioBusClass *k = VIRTIO_BUS_GET_CLASS(vbus);
+    VHostMpiState *mpi = VIRTIO_MPI(dev)->vhost_mpi;
+    int i, r;
+
+    IFV(printf("vhost_mpi_stop\n"));
+
+    r = k->set_guest_notifiers(qbus->parent, total_queues * 2, false);
+    if (r < 0) {
+        fprintf(stderr, "vhost guest notifier cleanup failed: %d\n", r);
+        fflush(stderr);
+    }
+    assert(r >= 0);
+
+    for (i = 0; i < total_queues; i++) {
+        vhost_mpi_stop_one(mpi, dev);
+    }
+}
+
+void vhost_mpi_cleanup(struct vhost_mpi *mpi)
+{
+    vhost_dev_cleanup(&mpi->dev);
+    g_free(mpi);
+}
+
+bool vhost_mpi_virtqueue_pending(VHostMpiState *mpi, int idx)
+{
+    return vhost_virtqueue_pending(&mpi->dev, idx);
+}
+
+void vhost_mpi_virtqueue_mask(VHostMpiState *mpi, VirtIODevice *dev,
+                              int idx, bool mask)
+{
+    vhost_virtqueue_mask(&mpi->dev, dev, idx, mask);
+}
+// TODO #endif  /* CONFIG_VHOST_MPI */
diff --git a/hw/net/virtio-mpi.c b/hw/net/virtio-mpi.c
new file mode 100644
index 0000000..509e793
--- /dev/null
+++ b/hw/net/virtio-mpi.c
@@ -0,0 +1,289 @@
+/*
+ * virtio support for MPI
+ *
+ * Copyright Nextworks 2014
+ *
+ * Authors:
+ *  Vincenzo Maffione   <v.maffione@nextworks>
+ *
+ * This work is licensed under the terms of the GNU GPL, version 2.  See
+ * the COPYING file in the top-level directory.
+ *
+ */
+
+#include "hw/virtio/virtio.h"
+#include "qemu/error-report.h"
+#include "hw/virtio/virtio-mpi.h"
+#include "net/vhost_mpi.h"
+#include "hw/virtio/virtio-bus.h"
+
+
+#define VIRTIO_MPI_VM_VERSION   1
+#define VIRTIO_MPI_RING_SIZE    256
+
+static void virtio_mpi_get_config(VirtIODevice *vdev, uint8_t *config)
+{
+    VirtIOMpi *mpi = VIRTIO_MPI(vdev);
+    struct virtio_mpi_config netcfg;
+
+    stw_p(&netcfg.status, mpi->status);
+    memcpy(config, &netcfg, sizeof(netcfg));
+
+    IFV(printf("virtio_mpi_get_config\n"));
+}
+
+static void virtio_mpi_set_config(VirtIODevice *vdev, const uint8_t *config)
+{
+    VirtIOMpi *mpi = VIRTIO_MPI(vdev);
+    struct virtio_mpi_config netcfg = {};
+
+    memcpy(&netcfg, config, sizeof(netcfg));
+    mpi->status = netcfg.status;
+
+    IFV(printf("virtio_mpi_set_config\n"));
+}
+
+static bool virtio_mpi_started(VirtIOMpi *mpi, uint8_t status)
+{
+    VirtIODevice *vdev = VIRTIO_DEVICE(mpi);
+    return (status & VIRTIO_CONFIG_S_DRIVER_OK) &&
+                 vdev->vm_running;
+}
+
+static void virtio_mpi_vhost_status(VirtIOMpi *mpi, uint8_t status)
+{
+    VirtIODevice *vdev = VIRTIO_DEVICE(mpi);
+    int queues = 1;
+
+    if (!!mpi->vhost_started ==
+        (virtio_mpi_started(mpi, status))) {
+        return;
+    }
+    if (!mpi->vhost_started) {
+        int r;
+        if (!vhost_mpi_query(mpi->vhost_mpi, vdev)) {
+            return;
+        }
+        mpi->vhost_started = 1;
+        r = vhost_mpi_start(vdev, queues);
+        if (r < 0) {
+            error_report("unable to start vhost net: %d: "
+                         "falling back on userspace virtio", -r);
+            mpi->vhost_started = 0;
+        }
+    } else {
+        vhost_mpi_stop(vdev, queues);
+        mpi->vhost_started = 0;
+    }
+}
+
+static void virtio_mpi_set_status(struct VirtIODevice *vdev, uint8_t status)
+{
+    VirtIOMpi *mpi = VIRTIO_MPI(vdev);
+
+    IFV(printf("virtio_mpi_set_status %d\n", status));
+
+    virtio_mpi_vhost_status(mpi, status);
+}
+
+static void virtio_mpi_reset(VirtIODevice *vdev)
+{
+    IFV(VirtIOMpi *mpi = VIRTIO_MPI(vdev));
+    IFV(printf("virtio_mpi_reset %p\n", mpi));
+}
+
+static uint32_t virtio_mpi_get_features(VirtIODevice *vdev, uint32_t features)
+{
+    VirtIOMpi *mpi = VIRTIO_MPI(vdev);
+
+    features = vhost_mpi_get_features(mpi->vhost_mpi, features);
+    IFV(printf("virtio_mpi_get_features %x\n", features));
+
+    return features;
+}
+
+static uint32_t virtio_mpi_bad_features(VirtIODevice *vdev)
+{
+    IFV(printf("virtio_mpi_bad_features\n"));
+
+    return 0;
+}
+
+static void virtio_mpi_set_features(VirtIODevice *vdev, uint32_t features)
+{
+    VirtIOMpi *mpi = VIRTIO_MPI(vdev);
+    int i;
+
+    for (i = 0;  i < 1; i++) {
+        vhost_mpi_ack_features(mpi->vhost_mpi, features);
+    }
+
+    IFV(printf("virtio_mpi_set_features %x\n", features));
+}
+
+/* RX */
+
+static void virtio_mpi_handle_rx(VirtIODevice *vdev, VirtQueue *vq)
+{
+    VirtIOMpi *mpi = VIRTIO_MPI(vdev);
+
+    printf("RX kick %p\n", mpi);
+}
+
+/* TX */
+static void virtio_mpi_handle_tx_bh(VirtIODevice *vdev, VirtQueue *vq)
+{
+    VirtIOMpi *mpi = VIRTIO_MPI(vdev);
+
+    /* Just in case the driver is not ready on more */
+    if (unlikely(!(vdev->status & VIRTIO_CONFIG_S_DRIVER_OK))) {
+       IFV( printf("driver not ready\n"));
+        return;
+    }
+
+    /* This happens when device was stopped but VCPU wasn't. */
+    if (!vdev->vm_running) {
+        IFV(printf("!vm_running\n"));
+        return;
+    }
+
+    printf("TX kick %p\n", mpi);
+}
+
+static void virtio_mpi_save(QEMUFile *f, void *opaque)
+{
+    VirtIOMpi *mpi = opaque;
+    VirtIODevice *vdev = VIRTIO_DEVICE(mpi);
+
+    /* At this point, backend must be stopped, otherwise
+     * it might keep writing to memory. */
+    assert(!mpi->vhost_started);
+    virtio_save(vdev, f);
+
+    qemu_put_be16(f, mpi->status);
+}
+
+static int virtio_mpi_load(QEMUFile *f, void *opaque, int version_id)
+{
+    VirtIOMpi *mpi = opaque;
+    VirtIODevice *vdev = VIRTIO_DEVICE(mpi);
+    int ret;
+
+    ret = virtio_load(vdev, f);
+    if (ret) {
+        return ret;
+    }
+
+    mpi->status = qemu_get_be16(f);
+
+    return 0;
+}
+
+static bool virtio_mpi_guest_notifier_pending(VirtIODevice *vdev, int idx)
+{
+    VirtIOMpi *mpi = VIRTIO_MPI(vdev);
+
+    IFV(printf("virtio_mpi_guest_notifier_pending\n"));
+    assert(mpi->vhost_started);
+    return vhost_mpi_virtqueue_pending(mpi->vhost_mpi, idx);
+}
+
+static void virtio_mpi_guest_notifier_mask(VirtIODevice *vdev, int idx,
+                                           bool mask)
+{
+    VirtIOMpi *mpi = VIRTIO_MPI(vdev);
+
+    IFV(printf("virtio_mpi_guest_notifier_mask\n"));
+    assert(mpi->vhost_started);
+    vhost_mpi_virtqueue_mask(mpi->vhost_mpi, vdev, idx, mask);
+}
+
+static void virtio_mpi_device_realize(DeviceState *dev, Error **errp)
+{
+    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+    VirtIOMpi *mpi = VIRTIO_MPI(dev);
+    int queues = 1;
+
+    virtio_init(vdev, "virtio-mpi", VIRTIO_ID_MPI,
+                sizeof(struct virtio_mpi_config));
+
+    mpi->vqs = g_malloc0(sizeof(VirtIOMpiQueue) * queues);
+    mpi->vqs[0].rx_vq = virtio_add_queue(vdev, VIRTIO_MPI_RING_SIZE, virtio_mpi_handle_rx);
+    mpi->vqs[0].mpi = mpi;
+
+    mpi->vqs[0].tx_vq = virtio_add_queue(vdev, VIRTIO_MPI_RING_SIZE, virtio_mpi_handle_tx_bh);
+    mpi->status = 1;
+
+    mpi->qdev = dev;
+    register_savevm(dev, "virtio-mpi", -1, VIRTIO_MPI_VM_VERSION,
+                    virtio_mpi_save, virtio_mpi_load, mpi);
+
+    IFV(printf("virtio_mpi_device_realize\n"));
+}
+
+static void virtio_mpi_device_unrealize(DeviceState *dev, Error **errp)
+{
+    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+    VirtIOMpi *mpi = VIRTIO_MPI(dev);
+
+    /* This will stop vhost backend if appropriate. */
+    virtio_mpi_set_status(vdev, 0);
+
+    unregister_savevm(dev, "virtio-mpi", mpi);
+
+    g_free(mpi->vqs);
+    virtio_cleanup(vdev);
+
+    IFV(printf("virtio_mpi_device_unrealize\n"));
+}
+
+static void virtio_mpi_instance_init(Object *obj)
+{
+    VirtIOMpi *mpi = VIRTIO_MPI(obj);
+
+    mpi->vhost_mpi = vhost_mpi_init(-1, false);
+    if (!mpi->vhost_mpi) {
+        perror("vhost_mpi_init failed\n");
+        exit(EXIT_FAILURE);
+    }
+    IFV(printf("vhost-mpi initialized\n"));
+}
+
+static Property virtio_mpi_properties[] = {
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+static void virtio_mpi_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    VirtioDeviceClass *vdc = VIRTIO_DEVICE_CLASS(klass);
+
+    dc->props = virtio_mpi_properties;
+    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
+    vdc->realize = virtio_mpi_device_realize;
+    vdc->unrealize = virtio_mpi_device_unrealize;
+    vdc->get_config = virtio_mpi_get_config;
+    vdc->set_config = virtio_mpi_set_config;
+    vdc->get_features = virtio_mpi_get_features;
+    vdc->set_features = virtio_mpi_set_features;
+    vdc->bad_features = virtio_mpi_bad_features;
+    vdc->reset = virtio_mpi_reset;
+    vdc->set_status = virtio_mpi_set_status;
+    vdc->guest_notifier_mask = virtio_mpi_guest_notifier_mask;
+    vdc->guest_notifier_pending = virtio_mpi_guest_notifier_pending;
+}
+
+static const TypeInfo virtio_mpi_info = {
+    .name = TYPE_VIRTIO_MPI,
+    .parent = TYPE_VIRTIO_DEVICE,
+    .instance_size = sizeof(VirtIOMpi),
+    .instance_init = virtio_mpi_instance_init,
+    .class_init = virtio_mpi_class_init,
+};
+
+static void virtio_register_types(void)
+{
+    type_register_static(&virtio_mpi_info);
+}
+
+type_init(virtio_register_types)
diff --git a/hw/virtio/virtio-pci.c b/hw/virtio/virtio-pci.c
index ce97514..0416c05 100644
--- a/hw/virtio/virtio-pci.c
+++ b/hw/virtio/virtio-pci.c
@@ -20,6 +20,7 @@
 #include "hw/virtio/virtio.h"
 #include "hw/virtio/virtio-blk.h"
 #include "hw/virtio/virtio-net.h"
+#include "hw/virtio/virtio-mpi.h"
 #include "hw/virtio/virtio-serial.h"
 #include "hw/virtio/virtio-scsi.h"
 #include "hw/virtio/virtio-balloon.h"
@@ -1470,6 +1471,58 @@ static const TypeInfo virtio_net_pci_info = {
     .class_init    = virtio_net_pci_class_init,
 };
 
+
+/* virtio-mpi-pci */
+
+static Property virtio_mpi_properties[] = {
+    DEFINE_VIRTIO_MPI_FEATURES(VirtIOPCIProxy, host_features),
+    DEFINE_PROP_UINT32("vectors", VirtIOPCIProxy, nvectors, 2),
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+static int virtio_mpi_pci_init(VirtIOPCIProxy *vpci_dev)
+{
+    VirtIOMpiPCI *dev = VIRTIO_MPI_PCI(vpci_dev);
+    DeviceState *vdev = DEVICE(&dev->vdev);
+
+    qdev_set_parent_bus(vdev, BUS(&vpci_dev->bus));
+    if (qdev_init(vdev) < 0) {
+        return -1;
+    }
+    return 0;
+}
+
+static void virtio_mpi_pci_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);
+    VirtioPCIClass *vpciklass = VIRTIO_PCI_CLASS(klass);
+
+    k->vendor_id = PCI_VENDOR_ID_REDHAT_QUMRANET;
+    k->device_id = PCI_DEVICE_ID_VIRTIO_MPI;
+    k->revision = VIRTIO_PCI_ABI_VERSION;
+    k->class_id = PCI_CLASS_NETWORK_ETHERNET;
+    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
+    dc->props = virtio_mpi_properties;
+    vpciklass->init = virtio_mpi_pci_init;
+}
+
+static void virtio_mpi_pci_instance_init(Object *obj)
+{
+    VirtIOMpiPCI *dev = VIRTIO_MPI_PCI(obj);
+    object_initialize(&dev->vdev, sizeof(dev->vdev), TYPE_VIRTIO_MPI);
+    object_property_add_child(obj, "virtio-backend", OBJECT(&dev->vdev), NULL);
+}
+
+static const TypeInfo virtio_mpi_pci_info = {
+    .name          = TYPE_VIRTIO_MPI_PCI,
+    .parent        = TYPE_VIRTIO_PCI,
+    .instance_size = sizeof(VirtIOMpiPCI),
+    .instance_init = virtio_mpi_pci_instance_init,
+    .class_init    = virtio_mpi_pci_class_init,
+};
+
+
 /* virtio-rng-pci */
 
 static Property virtio_rng_pci_properties[] = {
@@ -1585,6 +1638,7 @@ static void virtio_pci_register_types(void)
     type_register_static(&virtio_balloon_pci_info);
     type_register_static(&virtio_serial_pci_info);
     type_register_static(&virtio_net_pci_info);
+    type_register_static(&virtio_mpi_pci_info);
 #ifdef CONFIG_VHOST_SCSI
     type_register_static(&vhost_scsi_pci_info);
 #endif
diff --git a/hw/virtio/virtio-pci.h b/hw/virtio/virtio-pci.h
index dc332ae..cc019c1 100644
--- a/hw/virtio/virtio-pci.h
+++ b/hw/virtio/virtio-pci.h
@@ -37,6 +37,7 @@ typedef struct VirtIOSCSIPCI VirtIOSCSIPCI;
 typedef struct VirtIOBalloonPCI VirtIOBalloonPCI;
 typedef struct VirtIOSerialPCI VirtIOSerialPCI;
 typedef struct VirtIONetPCI VirtIONetPCI;
+typedef struct VirtIOMpiPCI VirtIOMpiPCI;
 typedef struct VHostSCSIPCI VHostSCSIPCI;
 typedef struct VirtIORngPCI VirtIORngPCI;
 
@@ -171,6 +172,18 @@ struct VirtIONetPCI {
 };
 
 /*
+ * virtio-mpi-pci: This extends VirtioPCIProxy.
+ */
+#define TYPE_VIRTIO_MPI_PCI "virtio-mpi-pci"
+#define VIRTIO_MPI_PCI(obj) \
+        OBJECT_CHECK(VirtIOMpiPCI, (obj), TYPE_VIRTIO_MPI_PCI)
+
+struct VirtIOMpiPCI {
+    VirtIOPCIProxy parent_obj;
+    VirtIOMpi vdev;
+};
+
+/*
  * virtio-9p-pci: This extends VirtioPCIProxy.
  */
 
diff --git a/include/hw/pci/pci.h b/include/hw/pci/pci.h
index 8c25ae5..abe389d 100644
--- a/include/hw/pci/pci.h
+++ b/include/hw/pci/pci.h
@@ -80,6 +80,7 @@
 #define PCI_DEVICE_ID_VIRTIO_CONSOLE     0x1003
 #define PCI_DEVICE_ID_VIRTIO_SCSI        0x1004
 #define PCI_DEVICE_ID_VIRTIO_RNG         0x1005
+#define PCI_DEVICE_ID_VIRTIO_MPI         0x1006
 #define PCI_DEVICE_ID_VIRTIO_9P          0x1009
 
 #define PCI_VENDOR_ID_REDHAT             0x1b36
diff --git a/include/hw/virtio/virtio-mpi.h b/include/hw/virtio/virtio-mpi.h
new file mode 100644
index 0000000..e0c5fcc
--- /dev/null
+++ b/include/hw/virtio/virtio-mpi.h
@@ -0,0 +1,54 @@
+/*
+ * Virtio Network Device
+ *
+ * Copyright Nextworks, 2014
+ *
+ * Authors:
+ *  Vincenzo Maffione   <v.maffione@nextworks.it>
+ *
+ * This work is licensed under the terms of the GNU GPL, version 2.  See
+ * the COPYING file in the top-level directory.
+ *
+ */
+
+#ifndef _QEMU_VIRTIO_MPI_H
+#define _QEMU_VIRTIO_MPI_H
+
+#include "hw/virtio/virtio.h"
+#include "hw/pci/pci.h"
+#include "net/vhost_mpi.h"
+
+#define TYPE_VIRTIO_MPI "virtio-mpi-device"
+#define VIRTIO_MPI(obj) \
+        OBJECT_CHECK(VirtIOMpi, (obj), TYPE_VIRTIO_MPI)
+
+/* The ID for virtio_mpi */
+#define VIRTIO_ID_MPI  15
+
+struct virtio_mpi_config
+{
+    /* See VIRTIO_MPI_F_STATUS and VIRTIO_MPI_S_* above */
+    uint16_t status;
+} QEMU_PACKED;
+
+typedef struct VirtIOMpiQueue {
+    VirtQueue *rx_vq;
+    VirtQueue *tx_vq;
+    struct VirtIOMpi *mpi;
+} VirtIOMpiQueue;
+
+typedef struct VirtIOMpi {
+    VirtIODevice parent_obj;
+    uint16_t status;
+    VirtIOMpiQueue *vqs;
+    uint8_t vhost_started;
+    DeviceState *qdev;
+    VHostMpiState *vhost_mpi;
+} VirtIOMpi;
+
+
+#define DEFINE_VIRTIO_MPI_FEATURES(_state, _field) \
+        DEFINE_VIRTIO_COMMON_FEATURES(_state, _field), \
+        DEFINE_PROP_BIT("any_layout", _state, _field, VIRTIO_F_ANY_LAYOUT, true)
+
+#endif
diff --git a/include/net/vhost_mpi.h b/include/net/vhost_mpi.h
new file mode 100644
index 0000000..3564f10
--- /dev/null
+++ b/include/net/vhost_mpi.h
@@ -0,0 +1,28 @@
+#ifndef VHOST_MPI_H
+#define VHOST_MPI_H
+
+//#define VERBOSE
+#ifdef VERBOSE
+#define IFV(x) x
+#else
+#define IFV(x) do {} while (0)
+#endif
+
+struct vhost_mpi;
+typedef struct vhost_mpi VHostMpiState;
+
+VHostMpiState *vhost_mpi_init(int devfd, bool force);
+
+bool vhost_mpi_query(VHostMpiState *mpi, VirtIODevice *dev);
+int vhost_mpi_start(VirtIODevice *dev, int total_queues);
+void vhost_mpi_stop(VirtIODevice *dev, int total_queues);
+
+void vhost_mpi_cleanup(VHostMpiState *mpi);
+
+unsigned vhost_mpi_get_features(VHostMpiState *mpi, unsigned features);
+void vhost_mpi_ack_features(VHostMpiState *mpi, unsigned features);
+
+bool vhost_mpi_virtqueue_pending(VHostMpiState *mpi, int n);
+void vhost_mpi_virtqueue_mask(VHostMpiState *mpi, VirtIODevice *dev,
+                              int idx, bool mask);
+#endif
