/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdint.h>		// Use the C99 official header


#include "librina-common.h"
#include "librina-application.h"
#include "librina-ipc-manager.h"
#include "librina-ipc-process.h"
#include "librina-faux-sockets.h"
#include "librina-cdap.h"
#include "librina-sdu-protection.h"


static dif_properties_t *new_dif_properties_t_array(int nelements) { 
  return new dif_properties_t[nelements]; 
}

static void delete_dif_properties_t_array(dif_properties_t *ary) { 
  delete [] ary; 
}

static dif_properties_t dif_properties_t_array_getitem(dif_properties_t *ary, int index) {
    return ary[index];
}
static void dif_properties_t_array_setitem(dif_properties_t *ary, int index, dif_properties_t value) {
    ary[index] = value;
}


static qos_cube_t *new_qos_cube_t_array(int nelements) { 
  return new qos_cube_t[nelements]; 
}

static void delete_qos_cube_t_array(qos_cube_t *ary) { 
  delete [] ary; 
}

static qos_cube_t qos_cube_t_array_getitem(qos_cube_t *ary, int index) {
    return ary[index];
}
static void qos_cube_t_array_setitem(qos_cube_t *ary, int index, qos_cube_t value) {
    ary[index] = value;
}


static rib_object_t *new_rib_object_t_array(int nelements) { 
  return new rib_object_t[nelements]; 
}

static void delete_rib_object_t_array(rib_object_t *ary) { 
  delete [] ary; 
}

static rib_object_t rib_object_t_array_getitem(rib_object_t *ary, int index) {
    return ary[index];
}
static void rib_object_t_array_setitem(rib_object_t *ary, int index, rib_object_t value) {
    ary[index] = value;
}


static int *new_intp() { 
  return new int(); 
}

static int *copy_intp(int value) { 
  return new int(value); 
}

static void delete_intp(int *self) { 
  if (self) delete self; 
}

static void intp_assign(int *self, int value) {
  *self = value;
}

static int intp_value(int *self) {
  return *self;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_buffer_1t_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  buffer_t *arg1 = (buffer_t *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(buffer_t **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  if (arg1) (arg1)->data = arg2;
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_eu_irati_librina_rinaJNI_buffer_1t_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  buffer_t *arg1 = (buffer_t *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(buffer_t **)&jarg1; 
  result = (unsigned char *) ((arg1)->data);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_buffer_1t_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  buffer_t *arg1 = (buffer_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(buffer_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_buffer_1t_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  buffer_t *arg1 = (buffer_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(buffer_t **)&jarg1; 
  result =  ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1buffer_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  buffer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (buffer_t *)new buffer_t();
  *(buffer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1buffer_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  buffer_t *arg1 = (buffer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(buffer_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_uint_1range_1t_1min_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uint_range_t *arg1 = (uint_range_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint_range_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->min_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_uint_1range_1t_1min_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uint_range_t *arg1 = (uint_range_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint_range_t **)&jarg1; 
  result = (uint32_t) ((arg1)->min_value);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_uint_1range_1t_1max_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uint_range_t *arg1 = (uint_range_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint_range_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->max_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_uint_1range_1t_1max_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uint_range_t *arg1 = (uint_range_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint_range_t **)&jarg1; 
  result = (uint32_t) ((arg1)->max_value);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1uint_1range_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint_range_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (uint_range_t *)new uint_range_t();
  *(uint_range_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1uint_1range_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint_range_t *arg1 = (uint_range_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint_range_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1short_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->short_value = arg2;
}


SWIGEXPORT jshort JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1short_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  result = (short) ((arg1)->short_value);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1int_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->int_value = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1int_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  result = (int) ((arg1)->int_value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1long_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->long_value = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1long_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  result = (long) ((arg1)->long_value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1float_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->float_value = arg2;
}


SWIGEXPORT jfloat JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1float_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  result = (float) ((arg1)->float_value);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1double_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->double_value = arg2;
}


SWIGEXPORT jdouble JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1double_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  result = (double) ((arg1)->double_value);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1string_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  string_t arg2 = (string_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->string_value) delete [] arg1->string_value;
    if (arg2) {
      arg1->string_value = (string_t) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->string_value, (const char *)arg2);
    } else {
      arg1->string_value = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1string_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  string_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  result = (string_t) ((arg1)->string_value);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1encoded_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  if (arg1) (arg1)->encoded_value = arg2;
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1value_1t_1encoded_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_value_t **)&jarg1; 
  result = (unsigned char *) ((arg1)->encoded_value);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1rib_1object_1value_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rib_object_value_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rib_object_value_t *)new rib_object_value_t();
  *(rib_object_value_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1rib_1object_1value_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rib_object_value_t *arg1 = (rib_object_value_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rib_object_value_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1object_1class_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  string_t arg2 = (string_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->object_class) delete [] arg1->object_class;
    if (arg2) {
      arg1->object_class = (string_t) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->object_class, (const char *)arg2);
    } else {
      arg1->object_class = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1object_1class_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  string_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  result = (string_t) ((arg1)->object_class);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1object_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  string_t arg2 = (string_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->object_name) delete [] arg1->object_name;
    if (arg2) {
      arg1->object_name = (string_t) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->object_name, (const char *)arg2);
    } else {
      arg1->object_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1object_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  string_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  result = (string_t) ((arg1)->object_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1object_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->object_instance = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1object_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  result = (long) ((arg1)->object_instance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1value_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  rib_object_value_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  arg2 = (rib_object_value_type_t)jarg2; 
  if (arg1) (arg1)->value_type = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1value_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  rib_object_value_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  result = (rib_object_value_type_t) ((arg1)->value_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1object_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  rib_object_value_t *arg2 = (rib_object_value_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rib_object_t **)&jarg1; 
  arg2 = *(rib_object_value_t **)&jarg2; 
  if (arg1) (arg1)->object_value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1object_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  rib_object_value_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  result = (rib_object_value_t *)& ((arg1)->object_value);
  *(rib_object_value_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1rib_1object_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rib_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rib_object_t *)new rib_object_t();
  *(rib_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1rib_1object_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rib_object_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_name_1t_1process_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  name_t *arg1 = (name_t *) 0 ;
  string_t arg2 = (string_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->process_name) delete [] arg1->process_name;
    if (arg2) {
      arg1->process_name = (string_t) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->process_name, (const char *)arg2);
    } else {
      arg1->process_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_eu_irati_librina_rinaJNI_name_1t_1process_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  string_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  result = (string_t) ((arg1)->process_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_name_1t_1process_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  name_t *arg1 = (name_t *) 0 ;
  string_t arg2 = (string_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->process_instance) delete [] arg1->process_instance;
    if (arg2) {
      arg1->process_instance = (string_t) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->process_instance, (const char *)arg2);
    } else {
      arg1->process_instance = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_eu_irati_librina_rinaJNI_name_1t_1process_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  string_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  result = (string_t) ((arg1)->process_instance);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_name_1t_1entity_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  name_t *arg1 = (name_t *) 0 ;
  string_t arg2 = (string_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->entity_name) delete [] arg1->entity_name;
    if (arg2) {
      arg1->entity_name = (string_t) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->entity_name, (const char *)arg2);
    } else {
      arg1->entity_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_eu_irati_librina_rinaJNI_name_1t_1entity_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  string_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  result = (string_t) ((arg1)->entity_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_name_1t_1entity_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  name_t *arg1 = (name_t *) 0 ;
  string_t arg2 = (string_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->entity_instance) delete [] arg1->entity_instance;
    if (arg2) {
      arg1->entity_instance = (string_t) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->entity_instance, (const char *)arg2);
    } else {
      arg1->entity_instance = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_eu_irati_librina_rinaJNI_name_1t_1entity_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  string_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  result = (string_t) ((arg1)->entity_instance);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1name_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (name_t *)new name_t();
  *(name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1name_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  name_t *arg1 = (name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(name_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1name_1t_1elements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  array_of_name_t *arg1 = (array_of_name_t *) 0 ;
  name_t *arg2 = (name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(array_of_name_t **)&jarg1; 
  arg2 = *(name_t **)&jarg2; 
  if (arg1) (arg1)->elements = arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1name_1t_1elements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  array_of_name_t *arg1 = (array_of_name_t *) 0 ;
  name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(array_of_name_t **)&jarg1; 
  result = (name_t *) ((arg1)->elements);
  *(name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1name_1t_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  array_of_name_t *arg1 = (array_of_name_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(array_of_name_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1name_1t_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  array_of_name_t *arg1 = (array_of_name_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(array_of_name_t **)&jarg1; 
  result = (int) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1array_1of_1name_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  array_of_name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (array_of_name_t *)new array_of_name_t();
  *(array_of_name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1array_1of_1name_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  array_of_name_t *arg1 = (array_of_name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(array_of_name_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1average_1bandwidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint_range_t *arg2 = (uint_range_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = *(uint_range_t **)&jarg2; 
  if (arg1) (arg1)->average_bandwidth = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1average_1bandwidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint_range_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (uint_range_t *)& ((arg1)->average_bandwidth);
  *(uint_range_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1average_1sdu_1bandwidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint_range_t *arg2 = (uint_range_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = *(uint_range_t **)&jarg2; 
  if (arg1) (arg1)->average_sdu_bandwidth = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1average_1sdu_1bandwidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint_range_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (uint_range_t *)& ((arg1)->average_sdu_bandwidth);
  *(uint_range_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1peak_1bandwidth_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint_range_t *arg2 = (uint_range_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = *(uint_range_t **)&jarg2; 
  if (arg1) (arg1)->peak_bandwidth_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1peak_1bandwidth_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint_range_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (uint_range_t *)& ((arg1)->peak_bandwidth_duration);
  *(uint_range_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1peak_1sdu_1bandwidth_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint_range_t *arg2 = (uint_range_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = *(uint_range_t **)&jarg2; 
  if (arg1) (arg1)->peak_sdu_bandwidth_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1peak_1sdu_1bandwidth_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint_range_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (uint_range_t *)& ((arg1)->peak_sdu_bandwidth_duration);
  *(uint_range_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1undetected_1bit_1error_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->undetected_bit_error_rate = arg2;
}


SWIGEXPORT jdouble JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1undetected_1bit_1error_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (double) ((arg1)->undetected_bit_error_rate);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1partial_1delivery_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  bool_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = (bool_t)jarg2; 
  if (arg1) (arg1)->partial_delivery = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1partial_1delivery_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  bool_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (bool_t) ((arg1)->partial_delivery);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1ordered_1delivery_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  bool_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = (bool_t)jarg2; 
  if (arg1) (arg1)->ordered_delivery = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1ordered_1delivery_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  bool_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (bool_t) ((arg1)->ordered_delivery);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1max_1allowable_1gap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_allowable_gap = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1max_1allowable_1gap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (int) ((arg1)->max_allowable_gap);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->delay = arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (uint32_t) ((arg1)->delay);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1jitter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->jitter = arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1jitter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (uint32_t) ((arg1)->jitter);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1max_1sdu_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->max_sdu_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_flow_1spec_1t_1max_1sdu_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(flow_spec_t **)&jarg1; 
  result = (uint32_t) ((arg1)->max_sdu_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1flow_1spec_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  flow_spec_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (flow_spec_t *)new flow_spec_t();
  *(flow_spec_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1flow_1spec_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  flow_spec_t *arg1 = (flow_spec_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(flow_spec_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_qos_1cube_1t_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  qos_cube_t *arg1 = (qos_cube_t *) 0 ;
  string_t arg2 = (string_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qos_cube_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (string_t) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_eu_irati_librina_rinaJNI_qos_1cube_1t_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  qos_cube_t *arg1 = (qos_cube_t *) 0 ;
  string_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qos_cube_t **)&jarg1; 
  result = (string_t) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_qos_1cube_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  qos_cube_t *arg1 = (qos_cube_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qos_cube_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_qos_1cube_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  qos_cube_t *arg1 = (qos_cube_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qos_cube_t **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_qos_1cube_1t_1flow_1spec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  qos_cube_t *arg1 = (qos_cube_t *) 0 ;
  flow_spec_t *arg2 = (flow_spec_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(qos_cube_t **)&jarg1; 
  arg2 = *(flow_spec_t **)&jarg2; 
  if (arg1) (arg1)->flow_spec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_qos_1cube_1t_1flow_1spec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  qos_cube_t *arg1 = (qos_cube_t *) 0 ;
  flow_spec_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qos_cube_t **)&jarg1; 
  result = (flow_spec_t *)& ((arg1)->flow_spec);
  *(flow_spec_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1qos_1cube_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  qos_cube_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (qos_cube_t *)new qos_cube_t();
  *(qos_cube_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1qos_1cube_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  qos_cube_t *arg1 = (qos_cube_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(qos_cube_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1qos_1cube_1t_1elements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  array_of_qos_cube_t *arg1 = (array_of_qos_cube_t *) 0 ;
  qos_cube_t *arg2 = (qos_cube_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(array_of_qos_cube_t **)&jarg1; 
  arg2 = *(qos_cube_t **)&jarg2; 
  if (arg1) (arg1)->elements = arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1qos_1cube_1t_1elements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  array_of_qos_cube_t *arg1 = (array_of_qos_cube_t *) 0 ;
  qos_cube_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(array_of_qos_cube_t **)&jarg1; 
  result = (qos_cube_t *) ((arg1)->elements);
  *(qos_cube_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1qos_1cube_1t_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  array_of_qos_cube_t *arg1 = (array_of_qos_cube_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(array_of_qos_cube_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1qos_1cube_1t_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  array_of_qos_cube_t *arg1 = (array_of_qos_cube_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(array_of_qos_cube_t **)&jarg1; 
  result = (int) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1array_1of_1qos_1cube_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  array_of_qos_cube_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (array_of_qos_cube_t *)new array_of_qos_cube_t();
  *(array_of_qos_cube_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1array_1of_1qos_1cube_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  array_of_qos_cube_t *arg1 = (array_of_qos_cube_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(array_of_qos_cube_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_flow_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_flow_t **)&jarg1; 
  result = (uint32_t) ((arg1)->type);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1source_1application_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  name_t *arg2 = (name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(event_flow_t **)&jarg1; 
  arg2 = *(name_t **)&jarg2; 
  if (arg1) (arg1)->source_application = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1source_1application_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_flow_t **)&jarg1; 
  result = (name_t *)& ((arg1)->source_application);
  *(name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1destination_1application_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  name_t *arg2 = (name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(event_flow_t **)&jarg1; 
  arg2 = *(name_t **)&jarg2; 
  if (arg1) (arg1)->destination_application = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1destination_1application_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_flow_t **)&jarg1; 
  result = (name_t *)& ((arg1)->destination_application);
  *(name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1flow_1spec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  flow_spec_t *arg2 = (flow_spec_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(event_flow_t **)&jarg1; 
  arg2 = *(flow_spec_t **)&jarg2; 
  if (arg1) (arg1)->flow_spec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1flow_1spec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  flow_spec_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_flow_t **)&jarg1; 
  result = (flow_spec_t *)& ((arg1)->flow_spec);
  *(flow_spec_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1port_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  port_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_flow_t **)&jarg1; 
  arg2 = (port_id_t)jarg2; 
  if (arg1) (arg1)->port_id = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1port_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  port_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_flow_t **)&jarg1; 
  result = (port_id_t) ((arg1)->port_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1response_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  response_reason_t arg2 = (response_reason_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_flow_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (response_reason_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->response_reason) delete [] arg1->response_reason;
    if (arg2) {
      arg1->response_reason = (response_reason_t) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->response_reason, (const char *)arg2);
    } else {
      arg1->response_reason = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_eu_irati_librina_rinaJNI_event_1flow_1t_1response_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  response_reason_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_flow_t **)&jarg1; 
  result = (response_reason_t) ((arg1)->response_reason);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1event_1flow_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  event_flow_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (event_flow_t *)new event_flow_t();
  *(event_flow_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1event_1flow_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  event_flow_t *arg1 = (event_flow_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(event_flow_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1sdu_1t_1port_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  event_sdu_t *arg1 = (event_sdu_t *) 0 ;
  port_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_sdu_t **)&jarg1; 
  arg2 = (port_id_t)jarg2; 
  if (arg1) (arg1)->port_id = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_event_1sdu_1t_1port_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  event_sdu_t *arg1 = (event_sdu_t *) 0 ;
  port_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_sdu_t **)&jarg1; 
  result = (port_id_t) ((arg1)->port_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1sdu_1t_1sdu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  event_sdu_t *arg1 = (event_sdu_t *) 0 ;
  sdu_t *arg2 = (sdu_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(event_sdu_t **)&jarg1; 
  arg2 = *(sdu_t **)&jarg2; 
  if (arg1) (arg1)->sdu = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_event_1sdu_1t_1sdu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  event_sdu_t *arg1 = (event_sdu_t *) 0 ;
  sdu_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_sdu_t **)&jarg1; 
  result = (sdu_t *)& ((arg1)->sdu);
  *(sdu_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1event_1sdu_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  event_sdu_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (event_sdu_t *)new event_sdu_t();
  *(event_sdu_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1event_1sdu_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  event_sdu_t *arg1 = (event_sdu_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(event_sdu_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1registration_1t_1application_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  event_registration_t *arg1 = (event_registration_t *) 0 ;
  name_t *arg2 = (name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(event_registration_t **)&jarg1; 
  arg2 = *(name_t **)&jarg2; 
  if (arg1) (arg1)->application_name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_event_1registration_1t_1application_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  event_registration_t *arg1 = (event_registration_t *) 0 ;
  name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_registration_t **)&jarg1; 
  result = (name_t *)& ((arg1)->application_name);
  *(name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1registration_1t_1dif_1names_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  event_registration_t *arg1 = (event_registration_t *) 0 ;
  array_of_name_t *arg2 = (array_of_name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(event_registration_t **)&jarg1; 
  arg2 = *(array_of_name_t **)&jarg2; 
  if (arg1) (arg1)->dif_names = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_event_1registration_1t_1dif_1names_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  event_registration_t *arg1 = (event_registration_t *) 0 ;
  array_of_name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_registration_t **)&jarg1; 
  result = (array_of_name_t *)& ((arg1)->dif_names);
  *(array_of_name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1event_1registration_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  event_registration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (event_registration_t *)new event_registration_t();
  *(event_registration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1event_1registration_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  event_registration_t *arg1 = (event_registration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(event_registration_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_event_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  event_t *arg1 = (event_t *) 0 ;
  event_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_t **)&jarg1; 
  arg2 = (event_type_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_event_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  event_t *arg1 = (event_t *) 0 ;
  event_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_t **)&jarg1; 
  result = (event_type_t) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1event_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  event_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (event_t *)new event_t();
  *(event_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1event_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  event_t *arg1 = (event_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(event_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_dif_1properties_1t_1dif_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dif_properties_t *arg1 = (dif_properties_t *) 0 ;
  name_t *arg2 = (name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dif_properties_t **)&jarg1; 
  arg2 = *(name_t **)&jarg2; 
  if (arg1) (arg1)->dif_name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_dif_1properties_1t_1dif_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dif_properties_t *arg1 = (dif_properties_t *) 0 ;
  name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_properties_t **)&jarg1; 
  result = (name_t *)& ((arg1)->dif_name);
  *(name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_dif_1properties_1t_1max_1sdu_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dif_properties_t *arg1 = (dif_properties_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_properties_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_sdu_size = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_dif_1properties_1t_1max_1sdu_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dif_properties_t *arg1 = (dif_properties_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_properties_t **)&jarg1; 
  result = (int) ((arg1)->max_sdu_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_dif_1properties_1t_1qos_1cubes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dif_properties_t *arg1 = (dif_properties_t *) 0 ;
  array_of_qos_cube_t *arg2 = (array_of_qos_cube_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dif_properties_t **)&jarg1; 
  arg2 = *(array_of_qos_cube_t **)&jarg2; 
  if (arg1) (arg1)->qos_cubes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_dif_1properties_1t_1qos_1cubes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dif_properties_t *arg1 = (dif_properties_t *) 0 ;
  array_of_qos_cube_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_properties_t **)&jarg1; 
  result = (array_of_qos_cube_t *)& ((arg1)->qos_cubes);
  *(array_of_qos_cube_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1dif_1properties_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dif_properties_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dif_properties_t *)new dif_properties_t();
  *(dif_properties_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1dif_1properties_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dif_properties_t *arg1 = (dif_properties_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dif_properties_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ev_1poll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  event_t *arg1 = (event_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_t **)&jarg1; 
  result = (int)ev_poll(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ev_1wait(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  event_t *arg1 = (event_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(event_t **)&jarg1; 
  result = (int)ev_wait(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_ev_1set_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  event_filter_t arg1 = (event_filter_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(event_filter_t *)&jarg1; 
  ev_set_filter(arg1);
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_ev_1get_1filter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  event_filter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (event_filter_t)ev_get_filter();
  *(event_filter_t *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_allocate_1flow_1request(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  name_t *arg2 = (name_t *) 0 ;
  flow_spec_t *arg3 = (flow_spec_t *) 0 ;
  port_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = *(name_t **)&jarg2; 
  arg3 = *(flow_spec_t **)&jarg3; 
  result = (port_id_t)allocate_flow_request((name_t const *)arg1,(name_t const *)arg2,(flow_spec_t const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_allocate_1flow_1response(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jint jresult = 0 ;
  port_id_t arg1 ;
  response_reason_t arg2 = (response_reason_t) (response_reason_t)0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (port_id_t)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (response_reason_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)allocate_flow_response(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_deallocate_1flow(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  port_id_t arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (port_id_t)jarg1; 
  result = (int)deallocate_flow(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_write_1sdu(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  port_id_t arg1 ;
  sdu_t *arg2 = (sdu_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (port_id_t)jarg1; 
  arg2 = *(sdu_t **)&jarg2; 
  result = (int)write_sdu(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_get_1dif_1properties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  int *arg2 = (int *) 0 ;
  dif_properties_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (dif_properties_t *)get_dif_properties((name_t const *)arg1,arg2);
  *(dif_properties_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_register_1application(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  name_t *arg2 = (name_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = *(name_t **)&jarg2; 
  result = (int)register_application((name_t const *)arg1,(name_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_unregister_1application(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  name_t *arg2 = (name_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = *(name_t **)&jarg2; 
  result = (int)unregister_application((name_t const *)arg1,(name_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1policy_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  policy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (policy_t *)new policy_t();
  *(policy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1policy_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  policy_t *arg1 = (policy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(policy_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1policy_1t_1elements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  array_of_policy_t *arg1 = (array_of_policy_t *) 0 ;
  policy_t *arg2 = (policy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(array_of_policy_t **)&jarg1; 
  arg2 = *(policy_t **)&jarg2; 
  if (arg1) (arg1)->elements = arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1policy_1t_1elements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  array_of_policy_t *arg1 = (array_of_policy_t *) 0 ;
  policy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(array_of_policy_t **)&jarg1; 
  result = (policy_t *) ((arg1)->elements);
  *(policy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1policy_1t_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  array_of_policy_t *arg1 = (array_of_policy_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(array_of_policy_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_array_1of_1policy_1t_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  array_of_policy_t *arg1 = (array_of_policy_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(array_of_policy_t **)&jarg1; 
  result = (int) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1array_1of_1policy_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  array_of_policy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (array_of_policy_t *)new array_of_policy_t();
  *(array_of_policy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1array_1of_1policy_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  array_of_policy_t *arg1 = (array_of_policy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(array_of_policy_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_normal_1dif_1config_1t_1policies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  normal_dif_config_t *arg1 = (normal_dif_config_t *) 0 ;
  array_of_policy_t *arg2 = (array_of_policy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(normal_dif_config_t **)&jarg1; 
  arg2 = *(array_of_policy_t **)&jarg2; 
  if (arg1) (arg1)->policies = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_normal_1dif_1config_1t_1policies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  normal_dif_config_t *arg1 = (normal_dif_config_t *) 0 ;
  array_of_policy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(normal_dif_config_t **)&jarg1; 
  result = (array_of_policy_t *)& ((arg1)->policies);
  *(array_of_policy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_normal_1dif_1config_1t_1n_1minus_11_1dif_1names_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  normal_dif_config_t *arg1 = (normal_dif_config_t *) 0 ;
  array_of_name_t *arg2 = (array_of_name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(normal_dif_config_t **)&jarg1; 
  arg2 = *(array_of_name_t **)&jarg2; 
  if (arg1) (arg1)->n_minus_1_dif_names = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_normal_1dif_1config_1t_1n_1minus_11_1dif_1names_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  normal_dif_config_t *arg1 = (normal_dif_config_t *) 0 ;
  array_of_name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(normal_dif_config_t **)&jarg1; 
  result = (array_of_name_t *)& ((arg1)->n_minus_1_dif_names);
  *(array_of_name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1normal_1dif_1config_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  normal_dif_config_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (normal_dif_config_t *)new normal_dif_config_t();
  *(normal_dif_config_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1normal_1dif_1config_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  normal_dif_config_t *arg1 = (normal_dif_config_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(normal_dif_config_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_shim_1eth_1dif_1config_1t_1device_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  shim_eth_dif_config_t *arg1 = (shim_eth_dif_config_t *) 0 ;
  string_t arg2 = (string_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shim_eth_dif_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->device_name) delete [] arg1->device_name;
    if (arg2) {
      arg1->device_name = (string_t) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->device_name, (const char *)arg2);
    } else {
      arg1->device_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_eu_irati_librina_rinaJNI_shim_1eth_1dif_1config_1t_1device_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shim_eth_dif_config_t *arg1 = (shim_eth_dif_config_t *) 0 ;
  string_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shim_eth_dif_config_t **)&jarg1; 
  result = (string_t) ((arg1)->device_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1shim_1eth_1dif_1config_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shim_eth_dif_config_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (shim_eth_dif_config_t *)new shim_eth_dif_config_t();
  *(shim_eth_dif_config_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1shim_1eth_1dif_1config_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shim_eth_dif_config_t *arg1 = (shim_eth_dif_config_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shim_eth_dif_config_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_specific_1configuration_1t_1normal_1dif_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  specific_configuration_t *arg1 = (specific_configuration_t *) 0 ;
  normal_dif_config_t *arg2 = (normal_dif_config_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(specific_configuration_t **)&jarg1; 
  arg2 = *(normal_dif_config_t **)&jarg2; 
  if (arg1) (arg1)->normal_dif_config = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_specific_1configuration_1t_1normal_1dif_1config_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  specific_configuration_t *arg1 = (specific_configuration_t *) 0 ;
  normal_dif_config_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specific_configuration_t **)&jarg1; 
  result = (normal_dif_config_t *)& ((arg1)->normal_dif_config);
  *(normal_dif_config_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_specific_1configuration_1t_1shim_1eth_1dif_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  specific_configuration_t *arg1 = (specific_configuration_t *) 0 ;
  shim_eth_dif_config_t *arg2 = (shim_eth_dif_config_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(specific_configuration_t **)&jarg1; 
  arg2 = *(shim_eth_dif_config_t **)&jarg2; 
  if (arg1) (arg1)->shim_eth_dif_config = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_specific_1configuration_1t_1shim_1eth_1dif_1config_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  specific_configuration_t *arg1 = (specific_configuration_t *) 0 ;
  shim_eth_dif_config_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(specific_configuration_t **)&jarg1; 
  result = (shim_eth_dif_config_t *)& ((arg1)->shim_eth_dif_config);
  *(shim_eth_dif_config_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1specific_1configuration_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  specific_configuration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (specific_configuration_t *)new specific_configuration_t();
  *(specific_configuration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1specific_1configuration_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  specific_configuration_t *arg1 = (specific_configuration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(specific_configuration_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_dif_1configuration_1t_1dif_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  dif_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_configuration_t **)&jarg1; 
  arg2 = (dif_type_t)jarg2; 
  if (arg1) (arg1)->dif_type = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_dif_1configuration_1t_1dif_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  dif_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_configuration_t **)&jarg1; 
  result = (dif_type_t) ((arg1)->dif_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_dif_1configuration_1t_1dif_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  name_t *arg2 = (name_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dif_configuration_t **)&jarg1; 
  arg2 = *(name_t **)&jarg2; 
  if (arg1) (arg1)->dif_name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_dif_1configuration_1t_1dif_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  name_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_configuration_t **)&jarg1; 
  result = (name_t *)& ((arg1)->dif_name);
  *(name_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_dif_1configuration_1t_1max_1sdu_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_configuration_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_sdu_size = arg2;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_dif_1configuration_1t_1max_1sdu_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_configuration_t **)&jarg1; 
  result = (int) ((arg1)->max_sdu_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_dif_1configuration_1t_1cubes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  array_of_qos_cube_t *arg2 = (array_of_qos_cube_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dif_configuration_t **)&jarg1; 
  arg2 = *(array_of_qos_cube_t **)&jarg2; 
  if (arg1) (arg1)->cubes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_dif_1configuration_1t_1cubes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  array_of_qos_cube_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_configuration_t **)&jarg1; 
  result = (array_of_qos_cube_t *)& ((arg1)->cubes);
  *(array_of_qos_cube_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_dif_1configuration_1t_1specific_1conf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  specific_configuration_t *arg2 = (specific_configuration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dif_configuration_t **)&jarg1; 
  arg2 = *(specific_configuration_t **)&jarg2; 
  if (arg1) (arg1)->specific_conf = *arg2;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_dif_1configuration_1t_1specific_1conf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  specific_configuration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_configuration_t **)&jarg1; 
  result = (specific_configuration_t *)& ((arg1)->specific_conf);
  *(specific_configuration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1dif_1configuration_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dif_configuration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dif_configuration_t *)new dif_configuration_t();
  *(dif_configuration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1dif_1configuration_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dif_configuration_t *arg1 = (dif_configuration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dif_configuration_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  dif_type_t arg2 ;
  ipc_process_id_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = (dif_type_t)jarg2; 
  arg3 = (ipc_process_id_t)jarg3; 
  result = (int)ipcm_create((name_t const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1destroy(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  ipc_process_id_t arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ipc_process_id_t)jarg1; 
  result = (int)ipcm_destroy(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1assign(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ipc_process_id_t arg1 ;
  dif_configuration_t *arg2 = (dif_configuration_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (ipc_process_id_t)jarg1; 
  arg2 = *(dif_configuration_t **)&jarg2; 
  result = (int)ipcm_assign(arg1,(dif_configuration_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1notify_1register(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ipc_process_id_t arg1 ;
  name_t *arg2 = (name_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (ipc_process_id_t)jarg1; 
  arg2 = *(name_t **)&jarg2; 
  result = (int)ipcm_notify_register(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1notify_1unregister(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ipc_process_id_t arg1 ;
  name_t *arg2 = (name_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (ipc_process_id_t)jarg1; 
  arg2 = *(name_t **)&jarg2; 
  result = (int)ipcm_notify_unregister(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1enroll(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ipc_process_id_t arg1 ;
  name_t *arg2 = (name_t *) 0 ;
  name_t *arg3 = (name_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (ipc_process_id_t)jarg1; 
  arg2 = *(name_t **)&jarg2; 
  arg3 = *(name_t **)&jarg3; 
  result = (int)ipcm_enroll(arg1,(name_t const *)arg2,(name_t const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1disconnect(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ipc_process_id_t arg1 ;
  name_t *arg2 = (name_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (ipc_process_id_t)jarg1; 
  arg2 = *(name_t **)&jarg2; 
  result = (int)ipcm_disconnect(arg1,(name_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1register_1app(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  ipc_process_id_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = (ipc_process_id_t)jarg2; 
  result = (int)ipcm_register_app(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1notify_1app_1registration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  response_reason_t arg2 = (response_reason_t) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (response_reason_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)ipcm_notify_app_registration(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1unregister_1app(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  ipc_process_id_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = (ipc_process_id_t)jarg2; 
  result = (int)ipcm_unregister_app(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1notify_1app_1unregistration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  response_reason_t arg2 = (response_reason_t) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (response_reason_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)ipcm_notify_app_unregistration(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1allocate_1flow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  name_t *arg2 = (name_t *) 0 ;
  flow_spec_t *arg3 = (flow_spec_t *) 0 ;
  port_id_t arg4 ;
  ipc_process_id_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = *(name_t **)&jarg2; 
  arg3 = *(flow_spec_t **)&jarg3; 
  arg4 = (port_id_t)jarg4; 
  arg5 = (ipc_process_id_t)jarg5; 
  result = (int)ipcm_allocate_flow(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1notify_1flow_1allocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  jint jresult = 0 ;
  name_t *arg1 = (name_t *) 0 ;
  port_id_t arg2 ;
  ipc_process_id_t arg3 ;
  response_reason_t arg4 = (response_reason_t) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(name_t **)&jarg1; 
  arg2 = (port_id_t)jarg2; 
  arg3 = (ipc_process_id_t)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (response_reason_t)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (int)ipcm_notify_flow_allocation(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_ipcm_1query_1rib(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  ipc_process_id_t arg1 ;
  string_t arg2 = (string_t) 0 ;
  string_t arg3 = (string_t) 0 ;
  int arg4 ;
  regex_t arg5 = (regex_t) 0 ;
  int *arg6 = (int *) 0 ;
  rib_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ipc_process_id_t)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string_t)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (string_t)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (regex_t)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = *(int **)&jarg6; 
  result = (rib_object_t *)ipcm_query_rib(arg1,arg2,arg3,arg4,arg5,arg6);
  *(rib_object_t **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1dif_1properties_1t_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  dif_properties_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (dif_properties_t *)new_dif_properties_t_array(arg1);
  *(dif_properties_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1dif_1properties_1t_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dif_properties_t *arg1 = (dif_properties_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_properties_t **)&jarg1; 
  delete_dif_properties_t_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_dif_1properties_1t_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dif_properties_t *arg1 = (dif_properties_t *) 0 ;
  int arg2 ;
  dif_properties_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dif_properties_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = dif_properties_t_array_getitem(arg1,arg2);
  *(dif_properties_t **)&jresult = new dif_properties_t((const dif_properties_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_dif_1properties_1t_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  dif_properties_t *arg1 = (dif_properties_t *) 0 ;
  int arg2 ;
  dif_properties_t arg3 ;
  dif_properties_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(dif_properties_t **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(dif_properties_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dif_properties_t");
    return ;
  }
  arg3 = *argp3; 
  dif_properties_t_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1qos_1cube_1t_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  qos_cube_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (qos_cube_t *)new_qos_cube_t_array(arg1);
  *(qos_cube_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1qos_1cube_1t_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  qos_cube_t *arg1 = (qos_cube_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qos_cube_t **)&jarg1; 
  delete_qos_cube_t_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_qos_1cube_1t_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  qos_cube_t *arg1 = (qos_cube_t *) 0 ;
  int arg2 ;
  qos_cube_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qos_cube_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = qos_cube_t_array_getitem(arg1,arg2);
  *(qos_cube_t **)&jresult = new qos_cube_t((const qos_cube_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_qos_1cube_1t_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  qos_cube_t *arg1 = (qos_cube_t *) 0 ;
  int arg2 ;
  qos_cube_t arg3 ;
  qos_cube_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(qos_cube_t **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(qos_cube_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null qos_cube_t");
    return ;
  }
  arg3 = *argp3; 
  qos_cube_t_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1rib_1object_1t_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  rib_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (rib_object_t *)new_rib_object_t_array(arg1);
  *(rib_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1rib_1object_1t_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  delete_rib_object_t_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  int arg2 ;
  rib_object_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rib_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = rib_object_t_array_getitem(arg1,arg2);
  *(rib_object_t **)&jresult = new rib_object_t((const rib_object_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_rib_1object_1t_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  rib_object_t *arg1 = (rib_object_t *) 0 ;
  int arg2 ;
  rib_object_t arg3 ;
  rib_object_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(rib_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(rib_object_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rib_object_t");
    return ;
  }
  arg3 = *argp3; 
  rib_object_t_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_new_1intp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)new_intp();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_eu_irati_librina_rinaJNI_copy_1intp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)copy_intp(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_delete_1intp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_intp(arg1);
}


SWIGEXPORT void JNICALL Java_eu_irati_librina_rinaJNI_intp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  intp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_eu_irati_librina_rinaJNI_intp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int)intp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

