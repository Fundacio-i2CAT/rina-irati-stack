// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApplicationRegistrationMessage.proto

#ifndef PROTOBUF_ApplicationRegistrationMessage_2eproto__INCLUDED
#define PROTOBUF_ApplicationRegistrationMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ApplicationProcessNamingInfoMessage.pb.h"
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ApplicationRegistrationMessage_2eproto();
void protobuf_AssignDesc_ApplicationRegistrationMessage_2eproto();
void protobuf_ShutdownFile_ApplicationRegistrationMessage_2eproto();

class ApplicationRegistration;

// ===================================================================

class ApplicationRegistration : public ::google::protobuf::Message {
 public:
  ApplicationRegistration();
  virtual ~ApplicationRegistration();

  ApplicationRegistration(const ApplicationRegistration& from);

  inline ApplicationRegistration& operator=(const ApplicationRegistration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplicationRegistration& default_instance();

  void Swap(ApplicationRegistration* other);

  // implements Message ----------------------------------------------

  ApplicationRegistration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplicationRegistration& from);
  void MergeFrom(const ApplicationRegistration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rina.messages.applicationProcessNamingInfo_t namingInfo = 1;
  inline bool has_naminginfo() const;
  inline void clear_naminginfo();
  static const int kNamingInfoFieldNumber = 1;
  inline const ::rina::messages::applicationProcessNamingInfo_t& naminginfo() const;
  inline ::rina::messages::applicationProcessNamingInfo_t* mutable_naminginfo();
  inline ::rina::messages::applicationProcessNamingInfo_t* release_naminginfo();
  inline void set_allocated_naminginfo(::rina::messages::applicationProcessNamingInfo_t* naminginfo);

  // optional uint32 socketNumber = 2;
  inline bool has_socketnumber() const;
  inline void clear_socketnumber();
  static const int kSocketNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 socketnumber() const;
  inline void set_socketnumber(::google::protobuf::uint32 value);

  // repeated string difNames = 3;
  inline int difnames_size() const;
  inline void clear_difnames();
  static const int kDifNamesFieldNumber = 3;
  inline const ::std::string& difnames(int index) const;
  inline ::std::string* mutable_difnames(int index);
  inline void set_difnames(int index, const ::std::string& value);
  inline void set_difnames(int index, const char* value);
  inline void set_difnames(int index, const char* value, size_t size);
  inline ::std::string* add_difnames();
  inline void add_difnames(const ::std::string& value);
  inline void add_difnames(const char* value);
  inline void add_difnames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& difnames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_difnames();

  // @@protoc_insertion_point(class_scope:rina.messages.ApplicationRegistration)
 private:
  inline void set_has_naminginfo();
  inline void clear_has_naminginfo();
  inline void set_has_socketnumber();
  inline void clear_has_socketnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rina::messages::applicationProcessNamingInfo_t* naminginfo_;
  ::google::protobuf::RepeatedPtrField< ::std::string> difnames_;
  ::google::protobuf::uint32 socketnumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ApplicationRegistrationMessage_2eproto();
  friend void protobuf_AssignDesc_ApplicationRegistrationMessage_2eproto();
  friend void protobuf_ShutdownFile_ApplicationRegistrationMessage_2eproto();

  void InitAsDefaultInstance();
  static ApplicationRegistration* default_instance_;
};
// ===================================================================


// ===================================================================

// ApplicationRegistration

// optional .rina.messages.applicationProcessNamingInfo_t namingInfo = 1;
inline bool ApplicationRegistration::has_naminginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplicationRegistration::set_has_naminginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApplicationRegistration::clear_has_naminginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApplicationRegistration::clear_naminginfo() {
  if (naminginfo_ != NULL) naminginfo_->::rina::messages::applicationProcessNamingInfo_t::Clear();
  clear_has_naminginfo();
}
inline const ::rina::messages::applicationProcessNamingInfo_t& ApplicationRegistration::naminginfo() const {
  return naminginfo_ != NULL ? *naminginfo_ : *default_instance_->naminginfo_;
}
inline ::rina::messages::applicationProcessNamingInfo_t* ApplicationRegistration::mutable_naminginfo() {
  set_has_naminginfo();
  if (naminginfo_ == NULL) naminginfo_ = new ::rina::messages::applicationProcessNamingInfo_t;
  return naminginfo_;
}
inline ::rina::messages::applicationProcessNamingInfo_t* ApplicationRegistration::release_naminginfo() {
  clear_has_naminginfo();
  ::rina::messages::applicationProcessNamingInfo_t* temp = naminginfo_;
  naminginfo_ = NULL;
  return temp;
}
inline void ApplicationRegistration::set_allocated_naminginfo(::rina::messages::applicationProcessNamingInfo_t* naminginfo) {
  delete naminginfo_;
  naminginfo_ = naminginfo;
  if (naminginfo) {
    set_has_naminginfo();
  } else {
    clear_has_naminginfo();
  }
}

// optional uint32 socketNumber = 2;
inline bool ApplicationRegistration::has_socketnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplicationRegistration::set_has_socketnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApplicationRegistration::clear_has_socketnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApplicationRegistration::clear_socketnumber() {
  socketnumber_ = 0u;
  clear_has_socketnumber();
}
inline ::google::protobuf::uint32 ApplicationRegistration::socketnumber() const {
  return socketnumber_;
}
inline void ApplicationRegistration::set_socketnumber(::google::protobuf::uint32 value) {
  set_has_socketnumber();
  socketnumber_ = value;
}

// repeated string difNames = 3;
inline int ApplicationRegistration::difnames_size() const {
  return difnames_.size();
}
inline void ApplicationRegistration::clear_difnames() {
  difnames_.Clear();
}
inline const ::std::string& ApplicationRegistration::difnames(int index) const {
  return difnames_.Get(index);
}
inline ::std::string* ApplicationRegistration::mutable_difnames(int index) {
  return difnames_.Mutable(index);
}
inline void ApplicationRegistration::set_difnames(int index, const ::std::string& value) {
  difnames_.Mutable(index)->assign(value);
}
inline void ApplicationRegistration::set_difnames(int index, const char* value) {
  difnames_.Mutable(index)->assign(value);
}
inline void ApplicationRegistration::set_difnames(int index, const char* value, size_t size) {
  difnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ApplicationRegistration::add_difnames() {
  return difnames_.Add();
}
inline void ApplicationRegistration::add_difnames(const ::std::string& value) {
  difnames_.Add()->assign(value);
}
inline void ApplicationRegistration::add_difnames(const char* value) {
  difnames_.Add()->assign(value);
}
inline void ApplicationRegistration::add_difnames(const char* value, size_t size) {
  difnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ApplicationRegistration::difnames() const {
  return difnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ApplicationRegistration::mutable_difnames() {
  return &difnames_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ApplicationRegistrationMessage_2eproto__INCLUDED
