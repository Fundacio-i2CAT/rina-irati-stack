// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PolicyDescriptorMessage.proto

#ifndef PROTOBUF_PolicyDescriptorMessage_2eproto__INCLUDED
#define PROTOBUF_PolicyDescriptorMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonMessages.pb.h"
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PolicyDescriptorMessage_2eproto();
void protobuf_AssignDesc_PolicyDescriptorMessage_2eproto();
void protobuf_ShutdownFile_PolicyDescriptorMessage_2eproto();

class policyDescriptor_t;

// ===================================================================

class policyDescriptor_t : public ::google::protobuf::Message {
 public:
  policyDescriptor_t();
  virtual ~policyDescriptor_t();

  policyDescriptor_t(const policyDescriptor_t& from);

  inline policyDescriptor_t& operator=(const policyDescriptor_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const policyDescriptor_t& default_instance();

  void Swap(policyDescriptor_t* other);

  // implements Message ----------------------------------------------

  policyDescriptor_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const policyDescriptor_t& from);
  void MergeFrom(const policyDescriptor_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string policyName = 1;
  inline bool has_policyname() const;
  inline void clear_policyname();
  static const int kPolicyNameFieldNumber = 1;
  inline const ::std::string& policyname() const;
  inline void set_policyname(const ::std::string& value);
  inline void set_policyname(const char* value);
  inline void set_policyname(const char* value, size_t size);
  inline ::std::string* mutable_policyname();
  inline ::std::string* release_policyname();
  inline void set_allocated_policyname(::std::string* policyname);

  // optional string policyImplName = 2;
  inline bool has_policyimplname() const;
  inline void clear_policyimplname();
  static const int kPolicyImplNameFieldNumber = 2;
  inline const ::std::string& policyimplname() const;
  inline void set_policyimplname(const ::std::string& value);
  inline void set_policyimplname(const char* value);
  inline void set_policyimplname(const char* value, size_t size);
  inline ::std::string* mutable_policyimplname();
  inline ::std::string* release_policyimplname();
  inline void set_allocated_policyimplname(::std::string* policyimplname);

  // optional string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // repeated .rina.messages.property_t policyParameters = 4;
  inline int policyparameters_size() const;
  inline void clear_policyparameters();
  static const int kPolicyParametersFieldNumber = 4;
  inline const ::rina::messages::property_t& policyparameters(int index) const;
  inline ::rina::messages::property_t* mutable_policyparameters(int index);
  inline ::rina::messages::property_t* add_policyparameters();
  inline const ::google::protobuf::RepeatedPtrField< ::rina::messages::property_t >&
      policyparameters() const;
  inline ::google::protobuf::RepeatedPtrField< ::rina::messages::property_t >*
      mutable_policyparameters();

  // @@protoc_insertion_point(class_scope:rina.messages.policyDescriptor_t)
 private:
  inline void set_has_policyname();
  inline void clear_has_policyname();
  inline void set_has_policyimplname();
  inline void clear_has_policyimplname();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* policyname_;
  ::std::string* policyimplname_;
  ::std::string* version_;
  ::google::protobuf::RepeatedPtrField< ::rina::messages::property_t > policyparameters_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PolicyDescriptorMessage_2eproto();
  friend void protobuf_AssignDesc_PolicyDescriptorMessage_2eproto();
  friend void protobuf_ShutdownFile_PolicyDescriptorMessage_2eproto();

  void InitAsDefaultInstance();
  static policyDescriptor_t* default_instance_;
};
// ===================================================================


// ===================================================================

// policyDescriptor_t

// optional string policyName = 1;
inline bool policyDescriptor_t::has_policyname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void policyDescriptor_t::set_has_policyname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void policyDescriptor_t::clear_has_policyname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void policyDescriptor_t::clear_policyname() {
  if (policyname_ != &::google::protobuf::internal::kEmptyString) {
    policyname_->clear();
  }
  clear_has_policyname();
}
inline const ::std::string& policyDescriptor_t::policyname() const {
  return *policyname_;
}
inline void policyDescriptor_t::set_policyname(const ::std::string& value) {
  set_has_policyname();
  if (policyname_ == &::google::protobuf::internal::kEmptyString) {
    policyname_ = new ::std::string;
  }
  policyname_->assign(value);
}
inline void policyDescriptor_t::set_policyname(const char* value) {
  set_has_policyname();
  if (policyname_ == &::google::protobuf::internal::kEmptyString) {
    policyname_ = new ::std::string;
  }
  policyname_->assign(value);
}
inline void policyDescriptor_t::set_policyname(const char* value, size_t size) {
  set_has_policyname();
  if (policyname_ == &::google::protobuf::internal::kEmptyString) {
    policyname_ = new ::std::string;
  }
  policyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* policyDescriptor_t::mutable_policyname() {
  set_has_policyname();
  if (policyname_ == &::google::protobuf::internal::kEmptyString) {
    policyname_ = new ::std::string;
  }
  return policyname_;
}
inline ::std::string* policyDescriptor_t::release_policyname() {
  clear_has_policyname();
  if (policyname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = policyname_;
    policyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void policyDescriptor_t::set_allocated_policyname(::std::string* policyname) {
  if (policyname_ != &::google::protobuf::internal::kEmptyString) {
    delete policyname_;
  }
  if (policyname) {
    set_has_policyname();
    policyname_ = policyname;
  } else {
    clear_has_policyname();
    policyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string policyImplName = 2;
inline bool policyDescriptor_t::has_policyimplname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void policyDescriptor_t::set_has_policyimplname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void policyDescriptor_t::clear_has_policyimplname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void policyDescriptor_t::clear_policyimplname() {
  if (policyimplname_ != &::google::protobuf::internal::kEmptyString) {
    policyimplname_->clear();
  }
  clear_has_policyimplname();
}
inline const ::std::string& policyDescriptor_t::policyimplname() const {
  return *policyimplname_;
}
inline void policyDescriptor_t::set_policyimplname(const ::std::string& value) {
  set_has_policyimplname();
  if (policyimplname_ == &::google::protobuf::internal::kEmptyString) {
    policyimplname_ = new ::std::string;
  }
  policyimplname_->assign(value);
}
inline void policyDescriptor_t::set_policyimplname(const char* value) {
  set_has_policyimplname();
  if (policyimplname_ == &::google::protobuf::internal::kEmptyString) {
    policyimplname_ = new ::std::string;
  }
  policyimplname_->assign(value);
}
inline void policyDescriptor_t::set_policyimplname(const char* value, size_t size) {
  set_has_policyimplname();
  if (policyimplname_ == &::google::protobuf::internal::kEmptyString) {
    policyimplname_ = new ::std::string;
  }
  policyimplname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* policyDescriptor_t::mutable_policyimplname() {
  set_has_policyimplname();
  if (policyimplname_ == &::google::protobuf::internal::kEmptyString) {
    policyimplname_ = new ::std::string;
  }
  return policyimplname_;
}
inline ::std::string* policyDescriptor_t::release_policyimplname() {
  clear_has_policyimplname();
  if (policyimplname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = policyimplname_;
    policyimplname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void policyDescriptor_t::set_allocated_policyimplname(::std::string* policyimplname) {
  if (policyimplname_ != &::google::protobuf::internal::kEmptyString) {
    delete policyimplname_;
  }
  if (policyimplname) {
    set_has_policyimplname();
    policyimplname_ = policyimplname;
  } else {
    clear_has_policyimplname();
    policyimplname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string version = 3;
inline bool policyDescriptor_t::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void policyDescriptor_t::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void policyDescriptor_t::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void policyDescriptor_t::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& policyDescriptor_t::version() const {
  return *version_;
}
inline void policyDescriptor_t::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void policyDescriptor_t::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void policyDescriptor_t::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* policyDescriptor_t::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* policyDescriptor_t::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void policyDescriptor_t::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .rina.messages.property_t policyParameters = 4;
inline int policyDescriptor_t::policyparameters_size() const {
  return policyparameters_.size();
}
inline void policyDescriptor_t::clear_policyparameters() {
  policyparameters_.Clear();
}
inline const ::rina::messages::property_t& policyDescriptor_t::policyparameters(int index) const {
  return policyparameters_.Get(index);
}
inline ::rina::messages::property_t* policyDescriptor_t::mutable_policyparameters(int index) {
  return policyparameters_.Mutable(index);
}
inline ::rina::messages::property_t* policyDescriptor_t::add_policyparameters() {
  return policyparameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rina::messages::property_t >&
policyDescriptor_t::policyparameters() const {
  return policyparameters_;
}
inline ::google::protobuf::RepeatedPtrField< ::rina::messages::property_t >*
policyDescriptor_t::mutable_policyparameters() {
  return &policyparameters_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PolicyDescriptorMessage_2eproto__INCLUDED
