// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlowServiceMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FlowServiceMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* FlowService_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowService_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FlowServiceMessage_2eproto() {
  protobuf_AddDesc_FlowServiceMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FlowServiceMessage.proto");
  GOOGLE_CHECK(file != NULL);
  FlowService_descriptor_ = file->message_type(0);
  static const int FlowService_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowService, sourcenaminginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowService, destinationnaminginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowService, qosspecification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowService, portid_),
  };
  FlowService_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowService_descriptor_,
      FlowService::default_instance_,
      FlowService_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowService, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowService, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowService));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FlowServiceMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowService_descriptor_, &FlowService::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FlowServiceMessage_2eproto() {
  delete FlowService::default_instance_;
  delete FlowService_reflection_;
}

void protobuf_AddDesc_FlowServiceMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rina::messages::protobuf_AddDesc_ApplicationProcessNamingInfoMessage_2eproto();
  ::rina::messages::protobuf_AddDesc_QoSSpecification_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030FlowServiceMessage.proto\022\rrina.message"
    "s\032)ApplicationProcessNamingInfoMessage.p"
    "roto\032\026QoSSpecification.proto\"\361\001\n\013FlowSer"
    "vice\022G\n\020sourceNamingInfo\030\001 \001(\0132-.rina.me"
    "ssages.applicationProcessNamingInfo_t\022L\n"
    "\025destinationNamingInfo\030\002 \002(\0132-.rina.mess"
    "ages.applicationProcessNamingInfo_t\022;\n\020q"
    "osSpecification\030\003 \001(\0132!.rina.messages.qo"
    "sSpecification_t\022\016\n\006portId\030\004 \001(\004B/\n-rina"
    ".encoding.impl.googleprotobuf.flowservic"
    "e", 401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FlowServiceMessage.proto", &protobuf_RegisterTypes);
  FlowService::default_instance_ = new FlowService();
  FlowService::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FlowServiceMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FlowServiceMessage_2eproto {
  StaticDescriptorInitializer_FlowServiceMessage_2eproto() {
    protobuf_AddDesc_FlowServiceMessage_2eproto();
  }
} static_descriptor_initializer_FlowServiceMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FlowService::kSourceNamingInfoFieldNumber;
const int FlowService::kDestinationNamingInfoFieldNumber;
const int FlowService::kQosSpecificationFieldNumber;
const int FlowService::kPortIdFieldNumber;
#endif  // !_MSC_VER

FlowService::FlowService()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlowService::InitAsDefaultInstance() {
  sourcenaminginfo_ = const_cast< ::rina::messages::applicationProcessNamingInfo_t*>(&::rina::messages::applicationProcessNamingInfo_t::default_instance());
  destinationnaminginfo_ = const_cast< ::rina::messages::applicationProcessNamingInfo_t*>(&::rina::messages::applicationProcessNamingInfo_t::default_instance());
  qosspecification_ = const_cast< ::rina::messages::qosSpecification_t*>(&::rina::messages::qosSpecification_t::default_instance());
}

FlowService::FlowService(const FlowService& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlowService::SharedCtor() {
  _cached_size_ = 0;
  sourcenaminginfo_ = NULL;
  destinationnaminginfo_ = NULL;
  qosspecification_ = NULL;
  portid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowService::~FlowService() {
  SharedDtor();
}

void FlowService::SharedDtor() {
  if (this != default_instance_) {
    delete sourcenaminginfo_;
    delete destinationnaminginfo_;
    delete qosspecification_;
  }
}

void FlowService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowService_descriptor_;
}

const FlowService& FlowService::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FlowServiceMessage_2eproto();
  return *default_instance_;
}

FlowService* FlowService::default_instance_ = NULL;

FlowService* FlowService::New() const {
  return new FlowService;
}

void FlowService::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sourcenaminginfo()) {
      if (sourcenaminginfo_ != NULL) sourcenaminginfo_->::rina::messages::applicationProcessNamingInfo_t::Clear();
    }
    if (has_destinationnaminginfo()) {
      if (destinationnaminginfo_ != NULL) destinationnaminginfo_->::rina::messages::applicationProcessNamingInfo_t::Clear();
    }
    if (has_qosspecification()) {
      if (qosspecification_ != NULL) qosspecification_->::rina::messages::qosSpecification_t::Clear();
    }
    portid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rina.messages.applicationProcessNamingInfo_t sourceNamingInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourcenaminginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_destinationNamingInfo;
        break;
      }

      // required .rina.messages.applicationProcessNamingInfo_t destinationNamingInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destinationNamingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destinationnaminginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_qosSpecification;
        break;
      }

      // optional .rina.messages.qosSpecification_t qosSpecification = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qosSpecification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qosspecification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_portId;
        break;
      }

      // optional uint64 portId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &portid_)));
          set_has_portid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlowService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rina.messages.applicationProcessNamingInfo_t sourceNamingInfo = 1;
  if (has_sourcenaminginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sourcenaminginfo(), output);
  }

  // required .rina.messages.applicationProcessNamingInfo_t destinationNamingInfo = 2;
  if (has_destinationnaminginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->destinationnaminginfo(), output);
  }

  // optional .rina.messages.qosSpecification_t qosSpecification = 3;
  if (has_qosspecification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->qosspecification(), output);
  }

  // optional uint64 portId = 4;
  if (has_portid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->portid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlowService::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rina.messages.applicationProcessNamingInfo_t sourceNamingInfo = 1;
  if (has_sourcenaminginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sourcenaminginfo(), target);
  }

  // required .rina.messages.applicationProcessNamingInfo_t destinationNamingInfo = 2;
  if (has_destinationnaminginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->destinationnaminginfo(), target);
  }

  // optional .rina.messages.qosSpecification_t qosSpecification = 3;
  if (has_qosspecification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->qosspecification(), target);
  }

  // optional uint64 portId = 4;
  if (has_portid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->portid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlowService::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rina.messages.applicationProcessNamingInfo_t sourceNamingInfo = 1;
    if (has_sourcenaminginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourcenaminginfo());
    }

    // required .rina.messages.applicationProcessNamingInfo_t destinationNamingInfo = 2;
    if (has_destinationnaminginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destinationnaminginfo());
    }

    // optional .rina.messages.qosSpecification_t qosSpecification = 3;
    if (has_qosspecification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qosspecification());
    }

    // optional uint64 portId = 4;
    if (has_portid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->portid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowService::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowService* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowService*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowService::MergeFrom(const FlowService& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcenaminginfo()) {
      mutable_sourcenaminginfo()->::rina::messages::applicationProcessNamingInfo_t::MergeFrom(from.sourcenaminginfo());
    }
    if (from.has_destinationnaminginfo()) {
      mutable_destinationnaminginfo()->::rina::messages::applicationProcessNamingInfo_t::MergeFrom(from.destinationnaminginfo());
    }
    if (from.has_qosspecification()) {
      mutable_qosspecification()->::rina::messages::qosSpecification_t::MergeFrom(from.qosspecification());
    }
    if (from.has_portid()) {
      set_portid(from.portid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowService::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowService::CopyFrom(const FlowService& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowService::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_sourcenaminginfo()) {
    if (!this->sourcenaminginfo().IsInitialized()) return false;
  }
  if (has_destinationnaminginfo()) {
    if (!this->destinationnaminginfo().IsInitialized()) return false;
  }
  if (has_qosspecification()) {
    if (!this->qosspecification().IsInitialized()) return false;
  }
  return true;
}

void FlowService::Swap(FlowService* other) {
  if (other != this) {
    std::swap(sourcenaminginfo_, other->sourcenaminginfo_);
    std::swap(destinationnaminginfo_, other->destinationnaminginfo_);
    std::swap(qosspecification_, other->qosspecification_);
    std::swap(portid_, other->portid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowService::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowService_descriptor_;
  metadata.reflection = FlowService_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

// @@protoc_insertion_point(global_scope)
