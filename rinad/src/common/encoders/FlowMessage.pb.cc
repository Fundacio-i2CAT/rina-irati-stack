// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlowMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FlowMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* connectionId_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connectionId_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* Flow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Flow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FlowMessage_2eproto() {
  protobuf_AddDesc_FlowMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FlowMessage.proto");
  GOOGLE_CHECK(file != NULL);
  connectionId_t_descriptor_ = file->message_type(0);
  static const int connectionId_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionId_t, qosid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionId_t, sourcecepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionId_t, destinationcepid_),
  };
  connectionId_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      connectionId_t_descriptor_,
      connectionId_t::default_instance_,
      connectionId_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionId_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionId_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(connectionId_t));
  Flow_descriptor_ = file->message_type(1);
  static const int Flow_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, sourcenaminginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, destinationnaminginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, sourceportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, destinationportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, sourceaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, destinationaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, connectionids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, currentconnectionidindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, qosparameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, connectionpolicies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, accesscontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, maxcreateflowretries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, createflowretries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, hopcount_),
  };
  Flow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Flow_descriptor_,
      Flow::default_instance_,
      Flow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Flow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FlowMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    connectionId_t_descriptor_, &connectionId_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Flow_descriptor_, &Flow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FlowMessage_2eproto() {
  delete connectionId_t::default_instance_;
  delete connectionId_t_reflection_;
  delete Flow::default_instance_;
  delete Flow_reflection_;
}

void protobuf_AddDesc_FlowMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rina::messages::protobuf_AddDesc_ApplicationProcessNamingInfoMessage_2eproto();
  ::rina::messages::protobuf_AddDesc_QoSSpecification_2eproto();
  ::rina::messages::protobuf_AddDesc_ConnectionPoliciesMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021FlowMessage.proto\022\rrina.messages\032)Appl"
    "icationProcessNamingInfoMessage.proto\032\026Q"
    "oSSpecification.proto\032\037ConnectionPolicie"
    "sMessage.proto\"N\n\016connectionId_t\022\r\n\005qosI"
    "d\030\001 \001(\r\022\023\n\013sourceCEPId\030\002 \001(\r\022\030\n\020destinat"
    "ionCEPId\030\003 \001(\r\"\305\004\n\004Flow\022G\n\020sourceNamingI"
    "nfo\030\001 \002(\0132-.rina.messages.applicationPro"
    "cessNamingInfo_t\022L\n\025destinationNamingInf"
    "o\030\002 \002(\0132-.rina.messages.applicationProce"
    "ssNamingInfo_t\022\024\n\014sourcePortId\030\003 \002(\004\022\031\n\021"
    "destinationPortId\030\004 \001(\004\022\025\n\rsourceAddress"
    "\030\005 \002(\004\022\032\n\022destinationAddress\030\006 \001(\004\0224\n\rco"
    "nnectionIds\030\007 \003(\0132\035.rina.messages.connec"
    "tionId_t\022 \n\030currentConnectionIdIndex\030\010 \001"
    "(\r\022\r\n\005state\030\t \001(\r\0228\n\rqosParameters\030\n \001(\013"
    "2!.rina.messages.qosSpecification_t\022\?\n\022c"
    "onnectionPolicies\030\013 \001(\0132#.rina.messages."
    "connectionPolicies_t\022\025\n\raccessControl\030\014 "
    "\001(\014\022\034\n\024maxCreateFlowRetries\030\r \001(\r\022\031\n\021cre"
    "ateFlowRetries\030\016 \001(\r\022\020\n\010hopCount\030\017 \001(\rB("
    "\n&rina.encoding.impl.googleprotobuf.flow", 840);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FlowMessage.proto", &protobuf_RegisterTypes);
  connectionId_t::default_instance_ = new connectionId_t();
  Flow::default_instance_ = new Flow();
  connectionId_t::default_instance_->InitAsDefaultInstance();
  Flow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FlowMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FlowMessage_2eproto {
  StaticDescriptorInitializer_FlowMessage_2eproto() {
    protobuf_AddDesc_FlowMessage_2eproto();
  }
} static_descriptor_initializer_FlowMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int connectionId_t::kQosIdFieldNumber;
const int connectionId_t::kSourceCEPIdFieldNumber;
const int connectionId_t::kDestinationCEPIdFieldNumber;
#endif  // !_MSC_VER

connectionId_t::connectionId_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void connectionId_t::InitAsDefaultInstance() {
}

connectionId_t::connectionId_t(const connectionId_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void connectionId_t::SharedCtor() {
  _cached_size_ = 0;
  qosid_ = 0u;
  sourcecepid_ = 0u;
  destinationcepid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connectionId_t::~connectionId_t() {
  SharedDtor();
}

void connectionId_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void connectionId_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connectionId_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connectionId_t_descriptor_;
}

const connectionId_t& connectionId_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FlowMessage_2eproto();
  return *default_instance_;
}

connectionId_t* connectionId_t::default_instance_ = NULL;

connectionId_t* connectionId_t::New() const {
  return new connectionId_t;
}

void connectionId_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qosid_ = 0u;
    sourcecepid_ = 0u;
    destinationcepid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool connectionId_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 qosId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qosid_)));
          set_has_qosid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sourceCEPId;
        break;
      }

      // optional uint32 sourceCEPId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceCEPId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcecepid_)));
          set_has_sourcecepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destinationCEPId;
        break;
      }

      // optional uint32 destinationCEPId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destinationCEPId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destinationcepid_)));
          set_has_destinationcepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void connectionId_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 qosId = 1;
  if (has_qosid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->qosid(), output);
  }

  // optional uint32 sourceCEPId = 2;
  if (has_sourcecepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sourcecepid(), output);
  }

  // optional uint32 destinationCEPId = 3;
  if (has_destinationcepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destinationcepid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* connectionId_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 qosId = 1;
  if (has_qosid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->qosid(), target);
  }

  // optional uint32 sourceCEPId = 2;
  if (has_sourcecepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sourcecepid(), target);
  }

  // optional uint32 destinationCEPId = 3;
  if (has_destinationcepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destinationcepid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int connectionId_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 qosId = 1;
    if (has_qosid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qosid());
    }

    // optional uint32 sourceCEPId = 2;
    if (has_sourcecepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcecepid());
    }

    // optional uint32 destinationCEPId = 3;
    if (has_destinationcepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destinationcepid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connectionId_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const connectionId_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const connectionId_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void connectionId_t::MergeFrom(const connectionId_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qosid()) {
      set_qosid(from.qosid());
    }
    if (from.has_sourcecepid()) {
      set_sourcecepid(from.sourcecepid());
    }
    if (from.has_destinationcepid()) {
      set_destinationcepid(from.destinationcepid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void connectionId_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connectionId_t::CopyFrom(const connectionId_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connectionId_t::IsInitialized() const {

  return true;
}

void connectionId_t::Swap(connectionId_t* other) {
  if (other != this) {
    std::swap(qosid_, other->qosid_);
    std::swap(sourcecepid_, other->sourcecepid_);
    std::swap(destinationcepid_, other->destinationcepid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata connectionId_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connectionId_t_descriptor_;
  metadata.reflection = connectionId_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Flow::kSourceNamingInfoFieldNumber;
const int Flow::kDestinationNamingInfoFieldNumber;
const int Flow::kSourcePortIdFieldNumber;
const int Flow::kDestinationPortIdFieldNumber;
const int Flow::kSourceAddressFieldNumber;
const int Flow::kDestinationAddressFieldNumber;
const int Flow::kConnectionIdsFieldNumber;
const int Flow::kCurrentConnectionIdIndexFieldNumber;
const int Flow::kStateFieldNumber;
const int Flow::kQosParametersFieldNumber;
const int Flow::kConnectionPoliciesFieldNumber;
const int Flow::kAccessControlFieldNumber;
const int Flow::kMaxCreateFlowRetriesFieldNumber;
const int Flow::kCreateFlowRetriesFieldNumber;
const int Flow::kHopCountFieldNumber;
#endif  // !_MSC_VER

Flow::Flow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Flow::InitAsDefaultInstance() {
  sourcenaminginfo_ = const_cast< ::rina::messages::applicationProcessNamingInfo_t*>(&::rina::messages::applicationProcessNamingInfo_t::default_instance());
  destinationnaminginfo_ = const_cast< ::rina::messages::applicationProcessNamingInfo_t*>(&::rina::messages::applicationProcessNamingInfo_t::default_instance());
  qosparameters_ = const_cast< ::rina::messages::qosSpecification_t*>(&::rina::messages::qosSpecification_t::default_instance());
  connectionpolicies_ = const_cast< ::rina::messages::connectionPolicies_t*>(&::rina::messages::connectionPolicies_t::default_instance());
}

Flow::Flow(const Flow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Flow::SharedCtor() {
  _cached_size_ = 0;
  sourcenaminginfo_ = NULL;
  destinationnaminginfo_ = NULL;
  sourceportid_ = GOOGLE_ULONGLONG(0);
  destinationportid_ = GOOGLE_ULONGLONG(0);
  sourceaddress_ = GOOGLE_ULONGLONG(0);
  destinationaddress_ = GOOGLE_ULONGLONG(0);
  currentconnectionidindex_ = 0u;
  state_ = 0u;
  qosparameters_ = NULL;
  connectionpolicies_ = NULL;
  accesscontrol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxcreateflowretries_ = 0u;
  createflowretries_ = 0u;
  hopcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Flow::~Flow() {
  SharedDtor();
}

void Flow::SharedDtor() {
  if (accesscontrol_ != &::google::protobuf::internal::kEmptyString) {
    delete accesscontrol_;
  }
  if (this != default_instance_) {
    delete sourcenaminginfo_;
    delete destinationnaminginfo_;
    delete qosparameters_;
    delete connectionpolicies_;
  }
}

void Flow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Flow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Flow_descriptor_;
}

const Flow& Flow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FlowMessage_2eproto();
  return *default_instance_;
}

Flow* Flow::default_instance_ = NULL;

Flow* Flow::New() const {
  return new Flow;
}

void Flow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sourcenaminginfo()) {
      if (sourcenaminginfo_ != NULL) sourcenaminginfo_->::rina::messages::applicationProcessNamingInfo_t::Clear();
    }
    if (has_destinationnaminginfo()) {
      if (destinationnaminginfo_ != NULL) destinationnaminginfo_->::rina::messages::applicationProcessNamingInfo_t::Clear();
    }
    sourceportid_ = GOOGLE_ULONGLONG(0);
    destinationportid_ = GOOGLE_ULONGLONG(0);
    sourceaddress_ = GOOGLE_ULONGLONG(0);
    destinationaddress_ = GOOGLE_ULONGLONG(0);
    currentconnectionidindex_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    state_ = 0u;
    if (has_qosparameters()) {
      if (qosparameters_ != NULL) qosparameters_->::rina::messages::qosSpecification_t::Clear();
    }
    if (has_connectionpolicies()) {
      if (connectionpolicies_ != NULL) connectionpolicies_->::rina::messages::connectionPolicies_t::Clear();
    }
    if (has_accesscontrol()) {
      if (accesscontrol_ != &::google::protobuf::internal::kEmptyString) {
        accesscontrol_->clear();
      }
    }
    maxcreateflowretries_ = 0u;
    createflowretries_ = 0u;
    hopcount_ = 0u;
  }
  connectionids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Flow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rina.messages.applicationProcessNamingInfo_t sourceNamingInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourcenaminginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_destinationNamingInfo;
        break;
      }

      // required .rina.messages.applicationProcessNamingInfo_t destinationNamingInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destinationNamingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destinationnaminginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sourcePortId;
        break;
      }

      // required uint64 sourcePortId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourcePortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sourceportid_)));
          set_has_sourceportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_destinationPortId;
        break;
      }

      // optional uint64 destinationPortId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destinationPortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destinationportid_)));
          set_has_destinationportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sourceAddress;
        break;
      }

      // required uint64 sourceAddress = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sourceaddress_)));
          set_has_sourceaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_destinationAddress;
        break;
      }

      // optional uint64 destinationAddress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destinationAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destinationaddress_)));
          set_has_destinationaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_connectionIds;
        break;
      }

      // repeated .rina.messages.connectionId_t connectionIds = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connectionids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_connectionIds;
        if (input->ExpectTag(64)) goto parse_currentConnectionIdIndex;
        break;
      }

      // optional uint32 currentConnectionIdIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentConnectionIdIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentconnectionidindex_)));
          set_has_currentconnectionidindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_state;
        break;
      }

      // optional uint32 state = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_qosParameters;
        break;
      }

      // optional .rina.messages.qosSpecification_t qosParameters = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qosParameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qosparameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_connectionPolicies;
        break;
      }

      // optional .rina.messages.connectionPolicies_t connectionPolicies = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionPolicies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectionpolicies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_accessControl;
        break;
      }

      // optional bytes accessControl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessControl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_accesscontrol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maxCreateFlowRetries;
        break;
      }

      // optional uint32 maxCreateFlowRetries = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCreateFlowRetries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcreateflowretries_)));
          set_has_maxcreateflowretries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_createFlowRetries;
        break;
      }

      // optional uint32 createFlowRetries = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createFlowRetries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createflowretries_)));
          set_has_createflowretries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_hopCount;
        break;
      }

      // optional uint32 hopCount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hopCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hopcount_)));
          set_has_hopcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Flow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rina.messages.applicationProcessNamingInfo_t sourceNamingInfo = 1;
  if (has_sourcenaminginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sourcenaminginfo(), output);
  }

  // required .rina.messages.applicationProcessNamingInfo_t destinationNamingInfo = 2;
  if (has_destinationnaminginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->destinationnaminginfo(), output);
  }

  // required uint64 sourcePortId = 3;
  if (has_sourceportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sourceportid(), output);
  }

  // optional uint64 destinationPortId = 4;
  if (has_destinationportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->destinationportid(), output);
  }

  // required uint64 sourceAddress = 5;
  if (has_sourceaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sourceaddress(), output);
  }

  // optional uint64 destinationAddress = 6;
  if (has_destinationaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->destinationaddress(), output);
  }

  // repeated .rina.messages.connectionId_t connectionIds = 7;
  for (int i = 0; i < this->connectionids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->connectionids(i), output);
  }

  // optional uint32 currentConnectionIdIndex = 8;
  if (has_currentconnectionidindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->currentconnectionidindex(), output);
  }

  // optional uint32 state = 9;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->state(), output);
  }

  // optional .rina.messages.qosSpecification_t qosParameters = 10;
  if (has_qosparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->qosparameters(), output);
  }

  // optional .rina.messages.connectionPolicies_t connectionPolicies = 11;
  if (has_connectionpolicies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->connectionpolicies(), output);
  }

  // optional bytes accessControl = 12;
  if (has_accesscontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->accesscontrol(), output);
  }

  // optional uint32 maxCreateFlowRetries = 13;
  if (has_maxcreateflowretries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->maxcreateflowretries(), output);
  }

  // optional uint32 createFlowRetries = 14;
  if (has_createflowretries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->createflowretries(), output);
  }

  // optional uint32 hopCount = 15;
  if (has_hopcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->hopcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Flow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rina.messages.applicationProcessNamingInfo_t sourceNamingInfo = 1;
  if (has_sourcenaminginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sourcenaminginfo(), target);
  }

  // required .rina.messages.applicationProcessNamingInfo_t destinationNamingInfo = 2;
  if (has_destinationnaminginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->destinationnaminginfo(), target);
  }

  // required uint64 sourcePortId = 3;
  if (has_sourceportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sourceportid(), target);
  }

  // optional uint64 destinationPortId = 4;
  if (has_destinationportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->destinationportid(), target);
  }

  // required uint64 sourceAddress = 5;
  if (has_sourceaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sourceaddress(), target);
  }

  // optional uint64 destinationAddress = 6;
  if (has_destinationaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->destinationaddress(), target);
  }

  // repeated .rina.messages.connectionId_t connectionIds = 7;
  for (int i = 0; i < this->connectionids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->connectionids(i), target);
  }

  // optional uint32 currentConnectionIdIndex = 8;
  if (has_currentconnectionidindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->currentconnectionidindex(), target);
  }

  // optional uint32 state = 9;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->state(), target);
  }

  // optional .rina.messages.qosSpecification_t qosParameters = 10;
  if (has_qosparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->qosparameters(), target);
  }

  // optional .rina.messages.connectionPolicies_t connectionPolicies = 11;
  if (has_connectionpolicies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->connectionpolicies(), target);
  }

  // optional bytes accessControl = 12;
  if (has_accesscontrol()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->accesscontrol(), target);
  }

  // optional uint32 maxCreateFlowRetries = 13;
  if (has_maxcreateflowretries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->maxcreateflowretries(), target);
  }

  // optional uint32 createFlowRetries = 14;
  if (has_createflowretries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->createflowretries(), target);
  }

  // optional uint32 hopCount = 15;
  if (has_hopcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->hopcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Flow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rina.messages.applicationProcessNamingInfo_t sourceNamingInfo = 1;
    if (has_sourcenaminginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourcenaminginfo());
    }

    // required .rina.messages.applicationProcessNamingInfo_t destinationNamingInfo = 2;
    if (has_destinationnaminginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destinationnaminginfo());
    }

    // required uint64 sourcePortId = 3;
    if (has_sourceportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sourceportid());
    }

    // optional uint64 destinationPortId = 4;
    if (has_destinationportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destinationportid());
    }

    // required uint64 sourceAddress = 5;
    if (has_sourceaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sourceaddress());
    }

    // optional uint64 destinationAddress = 6;
    if (has_destinationaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destinationaddress());
    }

    // optional uint32 currentConnectionIdIndex = 8;
    if (has_currentconnectionidindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentconnectionidindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 state = 9;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional .rina.messages.qosSpecification_t qosParameters = 10;
    if (has_qosparameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qosparameters());
    }

    // optional .rina.messages.connectionPolicies_t connectionPolicies = 11;
    if (has_connectionpolicies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectionpolicies());
    }

    // optional bytes accessControl = 12;
    if (has_accesscontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->accesscontrol());
    }

    // optional uint32 maxCreateFlowRetries = 13;
    if (has_maxcreateflowretries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcreateflowretries());
    }

    // optional uint32 createFlowRetries = 14;
    if (has_createflowretries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createflowretries());
    }

    // optional uint32 hopCount = 15;
    if (has_hopcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hopcount());
    }

  }
  // repeated .rina.messages.connectionId_t connectionIds = 7;
  total_size += 1 * this->connectionids_size();
  for (int i = 0; i < this->connectionids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connectionids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Flow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Flow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Flow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Flow::MergeFrom(const Flow& from) {
  GOOGLE_CHECK_NE(&from, this);
  connectionids_.MergeFrom(from.connectionids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcenaminginfo()) {
      mutable_sourcenaminginfo()->::rina::messages::applicationProcessNamingInfo_t::MergeFrom(from.sourcenaminginfo());
    }
    if (from.has_destinationnaminginfo()) {
      mutable_destinationnaminginfo()->::rina::messages::applicationProcessNamingInfo_t::MergeFrom(from.destinationnaminginfo());
    }
    if (from.has_sourceportid()) {
      set_sourceportid(from.sourceportid());
    }
    if (from.has_destinationportid()) {
      set_destinationportid(from.destinationportid());
    }
    if (from.has_sourceaddress()) {
      set_sourceaddress(from.sourceaddress());
    }
    if (from.has_destinationaddress()) {
      set_destinationaddress(from.destinationaddress());
    }
    if (from.has_currentconnectionidindex()) {
      set_currentconnectionidindex(from.currentconnectionidindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_qosparameters()) {
      mutable_qosparameters()->::rina::messages::qosSpecification_t::MergeFrom(from.qosparameters());
    }
    if (from.has_connectionpolicies()) {
      mutable_connectionpolicies()->::rina::messages::connectionPolicies_t::MergeFrom(from.connectionpolicies());
    }
    if (from.has_accesscontrol()) {
      set_accesscontrol(from.accesscontrol());
    }
    if (from.has_maxcreateflowretries()) {
      set_maxcreateflowretries(from.maxcreateflowretries());
    }
    if (from.has_createflowretries()) {
      set_createflowretries(from.createflowretries());
    }
    if (from.has_hopcount()) {
      set_hopcount(from.hopcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Flow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Flow::CopyFrom(const Flow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_sourcenaminginfo()) {
    if (!this->sourcenaminginfo().IsInitialized()) return false;
  }
  if (has_destinationnaminginfo()) {
    if (!this->destinationnaminginfo().IsInitialized()) return false;
  }
  if (has_qosparameters()) {
    if (!this->qosparameters().IsInitialized()) return false;
  }
  if (has_connectionpolicies()) {
    if (!this->connectionpolicies().IsInitialized()) return false;
  }
  return true;
}

void Flow::Swap(Flow* other) {
  if (other != this) {
    std::swap(sourcenaminginfo_, other->sourcenaminginfo_);
    std::swap(destinationnaminginfo_, other->destinationnaminginfo_);
    std::swap(sourceportid_, other->sourceportid_);
    std::swap(destinationportid_, other->destinationportid_);
    std::swap(sourceaddress_, other->sourceaddress_);
    std::swap(destinationaddress_, other->destinationaddress_);
    connectionids_.Swap(&other->connectionids_);
    std::swap(currentconnectionidindex_, other->currentconnectionidindex_);
    std::swap(state_, other->state_);
    std::swap(qosparameters_, other->qosparameters_);
    std::swap(connectionpolicies_, other->connectionpolicies_);
    std::swap(accesscontrol_, other->accesscontrol_);
    std::swap(maxcreateflowretries_, other->maxcreateflowretries_);
    std::swap(createflowretries_, other->createflowretries_);
    std::swap(hopcount_, other->hopcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Flow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Flow_descriptor_;
  metadata.reflection = Flow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

// @@protoc_insertion_point(global_scope)
