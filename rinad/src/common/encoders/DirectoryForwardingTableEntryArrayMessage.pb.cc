// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DirectoryForwardingTableEntryArrayMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DirectoryForwardingTableEntryArrayMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* directoryForwardingTableEntrySet_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  directoryForwardingTableEntrySet_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DirectoryForwardingTableEntryArrayMessage_2eproto() {
  protobuf_AddDesc_DirectoryForwardingTableEntryArrayMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DirectoryForwardingTableEntryArrayMessage.proto");
  GOOGLE_CHECK(file != NULL);
  directoryForwardingTableEntrySet_t_descriptor_ = file->message_type(0);
  static const int directoryForwardingTableEntrySet_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(directoryForwardingTableEntrySet_t, directoryforwardingtableentry_),
  };
  directoryForwardingTableEntrySet_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      directoryForwardingTableEntrySet_t_descriptor_,
      directoryForwardingTableEntrySet_t::default_instance_,
      directoryForwardingTableEntrySet_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(directoryForwardingTableEntrySet_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(directoryForwardingTableEntrySet_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(directoryForwardingTableEntrySet_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DirectoryForwardingTableEntryArrayMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    directoryForwardingTableEntrySet_t_descriptor_, &directoryForwardingTableEntrySet_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DirectoryForwardingTableEntryArrayMessage_2eproto() {
  delete directoryForwardingTableEntrySet_t::default_instance_;
  delete directoryForwardingTableEntrySet_t_reflection_;
}

void protobuf_AddDesc_DirectoryForwardingTableEntryArrayMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rina::messages::protobuf_AddDesc_DirectoryForwardingTableEntryMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n/DirectoryForwardingTableEntryArrayMess"
    "age.proto\022\rrina.messages\032*DirectoryForwa"
    "rdingTableEntryMessage.proto\"{\n\"director"
    "yForwardingTableEntrySet_t\022U\n\035directoryF"
    "orwardingTableEntry\030\001 \003(\0132..rina.message"
    "s.directoryForwardingTableEntry_tB<\n:rin"
    "a.encoding.impl.googleprotobuf.directory"
    "forwardingtable", 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DirectoryForwardingTableEntryArrayMessage.proto", &protobuf_RegisterTypes);
  directoryForwardingTableEntrySet_t::default_instance_ = new directoryForwardingTableEntrySet_t();
  directoryForwardingTableEntrySet_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DirectoryForwardingTableEntryArrayMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DirectoryForwardingTableEntryArrayMessage_2eproto {
  StaticDescriptorInitializer_DirectoryForwardingTableEntryArrayMessage_2eproto() {
    protobuf_AddDesc_DirectoryForwardingTableEntryArrayMessage_2eproto();
  }
} static_descriptor_initializer_DirectoryForwardingTableEntryArrayMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int directoryForwardingTableEntrySet_t::kDirectoryForwardingTableEntryFieldNumber;
#endif  // !_MSC_VER

directoryForwardingTableEntrySet_t::directoryForwardingTableEntrySet_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void directoryForwardingTableEntrySet_t::InitAsDefaultInstance() {
}

directoryForwardingTableEntrySet_t::directoryForwardingTableEntrySet_t(const directoryForwardingTableEntrySet_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void directoryForwardingTableEntrySet_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

directoryForwardingTableEntrySet_t::~directoryForwardingTableEntrySet_t() {
  SharedDtor();
}

void directoryForwardingTableEntrySet_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void directoryForwardingTableEntrySet_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* directoryForwardingTableEntrySet_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return directoryForwardingTableEntrySet_t_descriptor_;
}

const directoryForwardingTableEntrySet_t& directoryForwardingTableEntrySet_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DirectoryForwardingTableEntryArrayMessage_2eproto();
  return *default_instance_;
}

directoryForwardingTableEntrySet_t* directoryForwardingTableEntrySet_t::default_instance_ = NULL;

directoryForwardingTableEntrySet_t* directoryForwardingTableEntrySet_t::New() const {
  return new directoryForwardingTableEntrySet_t;
}

void directoryForwardingTableEntrySet_t::Clear() {
  directoryforwardingtableentry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool directoryForwardingTableEntrySet_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rina.messages.directoryForwardingTableEntry_t directoryForwardingTableEntry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directoryForwardingTableEntry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_directoryforwardingtableentry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_directoryForwardingTableEntry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void directoryForwardingTableEntrySet_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rina.messages.directoryForwardingTableEntry_t directoryForwardingTableEntry = 1;
  for (int i = 0; i < this->directoryforwardingtableentry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->directoryforwardingtableentry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* directoryForwardingTableEntrySet_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rina.messages.directoryForwardingTableEntry_t directoryForwardingTableEntry = 1;
  for (int i = 0; i < this->directoryforwardingtableentry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->directoryforwardingtableentry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int directoryForwardingTableEntrySet_t::ByteSize() const {
  int total_size = 0;

  // repeated .rina.messages.directoryForwardingTableEntry_t directoryForwardingTableEntry = 1;
  total_size += 1 * this->directoryforwardingtableentry_size();
  for (int i = 0; i < this->directoryforwardingtableentry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->directoryforwardingtableentry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void directoryForwardingTableEntrySet_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const directoryForwardingTableEntrySet_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const directoryForwardingTableEntrySet_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void directoryForwardingTableEntrySet_t::MergeFrom(const directoryForwardingTableEntrySet_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  directoryforwardingtableentry_.MergeFrom(from.directoryforwardingtableentry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void directoryForwardingTableEntrySet_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void directoryForwardingTableEntrySet_t::CopyFrom(const directoryForwardingTableEntrySet_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool directoryForwardingTableEntrySet_t::IsInitialized() const {

  for (int i = 0; i < directoryforwardingtableentry_size(); i++) {
    if (!this->directoryforwardingtableentry(i).IsInitialized()) return false;
  }
  return true;
}

void directoryForwardingTableEntrySet_t::Swap(directoryForwardingTableEntrySet_t* other) {
  if (other != this) {
    directoryforwardingtableentry_.Swap(&other->directoryforwardingtableentry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata directoryForwardingTableEntrySet_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = directoryForwardingTableEntrySet_t_descriptor_;
  metadata.reflection = directoryForwardingTableEntrySet_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

// @@protoc_insertion_point(global_scope)
