// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlowServiceMessage.proto

#ifndef PROTOBUF_FlowServiceMessage_2eproto__INCLUDED
#define PROTOBUF_FlowServiceMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ApplicationProcessNamingInfoMessage.pb.h"
#include "QoSSpecification.pb.h"
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FlowServiceMessage_2eproto();
void protobuf_AssignDesc_FlowServiceMessage_2eproto();
void protobuf_ShutdownFile_FlowServiceMessage_2eproto();

class FlowService;

// ===================================================================

class FlowService : public ::google::protobuf::Message {
 public:
  FlowService();
  virtual ~FlowService();

  FlowService(const FlowService& from);

  inline FlowService& operator=(const FlowService& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowService& default_instance();

  void Swap(FlowService* other);

  // implements Message ----------------------------------------------

  FlowService* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlowService& from);
  void MergeFrom(const FlowService& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rina.messages.applicationProcessNamingInfo_t sourceNamingInfo = 1;
  inline bool has_sourcenaminginfo() const;
  inline void clear_sourcenaminginfo();
  static const int kSourceNamingInfoFieldNumber = 1;
  inline const ::rina::messages::applicationProcessNamingInfo_t& sourcenaminginfo() const;
  inline ::rina::messages::applicationProcessNamingInfo_t* mutable_sourcenaminginfo();
  inline ::rina::messages::applicationProcessNamingInfo_t* release_sourcenaminginfo();
  inline void set_allocated_sourcenaminginfo(::rina::messages::applicationProcessNamingInfo_t* sourcenaminginfo);

  // required .rina.messages.applicationProcessNamingInfo_t destinationNamingInfo = 2;
  inline bool has_destinationnaminginfo() const;
  inline void clear_destinationnaminginfo();
  static const int kDestinationNamingInfoFieldNumber = 2;
  inline const ::rina::messages::applicationProcessNamingInfo_t& destinationnaminginfo() const;
  inline ::rina::messages::applicationProcessNamingInfo_t* mutable_destinationnaminginfo();
  inline ::rina::messages::applicationProcessNamingInfo_t* release_destinationnaminginfo();
  inline void set_allocated_destinationnaminginfo(::rina::messages::applicationProcessNamingInfo_t* destinationnaminginfo);

  // optional .rina.messages.qosSpecification_t qosSpecification = 3;
  inline bool has_qosspecification() const;
  inline void clear_qosspecification();
  static const int kQosSpecificationFieldNumber = 3;
  inline const ::rina::messages::qosSpecification_t& qosspecification() const;
  inline ::rina::messages::qosSpecification_t* mutable_qosspecification();
  inline ::rina::messages::qosSpecification_t* release_qosspecification();
  inline void set_allocated_qosspecification(::rina::messages::qosSpecification_t* qosspecification);

  // optional uint64 portId = 4;
  inline bool has_portid() const;
  inline void clear_portid();
  static const int kPortIdFieldNumber = 4;
  inline ::google::protobuf::uint64 portid() const;
  inline void set_portid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rina.messages.FlowService)
 private:
  inline void set_has_sourcenaminginfo();
  inline void clear_has_sourcenaminginfo();
  inline void set_has_destinationnaminginfo();
  inline void clear_has_destinationnaminginfo();
  inline void set_has_qosspecification();
  inline void clear_has_qosspecification();
  inline void set_has_portid();
  inline void clear_has_portid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rina::messages::applicationProcessNamingInfo_t* sourcenaminginfo_;
  ::rina::messages::applicationProcessNamingInfo_t* destinationnaminginfo_;
  ::rina::messages::qosSpecification_t* qosspecification_;
  ::google::protobuf::uint64 portid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FlowServiceMessage_2eproto();
  friend void protobuf_AssignDesc_FlowServiceMessage_2eproto();
  friend void protobuf_ShutdownFile_FlowServiceMessage_2eproto();

  void InitAsDefaultInstance();
  static FlowService* default_instance_;
};
// ===================================================================


// ===================================================================

// FlowService

// optional .rina.messages.applicationProcessNamingInfo_t sourceNamingInfo = 1;
inline bool FlowService::has_sourcenaminginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlowService::set_has_sourcenaminginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlowService::clear_has_sourcenaminginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlowService::clear_sourcenaminginfo() {
  if (sourcenaminginfo_ != NULL) sourcenaminginfo_->::rina::messages::applicationProcessNamingInfo_t::Clear();
  clear_has_sourcenaminginfo();
}
inline const ::rina::messages::applicationProcessNamingInfo_t& FlowService::sourcenaminginfo() const {
  return sourcenaminginfo_ != NULL ? *sourcenaminginfo_ : *default_instance_->sourcenaminginfo_;
}
inline ::rina::messages::applicationProcessNamingInfo_t* FlowService::mutable_sourcenaminginfo() {
  set_has_sourcenaminginfo();
  if (sourcenaminginfo_ == NULL) sourcenaminginfo_ = new ::rina::messages::applicationProcessNamingInfo_t;
  return sourcenaminginfo_;
}
inline ::rina::messages::applicationProcessNamingInfo_t* FlowService::release_sourcenaminginfo() {
  clear_has_sourcenaminginfo();
  ::rina::messages::applicationProcessNamingInfo_t* temp = sourcenaminginfo_;
  sourcenaminginfo_ = NULL;
  return temp;
}
inline void FlowService::set_allocated_sourcenaminginfo(::rina::messages::applicationProcessNamingInfo_t* sourcenaminginfo) {
  delete sourcenaminginfo_;
  sourcenaminginfo_ = sourcenaminginfo;
  if (sourcenaminginfo) {
    set_has_sourcenaminginfo();
  } else {
    clear_has_sourcenaminginfo();
  }
}

// required .rina.messages.applicationProcessNamingInfo_t destinationNamingInfo = 2;
inline bool FlowService::has_destinationnaminginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlowService::set_has_destinationnaminginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlowService::clear_has_destinationnaminginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlowService::clear_destinationnaminginfo() {
  if (destinationnaminginfo_ != NULL) destinationnaminginfo_->::rina::messages::applicationProcessNamingInfo_t::Clear();
  clear_has_destinationnaminginfo();
}
inline const ::rina::messages::applicationProcessNamingInfo_t& FlowService::destinationnaminginfo() const {
  return destinationnaminginfo_ != NULL ? *destinationnaminginfo_ : *default_instance_->destinationnaminginfo_;
}
inline ::rina::messages::applicationProcessNamingInfo_t* FlowService::mutable_destinationnaminginfo() {
  set_has_destinationnaminginfo();
  if (destinationnaminginfo_ == NULL) destinationnaminginfo_ = new ::rina::messages::applicationProcessNamingInfo_t;
  return destinationnaminginfo_;
}
inline ::rina::messages::applicationProcessNamingInfo_t* FlowService::release_destinationnaminginfo() {
  clear_has_destinationnaminginfo();
  ::rina::messages::applicationProcessNamingInfo_t* temp = destinationnaminginfo_;
  destinationnaminginfo_ = NULL;
  return temp;
}
inline void FlowService::set_allocated_destinationnaminginfo(::rina::messages::applicationProcessNamingInfo_t* destinationnaminginfo) {
  delete destinationnaminginfo_;
  destinationnaminginfo_ = destinationnaminginfo;
  if (destinationnaminginfo) {
    set_has_destinationnaminginfo();
  } else {
    clear_has_destinationnaminginfo();
  }
}

// optional .rina.messages.qosSpecification_t qosSpecification = 3;
inline bool FlowService::has_qosspecification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlowService::set_has_qosspecification() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlowService::clear_has_qosspecification() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlowService::clear_qosspecification() {
  if (qosspecification_ != NULL) qosspecification_->::rina::messages::qosSpecification_t::Clear();
  clear_has_qosspecification();
}
inline const ::rina::messages::qosSpecification_t& FlowService::qosspecification() const {
  return qosspecification_ != NULL ? *qosspecification_ : *default_instance_->qosspecification_;
}
inline ::rina::messages::qosSpecification_t* FlowService::mutable_qosspecification() {
  set_has_qosspecification();
  if (qosspecification_ == NULL) qosspecification_ = new ::rina::messages::qosSpecification_t;
  return qosspecification_;
}
inline ::rina::messages::qosSpecification_t* FlowService::release_qosspecification() {
  clear_has_qosspecification();
  ::rina::messages::qosSpecification_t* temp = qosspecification_;
  qosspecification_ = NULL;
  return temp;
}
inline void FlowService::set_allocated_qosspecification(::rina::messages::qosSpecification_t* qosspecification) {
  delete qosspecification_;
  qosspecification_ = qosspecification;
  if (qosspecification) {
    set_has_qosspecification();
  } else {
    clear_has_qosspecification();
  }
}

// optional uint64 portId = 4;
inline bool FlowService::has_portid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlowService::set_has_portid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlowService::clear_has_portid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlowService::clear_portid() {
  portid_ = GOOGLE_ULONGLONG(0);
  clear_has_portid();
}
inline ::google::protobuf::uint64 FlowService::portid() const {
  return portid_;
}
inline void FlowService::set_portid(::google::protobuf::uint64 value) {
  set_has_portid();
  portid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FlowServiceMessage_2eproto__INCLUDED
