// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EFCPPolicyMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EFCPPolicyMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* efcpPolicy_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  efcpPolicy_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EFCPPolicyMessage_2eproto() {
  protobuf_AddDesc_EFCPPolicyMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EFCPPolicyMessage.proto");
  GOOGLE_CHECK(file != NULL);
  efcpPolicy_t_descriptor_ = file->message_type(0);
  static const int efcpPolicy_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(efcpPolicy_t, qosid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(efcpPolicy_t, policydescriptor_),
  };
  efcpPolicy_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      efcpPolicy_t_descriptor_,
      efcpPolicy_t::default_instance_,
      efcpPolicy_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(efcpPolicy_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(efcpPolicy_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(efcpPolicy_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EFCPPolicyMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    efcpPolicy_t_descriptor_, &efcpPolicy_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EFCPPolicyMessage_2eproto() {
  delete efcpPolicy_t::default_instance_;
  delete efcpPolicy_t_reflection_;
}

void protobuf_AddDesc_EFCPPolicyMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rina::messages::protobuf_AddDesc_PolicyDescriptorMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027EFCPPolicyMessage.proto\022\rrina.messages"
    "\032\035PolicyDescriptorMessage.proto\"Z\n\014efcpP"
    "olicy_t\022\r\n\005qosId\030\001 \001(\014\022;\n\020policyDescript"
    "or\030\002 \001(\0132!.rina.messages.policyDescripto"
    "r_tB*\n(rina.encoding.impl.googleprotobuf"
    ".policy", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EFCPPolicyMessage.proto", &protobuf_RegisterTypes);
  efcpPolicy_t::default_instance_ = new efcpPolicy_t();
  efcpPolicy_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EFCPPolicyMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EFCPPolicyMessage_2eproto {
  StaticDescriptorInitializer_EFCPPolicyMessage_2eproto() {
    protobuf_AddDesc_EFCPPolicyMessage_2eproto();
  }
} static_descriptor_initializer_EFCPPolicyMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int efcpPolicy_t::kQosIdFieldNumber;
const int efcpPolicy_t::kPolicyDescriptorFieldNumber;
#endif  // !_MSC_VER

efcpPolicy_t::efcpPolicy_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void efcpPolicy_t::InitAsDefaultInstance() {
  policydescriptor_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
}

efcpPolicy_t::efcpPolicy_t(const efcpPolicy_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void efcpPolicy_t::SharedCtor() {
  _cached_size_ = 0;
  qosid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  policydescriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

efcpPolicy_t::~efcpPolicy_t() {
  SharedDtor();
}

void efcpPolicy_t::SharedDtor() {
  if (qosid_ != &::google::protobuf::internal::kEmptyString) {
    delete qosid_;
  }
  if (this != default_instance_) {
    delete policydescriptor_;
  }
}

void efcpPolicy_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* efcpPolicy_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return efcpPolicy_t_descriptor_;
}

const efcpPolicy_t& efcpPolicy_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EFCPPolicyMessage_2eproto();
  return *default_instance_;
}

efcpPolicy_t* efcpPolicy_t::default_instance_ = NULL;

efcpPolicy_t* efcpPolicy_t::New() const {
  return new efcpPolicy_t;
}

void efcpPolicy_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_qosid()) {
      if (qosid_ != &::google::protobuf::internal::kEmptyString) {
        qosid_->clear();
      }
    }
    if (has_policydescriptor()) {
      if (policydescriptor_ != NULL) policydescriptor_->::rina::messages::policyDescriptor_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool efcpPolicy_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes qosId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qosid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_policyDescriptor;
        break;
      }

      // optional .rina.messages.policyDescriptor_t policyDescriptor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_policyDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policydescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void efcpPolicy_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes qosId = 1;
  if (has_qosid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->qosid(), output);
  }

  // optional .rina.messages.policyDescriptor_t policyDescriptor = 2;
  if (has_policydescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->policydescriptor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* efcpPolicy_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes qosId = 1;
  if (has_qosid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->qosid(), target);
  }

  // optional .rina.messages.policyDescriptor_t policyDescriptor = 2;
  if (has_policydescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->policydescriptor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int efcpPolicy_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes qosId = 1;
    if (has_qosid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qosid());
    }

    // optional .rina.messages.policyDescriptor_t policyDescriptor = 2;
    if (has_policydescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->policydescriptor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void efcpPolicy_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const efcpPolicy_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const efcpPolicy_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void efcpPolicy_t::MergeFrom(const efcpPolicy_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qosid()) {
      set_qosid(from.qosid());
    }
    if (from.has_policydescriptor()) {
      mutable_policydescriptor()->::rina::messages::policyDescriptor_t::MergeFrom(from.policydescriptor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void efcpPolicy_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void efcpPolicy_t::CopyFrom(const efcpPolicy_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool efcpPolicy_t::IsInitialized() const {

  if (has_policydescriptor()) {
    if (!this->policydescriptor().IsInitialized()) return false;
  }
  return true;
}

void efcpPolicy_t::Swap(efcpPolicy_t* other) {
  if (other != this) {
    std::swap(qosid_, other->qosid_);
    std::swap(policydescriptor_, other->policydescriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata efcpPolicy_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = efcpPolicy_t_descriptor_;
  metadata.reflection = efcpPolicy_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

// @@protoc_insertion_point(global_scope)
