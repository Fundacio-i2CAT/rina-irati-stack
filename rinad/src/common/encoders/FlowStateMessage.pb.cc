// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlowStateMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FlowStateMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* flowStateObject_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flowStateObject_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FlowStateMessage_2eproto() {
  protobuf_AddDesc_FlowStateMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FlowStateMessage.proto");
  GOOGLE_CHECK(file != NULL);
  flowStateObject_t_descriptor_ = file->message_type(0);
  static const int flowStateObject_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flowStateObject_t, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flowStateObject_t, portid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flowStateObject_t, neighbor_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flowStateObject_t, neighbor_portid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flowStateObject_t, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flowStateObject_t, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flowStateObject_t, age_),
  };
  flowStateObject_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flowStateObject_t_descriptor_,
      flowStateObject_t::default_instance_,
      flowStateObject_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flowStateObject_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flowStateObject_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flowStateObject_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FlowStateMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flowStateObject_t_descriptor_, &flowStateObject_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FlowStateMessage_2eproto() {
  delete flowStateObject_t::default_instance_;
  delete flowStateObject_t_reflection_;
}

void protobuf_AddDesc_FlowStateMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026FlowStateMessage.proto\022\rrina.messages\""
    "\234\001\n\021flowStateObject_t\022\017\n\007address\030\001 \001(\004\022\016"
    "\n\006portid\030\002 \001(\r\022\030\n\020neighbor_address\030\003 \001(\004"
    "\022\027\n\017neighbor_portid\030\004 \001(\r\022\r\n\005state\030\005 \001(\010"
    "\022\027\n\017sequence_number\030\006 \001(\r\022\013\n\003age\030\007 \001(\rB-"
    "\n+rina.encoding.impl.googleprotobuf.flow"
    "state", 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FlowStateMessage.proto", &protobuf_RegisterTypes);
  flowStateObject_t::default_instance_ = new flowStateObject_t();
  flowStateObject_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FlowStateMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FlowStateMessage_2eproto {
  StaticDescriptorInitializer_FlowStateMessage_2eproto() {
    protobuf_AddDesc_FlowStateMessage_2eproto();
  }
} static_descriptor_initializer_FlowStateMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int flowStateObject_t::kAddressFieldNumber;
const int flowStateObject_t::kPortidFieldNumber;
const int flowStateObject_t::kNeighborAddressFieldNumber;
const int flowStateObject_t::kNeighborPortidFieldNumber;
const int flowStateObject_t::kStateFieldNumber;
const int flowStateObject_t::kSequenceNumberFieldNumber;
const int flowStateObject_t::kAgeFieldNumber;
#endif  // !_MSC_VER

flowStateObject_t::flowStateObject_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flowStateObject_t::InitAsDefaultInstance() {
}

flowStateObject_t::flowStateObject_t(const flowStateObject_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flowStateObject_t::SharedCtor() {
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  portid_ = 0u;
  neighbor_address_ = GOOGLE_ULONGLONG(0);
  neighbor_portid_ = 0u;
  state_ = false;
  sequence_number_ = 0u;
  age_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flowStateObject_t::~flowStateObject_t() {
  SharedDtor();
}

void flowStateObject_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flowStateObject_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flowStateObject_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flowStateObject_t_descriptor_;
}

const flowStateObject_t& flowStateObject_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FlowStateMessage_2eproto();
  return *default_instance_;
}

flowStateObject_t* flowStateObject_t::default_instance_ = NULL;

flowStateObject_t* flowStateObject_t::New() const {
  return new flowStateObject_t;
}

void flowStateObject_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    address_ = GOOGLE_ULONGLONG(0);
    portid_ = 0u;
    neighbor_address_ = GOOGLE_ULONGLONG(0);
    neighbor_portid_ = 0u;
    state_ = false;
    sequence_number_ = 0u;
    age_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flowStateObject_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_portid;
        break;
      }

      // optional uint32 portid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portid_)));
          set_has_portid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_neighbor_address;
        break;
      }

      // optional uint64 neighbor_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_neighbor_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &neighbor_address_)));
          set_has_neighbor_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_neighbor_portid;
        break;
      }

      // optional uint32 neighbor_portid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_neighbor_portid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neighbor_portid_)));
          set_has_neighbor_portid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional bool state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sequence_number;
        break;
      }

      // optional uint32 sequence_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_age;
        break;
      }

      // optional uint32 age = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flowStateObject_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }

  // optional uint32 portid = 2;
  if (has_portid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->portid(), output);
  }

  // optional uint64 neighbor_address = 3;
  if (has_neighbor_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->neighbor_address(), output);
  }

  // optional uint32 neighbor_portid = 4;
  if (has_neighbor_portid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->neighbor_portid(), output);
  }

  // optional bool state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->state(), output);
  }

  // optional uint32 sequence_number = 6;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sequence_number(), output);
  }

  // optional uint32 age = 7;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->age(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flowStateObject_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }

  // optional uint32 portid = 2;
  if (has_portid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->portid(), target);
  }

  // optional uint64 neighbor_address = 3;
  if (has_neighbor_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->neighbor_address(), target);
  }

  // optional uint32 neighbor_portid = 4;
  if (has_neighbor_portid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->neighbor_portid(), target);
  }

  // optional bool state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->state(), target);
  }

  // optional uint32 sequence_number = 6;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sequence_number(), target);
  }

  // optional uint32 age = 7;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->age(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flowStateObject_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }

    // optional uint32 portid = 2;
    if (has_portid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portid());
    }

    // optional uint64 neighbor_address = 3;
    if (has_neighbor_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->neighbor_address());
    }

    // optional uint32 neighbor_portid = 4;
    if (has_neighbor_portid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neighbor_portid());
    }

    // optional bool state = 5;
    if (has_state()) {
      total_size += 1 + 1;
    }

    // optional uint32 sequence_number = 6;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_number());
    }

    // optional uint32 age = 7;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flowStateObject_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flowStateObject_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flowStateObject_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flowStateObject_t::MergeFrom(const flowStateObject_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_portid()) {
      set_portid(from.portid());
    }
    if (from.has_neighbor_address()) {
      set_neighbor_address(from.neighbor_address());
    }
    if (from.has_neighbor_portid()) {
      set_neighbor_portid(from.neighbor_portid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flowStateObject_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flowStateObject_t::CopyFrom(const flowStateObject_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flowStateObject_t::IsInitialized() const {

  return true;
}

void flowStateObject_t::Swap(flowStateObject_t* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(portid_, other->portid_);
    std::swap(neighbor_address_, other->neighbor_address_);
    std::swap(neighbor_portid_, other->neighbor_portid_);
    std::swap(state_, other->state_);
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(age_, other->age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flowStateObject_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flowStateObject_t_descriptor_;
  metadata.reflection = flowStateObject_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

// @@protoc_insertion_point(global_scope)
