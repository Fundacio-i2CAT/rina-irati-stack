// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QoSSpecification.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QoSSpecification.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* qosSpecification_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qosSpecification_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_QoSSpecification_2eproto() {
  protobuf_AddDesc_QoSSpecification_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QoSSpecification.proto");
  GOOGLE_CHECK(file != NULL);
  qosSpecification_t_descriptor_ = file->message_type(0);
  static const int qosSpecification_t_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, qosid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, averagebandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, averagesdubandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, peakbandwidthduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, peaksdubandwidthduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, undetectedbiterrorrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, partialdelivery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, maxallowablegapsdu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, jitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, extraparameters_),
  };
  qosSpecification_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qosSpecification_t_descriptor_,
      qosSpecification_t::default_instance_,
      qosSpecification_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qosSpecification_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qosSpecification_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QoSSpecification_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qosSpecification_t_descriptor_, &qosSpecification_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QoSSpecification_2eproto() {
  delete qosSpecification_t::default_instance_;
  delete qosSpecification_t_reflection_;
}

void protobuf_AddDesc_QoSSpecification_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rina::messages::protobuf_AddDesc_CommonMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026QoSSpecification.proto\022\rrina.messages\032"
    "\024CommonMessages.proto\"\340\002\n\022qosSpecificati"
    "on_t\022\014\n\004name\030\001 \001(\t\022\r\n\005qosid\030\002 \001(\r\022\030\n\020ave"
    "rageBandwidth\030\003 \001(\004\022\033\n\023averageSDUBandwid"
    "th\030\004 \001(\004\022\035\n\025peakBandwidthDuration\030\005 \001(\r\022"
    " \n\030peakSDUBandwidthDuration\030\006 \001(\r\022\036\n\026und"
    "etectedBitErrorRate\030\007 \001(\001\022\027\n\017partialDeli"
    "very\030\010 \001(\010\022\r\n\005order\030\t \001(\010\022\032\n\022maxAllowabl"
    "eGapSdu\030\n \001(\005\022\r\n\005delay\030\013 \001(\r\022\016\n\006jitter\030\014"
    " \001(\r\0222\n\017extraParameters\030\r \003(\0132\031.rina.mes"
    "sages.property_tB4\n2rina.encoding.impl.g"
    "oogleprotobuf.qosspecification", 470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QoSSpecification.proto", &protobuf_RegisterTypes);
  qosSpecification_t::default_instance_ = new qosSpecification_t();
  qosSpecification_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QoSSpecification_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QoSSpecification_2eproto {
  StaticDescriptorInitializer_QoSSpecification_2eproto() {
    protobuf_AddDesc_QoSSpecification_2eproto();
  }
} static_descriptor_initializer_QoSSpecification_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int qosSpecification_t::kNameFieldNumber;
const int qosSpecification_t::kQosidFieldNumber;
const int qosSpecification_t::kAverageBandwidthFieldNumber;
const int qosSpecification_t::kAverageSDUBandwidthFieldNumber;
const int qosSpecification_t::kPeakBandwidthDurationFieldNumber;
const int qosSpecification_t::kPeakSDUBandwidthDurationFieldNumber;
const int qosSpecification_t::kUndetectedBitErrorRateFieldNumber;
const int qosSpecification_t::kPartialDeliveryFieldNumber;
const int qosSpecification_t::kOrderFieldNumber;
const int qosSpecification_t::kMaxAllowableGapSduFieldNumber;
const int qosSpecification_t::kDelayFieldNumber;
const int qosSpecification_t::kJitterFieldNumber;
const int qosSpecification_t::kExtraParametersFieldNumber;
#endif  // !_MSC_VER

qosSpecification_t::qosSpecification_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qosSpecification_t::InitAsDefaultInstance() {
}

qosSpecification_t::qosSpecification_t(const qosSpecification_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qosSpecification_t::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qosid_ = 0u;
  averagebandwidth_ = GOOGLE_ULONGLONG(0);
  averagesdubandwidth_ = GOOGLE_ULONGLONG(0);
  peakbandwidthduration_ = 0u;
  peaksdubandwidthduration_ = 0u;
  undetectedbiterrorrate_ = 0;
  partialdelivery_ = false;
  order_ = false;
  maxallowablegapsdu_ = 0;
  delay_ = 0u;
  jitter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qosSpecification_t::~qosSpecification_t() {
  SharedDtor();
}

void qosSpecification_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void qosSpecification_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qosSpecification_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qosSpecification_t_descriptor_;
}

const qosSpecification_t& qosSpecification_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QoSSpecification_2eproto();
  return *default_instance_;
}

qosSpecification_t* qosSpecification_t::default_instance_ = NULL;

qosSpecification_t* qosSpecification_t::New() const {
  return new qosSpecification_t;
}

void qosSpecification_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    qosid_ = 0u;
    averagebandwidth_ = GOOGLE_ULONGLONG(0);
    averagesdubandwidth_ = GOOGLE_ULONGLONG(0);
    peakbandwidthduration_ = 0u;
    peaksdubandwidthduration_ = 0u;
    undetectedbiterrorrate_ = 0;
    partialdelivery_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    order_ = false;
    maxallowablegapsdu_ = 0;
    delay_ = 0u;
    jitter_ = 0u;
  }
  extraparameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qosSpecification_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qosid;
        break;
      }

      // optional uint32 qosid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qosid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qosid_)));
          set_has_qosid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_averageBandwidth;
        break;
      }

      // optional uint64 averageBandwidth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_averageBandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &averagebandwidth_)));
          set_has_averagebandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_averageSDUBandwidth;
        break;
      }

      // optional uint64 averageSDUBandwidth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_averageSDUBandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &averagesdubandwidth_)));
          set_has_averagesdubandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_peakBandwidthDuration;
        break;
      }

      // optional uint32 peakBandwidthDuration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peakBandwidthDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peakbandwidthduration_)));
          set_has_peakbandwidthduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_peakSDUBandwidthDuration;
        break;
      }

      // optional uint32 peakSDUBandwidthDuration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peakSDUBandwidthDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peaksdubandwidthduration_)));
          set_has_peaksdubandwidthduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_undetectedBitErrorRate;
        break;
      }

      // optional double undetectedBitErrorRate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_undetectedBitErrorRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &undetectedbiterrorrate_)));
          set_has_undetectedbiterrorrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_partialDelivery;
        break;
      }

      // optional bool partialDelivery = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partialDelivery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &partialdelivery_)));
          set_has_partialdelivery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_order;
        break;
      }

      // optional bool order = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_maxAllowableGapSdu;
        break;
      }

      // optional int32 maxAllowableGapSdu = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxAllowableGapSdu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxallowablegapsdu_)));
          set_has_maxallowablegapsdu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_jitter;
        break;
      }

      // optional uint32 jitter = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_)));
          set_has_jitter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_extraParameters;
        break;
      }

      // repeated .rina.messages.property_t extraParameters = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraParameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extraparameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_extraParameters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qosSpecification_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 qosid = 2;
  if (has_qosid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qosid(), output);
  }

  // optional uint64 averageBandwidth = 3;
  if (has_averagebandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->averagebandwidth(), output);
  }

  // optional uint64 averageSDUBandwidth = 4;
  if (has_averagesdubandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->averagesdubandwidth(), output);
  }

  // optional uint32 peakBandwidthDuration = 5;
  if (has_peakbandwidthduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->peakbandwidthduration(), output);
  }

  // optional uint32 peakSDUBandwidthDuration = 6;
  if (has_peaksdubandwidthduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->peaksdubandwidthduration(), output);
  }

  // optional double undetectedBitErrorRate = 7;
  if (has_undetectedbiterrorrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->undetectedbiterrorrate(), output);
  }

  // optional bool partialDelivery = 8;
  if (has_partialdelivery()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->partialdelivery(), output);
  }

  // optional bool order = 9;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->order(), output);
  }

  // optional int32 maxAllowableGapSdu = 10;
  if (has_maxallowablegapsdu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxallowablegapsdu(), output);
  }

  // optional uint32 delay = 11;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->delay(), output);
  }

  // optional uint32 jitter = 12;
  if (has_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->jitter(), output);
  }

  // repeated .rina.messages.property_t extraParameters = 13;
  for (int i = 0; i < this->extraparameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->extraparameters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qosSpecification_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 qosid = 2;
  if (has_qosid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qosid(), target);
  }

  // optional uint64 averageBandwidth = 3;
  if (has_averagebandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->averagebandwidth(), target);
  }

  // optional uint64 averageSDUBandwidth = 4;
  if (has_averagesdubandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->averagesdubandwidth(), target);
  }

  // optional uint32 peakBandwidthDuration = 5;
  if (has_peakbandwidthduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->peakbandwidthduration(), target);
  }

  // optional uint32 peakSDUBandwidthDuration = 6;
  if (has_peaksdubandwidthduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->peaksdubandwidthduration(), target);
  }

  // optional double undetectedBitErrorRate = 7;
  if (has_undetectedbiterrorrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->undetectedbiterrorrate(), target);
  }

  // optional bool partialDelivery = 8;
  if (has_partialdelivery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->partialdelivery(), target);
  }

  // optional bool order = 9;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->order(), target);
  }

  // optional int32 maxAllowableGapSdu = 10;
  if (has_maxallowablegapsdu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxallowablegapsdu(), target);
  }

  // optional uint32 delay = 11;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->delay(), target);
  }

  // optional uint32 jitter = 12;
  if (has_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->jitter(), target);
  }

  // repeated .rina.messages.property_t extraParameters = 13;
  for (int i = 0; i < this->extraparameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->extraparameters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qosSpecification_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 qosid = 2;
    if (has_qosid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qosid());
    }

    // optional uint64 averageBandwidth = 3;
    if (has_averagebandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->averagebandwidth());
    }

    // optional uint64 averageSDUBandwidth = 4;
    if (has_averagesdubandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->averagesdubandwidth());
    }

    // optional uint32 peakBandwidthDuration = 5;
    if (has_peakbandwidthduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peakbandwidthduration());
    }

    // optional uint32 peakSDUBandwidthDuration = 6;
    if (has_peaksdubandwidthduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peaksdubandwidthduration());
    }

    // optional double undetectedBitErrorRate = 7;
    if (has_undetectedbiterrorrate()) {
      total_size += 1 + 8;
    }

    // optional bool partialDelivery = 8;
    if (has_partialdelivery()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool order = 9;
    if (has_order()) {
      total_size += 1 + 1;
    }

    // optional int32 maxAllowableGapSdu = 10;
    if (has_maxallowablegapsdu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxallowablegapsdu());
    }

    // optional uint32 delay = 11;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 jitter = 12;
    if (has_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter());
    }

  }
  // repeated .rina.messages.property_t extraParameters = 13;
  total_size += 1 * this->extraparameters_size();
  for (int i = 0; i < this->extraparameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extraparameters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qosSpecification_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qosSpecification_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qosSpecification_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qosSpecification_t::MergeFrom(const qosSpecification_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  extraparameters_.MergeFrom(from.extraparameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_qosid()) {
      set_qosid(from.qosid());
    }
    if (from.has_averagebandwidth()) {
      set_averagebandwidth(from.averagebandwidth());
    }
    if (from.has_averagesdubandwidth()) {
      set_averagesdubandwidth(from.averagesdubandwidth());
    }
    if (from.has_peakbandwidthduration()) {
      set_peakbandwidthduration(from.peakbandwidthduration());
    }
    if (from.has_peaksdubandwidthduration()) {
      set_peaksdubandwidthduration(from.peaksdubandwidthduration());
    }
    if (from.has_undetectedbiterrorrate()) {
      set_undetectedbiterrorrate(from.undetectedbiterrorrate());
    }
    if (from.has_partialdelivery()) {
      set_partialdelivery(from.partialdelivery());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_maxallowablegapsdu()) {
      set_maxallowablegapsdu(from.maxallowablegapsdu());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_jitter()) {
      set_jitter(from.jitter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qosSpecification_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qosSpecification_t::CopyFrom(const qosSpecification_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qosSpecification_t::IsInitialized() const {

  for (int i = 0; i < extraparameters_size(); i++) {
    if (!this->extraparameters(i).IsInitialized()) return false;
  }
  return true;
}

void qosSpecification_t::Swap(qosSpecification_t* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(qosid_, other->qosid_);
    std::swap(averagebandwidth_, other->averagebandwidth_);
    std::swap(averagesdubandwidth_, other->averagesdubandwidth_);
    std::swap(peakbandwidthduration_, other->peakbandwidthduration_);
    std::swap(peaksdubandwidthduration_, other->peaksdubandwidthduration_);
    std::swap(undetectedbiterrorrate_, other->undetectedbiterrorrate_);
    std::swap(partialdelivery_, other->partialdelivery_);
    std::swap(order_, other->order_);
    std::swap(maxallowablegapsdu_, other->maxallowablegapsdu_);
    std::swap(delay_, other->delay_);
    std::swap(jitter_, other->jitter_);
    extraparameters_.Swap(&other->extraparameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qosSpecification_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qosSpecification_t_descriptor_;
  metadata.reflection = qosSpecification_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

// @@protoc_insertion_point(global_scope)
