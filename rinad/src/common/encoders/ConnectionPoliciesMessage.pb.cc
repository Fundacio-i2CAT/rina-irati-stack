// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConnectionPoliciesMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConnectionPoliciesMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* dtcpWindowBasedFlowControlConfig_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dtcpWindowBasedFlowControlConfig_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* dtcpRateBasedFlowControlConfig_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dtcpRateBasedFlowControlConfig_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* dtcpFlowControlConfig_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dtcpFlowControlConfig_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* dtcpRtxControlConfig_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dtcpRtxControlConfig_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* dtcpConfig_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dtcpConfig_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* connectionPolicies_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connectionPolicies_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConnectionPoliciesMessage_2eproto() {
  protobuf_AddDesc_ConnectionPoliciesMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConnectionPoliciesMessage.proto");
  GOOGLE_CHECK(file != NULL);
  dtcpWindowBasedFlowControlConfig_t_descriptor_ = file->message_type(0);
  static const int dtcpWindowBasedFlowControlConfig_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpWindowBasedFlowControlConfig_t, maxclosedwindowqueuelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpWindowBasedFlowControlConfig_t, initialcredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpWindowBasedFlowControlConfig_t, rcvrflowcontrolpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpWindowBasedFlowControlConfig_t, txcontrolpolicy_),
  };
  dtcpWindowBasedFlowControlConfig_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dtcpWindowBasedFlowControlConfig_t_descriptor_,
      dtcpWindowBasedFlowControlConfig_t::default_instance_,
      dtcpWindowBasedFlowControlConfig_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpWindowBasedFlowControlConfig_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpWindowBasedFlowControlConfig_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dtcpWindowBasedFlowControlConfig_t));
  dtcpRateBasedFlowControlConfig_t_descriptor_ = file->message_type(1);
  static const int dtcpRateBasedFlowControlConfig_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRateBasedFlowControlConfig_t, sendingrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRateBasedFlowControlConfig_t, timeperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRateBasedFlowControlConfig_t, norateslowdownpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRateBasedFlowControlConfig_t, nooverridedefaultpeakpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRateBasedFlowControlConfig_t, ratereductionpolicy_),
  };
  dtcpRateBasedFlowControlConfig_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dtcpRateBasedFlowControlConfig_t_descriptor_,
      dtcpRateBasedFlowControlConfig_t::default_instance_,
      dtcpRateBasedFlowControlConfig_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRateBasedFlowControlConfig_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRateBasedFlowControlConfig_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dtcpRateBasedFlowControlConfig_t));
  dtcpFlowControlConfig_t_descriptor_ = file->message_type(2);
  static const int dtcpFlowControlConfig_t_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, windowbased_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, windowbasedconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, ratebased_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, ratebasedconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, sentbytesthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, sentbytespercentthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, sentbuffersthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, rcvbytesthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, rcvbytespercentthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, rcvbuffersthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, closedwindowpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, flowcontroloverrunpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, reconcileflowcontrolpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, receivingflowcontrolpolicy_),
  };
  dtcpFlowControlConfig_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dtcpFlowControlConfig_t_descriptor_,
      dtcpFlowControlConfig_t::default_instance_,
      dtcpFlowControlConfig_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpFlowControlConfig_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dtcpFlowControlConfig_t));
  dtcpRtxControlConfig_t_descriptor_ = file->message_type(3);
  static const int dtcpRtxControlConfig_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRtxControlConfig_t, datarxmsnmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRtxControlConfig_t, rtxtimerexpirypolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRtxControlConfig_t, senderackpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRtxControlConfig_t, recvingacklistpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRtxControlConfig_t, rcvrackpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRtxControlConfig_t, sendingackpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRtxControlConfig_t, rcvrcontrolackpolicy_),
  };
  dtcpRtxControlConfig_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dtcpRtxControlConfig_t_descriptor_,
      dtcpRtxControlConfig_t::default_instance_,
      dtcpRtxControlConfig_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRtxControlConfig_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpRtxControlConfig_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dtcpRtxControlConfig_t));
  dtcpConfig_t_descriptor_ = file->message_type(4);
  static const int dtcpConfig_t_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, flowcontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, flowcontrolconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, rtxcontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, rtxcontrolconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, initialsenderinactivitytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, initialrecvrinactivitytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, rcvrtimerinactivitypolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, sendertimerinactiviypolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, lostcontrolpdupolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, rttestimatorpolicy_),
  };
  dtcpConfig_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dtcpConfig_t_descriptor_,
      dtcpConfig_t::default_instance_,
      dtcpConfig_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dtcpConfig_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dtcpConfig_t));
  connectionPolicies_t_descriptor_ = file->message_type(5);
  static const int connectionPolicies_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionPolicies_t, dtcppresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionPolicies_t, dtcpconfiguration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionPolicies_t, initialseqnumpolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionPolicies_t, seqnumrolloverthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionPolicies_t, initialatimer_),
  };
  connectionPolicies_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      connectionPolicies_t_descriptor_,
      connectionPolicies_t::default_instance_,
      connectionPolicies_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionPolicies_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionPolicies_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(connectionPolicies_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConnectionPoliciesMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dtcpWindowBasedFlowControlConfig_t_descriptor_, &dtcpWindowBasedFlowControlConfig_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dtcpRateBasedFlowControlConfig_t_descriptor_, &dtcpRateBasedFlowControlConfig_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dtcpFlowControlConfig_t_descriptor_, &dtcpFlowControlConfig_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dtcpRtxControlConfig_t_descriptor_, &dtcpRtxControlConfig_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dtcpConfig_t_descriptor_, &dtcpConfig_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    connectionPolicies_t_descriptor_, &connectionPolicies_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConnectionPoliciesMessage_2eproto() {
  delete dtcpWindowBasedFlowControlConfig_t::default_instance_;
  delete dtcpWindowBasedFlowControlConfig_t_reflection_;
  delete dtcpRateBasedFlowControlConfig_t::default_instance_;
  delete dtcpRateBasedFlowControlConfig_t_reflection_;
  delete dtcpFlowControlConfig_t::default_instance_;
  delete dtcpFlowControlConfig_t_reflection_;
  delete dtcpRtxControlConfig_t::default_instance_;
  delete dtcpRtxControlConfig_t_reflection_;
  delete dtcpConfig_t::default_instance_;
  delete dtcpConfig_t_reflection_;
  delete connectionPolicies_t::default_instance_;
  delete connectionPolicies_t_reflection_;
}

void protobuf_AddDesc_ConnectionPoliciesMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rina::messages::protobuf_AddDesc_PolicyDescriptorMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037ConnectionPoliciesMessage.proto\022\rrina."
    "messages\032\035PolicyDescriptorMessage.proto\""
    "\335\001\n\"dtcpWindowBasedFlowControlConfig_t\022\""
    "\n\032maxclosedwindowqueuelength\030\001 \001(\004\022\025\n\rin"
    "itialcredit\030\002 \001(\004\022@\n\025rcvrflowcontrolpoli"
    "cy\030\003 \001(\0132!.rina.messages.policyDescripto"
    "r_t\022:\n\017txcontrolpolicy\030\004 \001(\0132!.rina.mess"
    "ages.policyDescriptor_t\"\224\002\n dtcpRateBase"
    "dFlowControlConfig_t\022\023\n\013sendingrate\030\001 \001("
    "\004\022\022\n\ntimeperiod\030\002 \001(\004\022\?\n\024norateslowdownp"
    "olicy\030\003 \001(\0132!.rina.messages.policyDescri"
    "ptor_t\022F\n\033nooverridedefaultpeakpolicy\030\004 "
    "\001(\0132!.rina.messages.policyDescriptor_t\022>"
    "\n\023ratereductionpolicy\030\005 \001(\0132!.rina.messa"
    "ges.policyDescriptor_t\"\242\005\n\027dtcpFlowContr"
    "olConfig_t\022\023\n\013windowBased\030\001 \001(\010\022L\n\021windo"
    "wBasedConfig\030\002 \001(\01321.rina.messages.dtcpW"
    "indowBasedFlowControlConfig_t\022\021\n\trateBas"
    "ed\030\003 \001(\010\022H\n\017rateBasedConfig\030\004 \001(\0132/.rina"
    ".messages.dtcpRateBasedFlowControlConfig"
    "_t\022\032\n\022sentbytesthreshold\030\005 \001(\004\022!\n\031sentby"
    "tespercentthreshold\030\006 \001(\004\022\034\n\024sentbuffers"
    "threshold\030\007 \001(\004\022\031\n\021rcvbytesthreshold\030\010 \001"
    "(\004\022 \n\030rcvbytespercentthreshold\030\t \001(\004\022\033\n\023"
    "rcvbuffersthreshold\030\n \001(\004\022=\n\022closedwindo"
    "wpolicy\030\013 \001(\0132!.rina.messages.policyDesc"
    "riptor_t\022C\n\030flowcontroloverrunpolicy\030\014 \001"
    "(\0132!.rina.messages.policyDescriptor_t\022E\n"
    "\032reconcileflowcontrolpolicy\030\r \001(\0132!.rina"
    ".messages.policyDescriptor_t\022E\n\032receivin"
    "gflowcontrolpolicy\030\016 \001(\0132!.rina.messages"
    ".policyDescriptor_t\"\244\003\n\026dtcpRtxControlCo"
    "nfig_t\022\024\n\014datarxmsnmax\030\001 \001(\r\022\?\n\024rtxtimer"
    "expirypolicy\030\002 \001(\0132!.rina.messages.polic"
    "yDescriptor_t\022:\n\017senderackpolicy\030\003 \001(\0132!"
    ".rina.messages.policyDescriptor_t\022\?\n\024rec"
    "vingacklistpolicy\030\004 \001(\0132!.rina.messages."
    "policyDescriptor_t\0228\n\rrcvrackpolicy\030\005 \001("
    "\0132!.rina.messages.policyDescriptor_t\022;\n\020"
    "sendingackpolicy\030\006 \001(\0132!.rina.messages.p"
    "olicyDescriptor_t\022\?\n\024rcvrcontrolackpolic"
    "y\030\007 \001(\0132!.rina.messages.policyDescriptor"
    "_t\"\221\004\n\014dtcpConfig_t\022\023\n\013flowControl\030\001 \001(\010"
    "\022A\n\021flowControlConfig\030\002 \001(\0132&.rina.messa"
    "ges.dtcpFlowControlConfig_t\022\022\n\nrtxContro"
    "l\030\003 \001(\010\022\?\n\020rtxControlConfig\030\004 \001(\0132%.rina"
    ".messages.dtcpRtxControlConfig_t\022#\n\033init"
    "ialsenderinactivitytime\030\005 \001(\r\022\"\n\032initial"
    "recvrinactivitytime\030\006 \001(\r\022D\n\031rcvrtimerin"
    "activitypolicy\030\007 \001(\0132!.rina.messages.pol"
    "icyDescriptor_t\022E\n\032sendertimerinactiviyp"
    "olicy\030\010 \001(\0132!.rina.messages.policyDescri"
    "ptor_t\022\?\n\024lostcontrolpdupolicy\030\t \001(\0132!.r"
    "ina.messages.policyDescriptor_t\022=\n\022rttes"
    "timatorpolicy\030\n \001(\0132!.rina.messages.poli"
    "cyDescriptor_t\"\333\001\n\024connectionPolicies_t\022"
    "\023\n\013dtcpPresent\030\001 \001(\010\0226\n\021dtcpConfiguratio"
    "n\030\002 \001(\0132\033.rina.messages.dtcpConfig_t\022>\n\023"
    "initialseqnumpolicy\030\003 \001(\0132!.rina.message"
    "s.policyDescriptor_t\022\037\n\027seqnumrolloverth"
    "reshold\030\004 \001(\004\022\025\n\rinitialATimer\030\005 \001(\rB6\n4"
    "rina.encoding.impl.googleprotobuf.connec"
    "tionpolicies", 2492);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConnectionPoliciesMessage.proto", &protobuf_RegisterTypes);
  dtcpWindowBasedFlowControlConfig_t::default_instance_ = new dtcpWindowBasedFlowControlConfig_t();
  dtcpRateBasedFlowControlConfig_t::default_instance_ = new dtcpRateBasedFlowControlConfig_t();
  dtcpFlowControlConfig_t::default_instance_ = new dtcpFlowControlConfig_t();
  dtcpRtxControlConfig_t::default_instance_ = new dtcpRtxControlConfig_t();
  dtcpConfig_t::default_instance_ = new dtcpConfig_t();
  connectionPolicies_t::default_instance_ = new connectionPolicies_t();
  dtcpWindowBasedFlowControlConfig_t::default_instance_->InitAsDefaultInstance();
  dtcpRateBasedFlowControlConfig_t::default_instance_->InitAsDefaultInstance();
  dtcpFlowControlConfig_t::default_instance_->InitAsDefaultInstance();
  dtcpRtxControlConfig_t::default_instance_->InitAsDefaultInstance();
  dtcpConfig_t::default_instance_->InitAsDefaultInstance();
  connectionPolicies_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConnectionPoliciesMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConnectionPoliciesMessage_2eproto {
  StaticDescriptorInitializer_ConnectionPoliciesMessage_2eproto() {
    protobuf_AddDesc_ConnectionPoliciesMessage_2eproto();
  }
} static_descriptor_initializer_ConnectionPoliciesMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int dtcpWindowBasedFlowControlConfig_t::kMaxclosedwindowqueuelengthFieldNumber;
const int dtcpWindowBasedFlowControlConfig_t::kInitialcreditFieldNumber;
const int dtcpWindowBasedFlowControlConfig_t::kRcvrflowcontrolpolicyFieldNumber;
const int dtcpWindowBasedFlowControlConfig_t::kTxcontrolpolicyFieldNumber;
#endif  // !_MSC_VER

dtcpWindowBasedFlowControlConfig_t::dtcpWindowBasedFlowControlConfig_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dtcpWindowBasedFlowControlConfig_t::InitAsDefaultInstance() {
  rcvrflowcontrolpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  txcontrolpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
}

dtcpWindowBasedFlowControlConfig_t::dtcpWindowBasedFlowControlConfig_t(const dtcpWindowBasedFlowControlConfig_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dtcpWindowBasedFlowControlConfig_t::SharedCtor() {
  _cached_size_ = 0;
  maxclosedwindowqueuelength_ = GOOGLE_ULONGLONG(0);
  initialcredit_ = GOOGLE_ULONGLONG(0);
  rcvrflowcontrolpolicy_ = NULL;
  txcontrolpolicy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dtcpWindowBasedFlowControlConfig_t::~dtcpWindowBasedFlowControlConfig_t() {
  SharedDtor();
}

void dtcpWindowBasedFlowControlConfig_t::SharedDtor() {
  if (this != default_instance_) {
    delete rcvrflowcontrolpolicy_;
    delete txcontrolpolicy_;
  }
}

void dtcpWindowBasedFlowControlConfig_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dtcpWindowBasedFlowControlConfig_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dtcpWindowBasedFlowControlConfig_t_descriptor_;
}

const dtcpWindowBasedFlowControlConfig_t& dtcpWindowBasedFlowControlConfig_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectionPoliciesMessage_2eproto();
  return *default_instance_;
}

dtcpWindowBasedFlowControlConfig_t* dtcpWindowBasedFlowControlConfig_t::default_instance_ = NULL;

dtcpWindowBasedFlowControlConfig_t* dtcpWindowBasedFlowControlConfig_t::New() const {
  return new dtcpWindowBasedFlowControlConfig_t;
}

void dtcpWindowBasedFlowControlConfig_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxclosedwindowqueuelength_ = GOOGLE_ULONGLONG(0);
    initialcredit_ = GOOGLE_ULONGLONG(0);
    if (has_rcvrflowcontrolpolicy()) {
      if (rcvrflowcontrolpolicy_ != NULL) rcvrflowcontrolpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_txcontrolpolicy()) {
      if (txcontrolpolicy_ != NULL) txcontrolpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dtcpWindowBasedFlowControlConfig_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 maxclosedwindowqueuelength = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxclosedwindowqueuelength_)));
          set_has_maxclosedwindowqueuelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_initialcredit;
        break;
      }

      // optional uint64 initialcredit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initialcredit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &initialcredit_)));
          set_has_initialcredit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rcvrflowcontrolpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t rcvrflowcontrolpolicy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcvrflowcontrolpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rcvrflowcontrolpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_txcontrolpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t txcontrolpolicy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txcontrolpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txcontrolpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dtcpWindowBasedFlowControlConfig_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 maxclosedwindowqueuelength = 1;
  if (has_maxclosedwindowqueuelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->maxclosedwindowqueuelength(), output);
  }

  // optional uint64 initialcredit = 2;
  if (has_initialcredit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->initialcredit(), output);
  }

  // optional .rina.messages.policyDescriptor_t rcvrflowcontrolpolicy = 3;
  if (has_rcvrflowcontrolpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rcvrflowcontrolpolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t txcontrolpolicy = 4;
  if (has_txcontrolpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->txcontrolpolicy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dtcpWindowBasedFlowControlConfig_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 maxclosedwindowqueuelength = 1;
  if (has_maxclosedwindowqueuelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->maxclosedwindowqueuelength(), target);
  }

  // optional uint64 initialcredit = 2;
  if (has_initialcredit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->initialcredit(), target);
  }

  // optional .rina.messages.policyDescriptor_t rcvrflowcontrolpolicy = 3;
  if (has_rcvrflowcontrolpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rcvrflowcontrolpolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t txcontrolpolicy = 4;
  if (has_txcontrolpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->txcontrolpolicy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dtcpWindowBasedFlowControlConfig_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 maxclosedwindowqueuelength = 1;
    if (has_maxclosedwindowqueuelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxclosedwindowqueuelength());
    }

    // optional uint64 initialcredit = 2;
    if (has_initialcredit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->initialcredit());
    }

    // optional .rina.messages.policyDescriptor_t rcvrflowcontrolpolicy = 3;
    if (has_rcvrflowcontrolpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rcvrflowcontrolpolicy());
    }

    // optional .rina.messages.policyDescriptor_t txcontrolpolicy = 4;
    if (has_txcontrolpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txcontrolpolicy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dtcpWindowBasedFlowControlConfig_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dtcpWindowBasedFlowControlConfig_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dtcpWindowBasedFlowControlConfig_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dtcpWindowBasedFlowControlConfig_t::MergeFrom(const dtcpWindowBasedFlowControlConfig_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxclosedwindowqueuelength()) {
      set_maxclosedwindowqueuelength(from.maxclosedwindowqueuelength());
    }
    if (from.has_initialcredit()) {
      set_initialcredit(from.initialcredit());
    }
    if (from.has_rcvrflowcontrolpolicy()) {
      mutable_rcvrflowcontrolpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.rcvrflowcontrolpolicy());
    }
    if (from.has_txcontrolpolicy()) {
      mutable_txcontrolpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.txcontrolpolicy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dtcpWindowBasedFlowControlConfig_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dtcpWindowBasedFlowControlConfig_t::CopyFrom(const dtcpWindowBasedFlowControlConfig_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dtcpWindowBasedFlowControlConfig_t::IsInitialized() const {

  if (has_rcvrflowcontrolpolicy()) {
    if (!this->rcvrflowcontrolpolicy().IsInitialized()) return false;
  }
  if (has_txcontrolpolicy()) {
    if (!this->txcontrolpolicy().IsInitialized()) return false;
  }
  return true;
}

void dtcpWindowBasedFlowControlConfig_t::Swap(dtcpWindowBasedFlowControlConfig_t* other) {
  if (other != this) {
    std::swap(maxclosedwindowqueuelength_, other->maxclosedwindowqueuelength_);
    std::swap(initialcredit_, other->initialcredit_);
    std::swap(rcvrflowcontrolpolicy_, other->rcvrflowcontrolpolicy_);
    std::swap(txcontrolpolicy_, other->txcontrolpolicy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dtcpWindowBasedFlowControlConfig_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dtcpWindowBasedFlowControlConfig_t_descriptor_;
  metadata.reflection = dtcpWindowBasedFlowControlConfig_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dtcpRateBasedFlowControlConfig_t::kSendingrateFieldNumber;
const int dtcpRateBasedFlowControlConfig_t::kTimeperiodFieldNumber;
const int dtcpRateBasedFlowControlConfig_t::kNorateslowdownpolicyFieldNumber;
const int dtcpRateBasedFlowControlConfig_t::kNooverridedefaultpeakpolicyFieldNumber;
const int dtcpRateBasedFlowControlConfig_t::kRatereductionpolicyFieldNumber;
#endif  // !_MSC_VER

dtcpRateBasedFlowControlConfig_t::dtcpRateBasedFlowControlConfig_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dtcpRateBasedFlowControlConfig_t::InitAsDefaultInstance() {
  norateslowdownpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  nooverridedefaultpeakpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  ratereductionpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
}

dtcpRateBasedFlowControlConfig_t::dtcpRateBasedFlowControlConfig_t(const dtcpRateBasedFlowControlConfig_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dtcpRateBasedFlowControlConfig_t::SharedCtor() {
  _cached_size_ = 0;
  sendingrate_ = GOOGLE_ULONGLONG(0);
  timeperiod_ = GOOGLE_ULONGLONG(0);
  norateslowdownpolicy_ = NULL;
  nooverridedefaultpeakpolicy_ = NULL;
  ratereductionpolicy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dtcpRateBasedFlowControlConfig_t::~dtcpRateBasedFlowControlConfig_t() {
  SharedDtor();
}

void dtcpRateBasedFlowControlConfig_t::SharedDtor() {
  if (this != default_instance_) {
    delete norateslowdownpolicy_;
    delete nooverridedefaultpeakpolicy_;
    delete ratereductionpolicy_;
  }
}

void dtcpRateBasedFlowControlConfig_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dtcpRateBasedFlowControlConfig_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dtcpRateBasedFlowControlConfig_t_descriptor_;
}

const dtcpRateBasedFlowControlConfig_t& dtcpRateBasedFlowControlConfig_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectionPoliciesMessage_2eproto();
  return *default_instance_;
}

dtcpRateBasedFlowControlConfig_t* dtcpRateBasedFlowControlConfig_t::default_instance_ = NULL;

dtcpRateBasedFlowControlConfig_t* dtcpRateBasedFlowControlConfig_t::New() const {
  return new dtcpRateBasedFlowControlConfig_t;
}

void dtcpRateBasedFlowControlConfig_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sendingrate_ = GOOGLE_ULONGLONG(0);
    timeperiod_ = GOOGLE_ULONGLONG(0);
    if (has_norateslowdownpolicy()) {
      if (norateslowdownpolicy_ != NULL) norateslowdownpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_nooverridedefaultpeakpolicy()) {
      if (nooverridedefaultpeakpolicy_ != NULL) nooverridedefaultpeakpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_ratereductionpolicy()) {
      if (ratereductionpolicy_ != NULL) ratereductionpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dtcpRateBasedFlowControlConfig_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sendingrate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendingrate_)));
          set_has_sendingrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeperiod;
        break;
      }

      // optional uint64 timeperiod = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeperiod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeperiod_)));
          set_has_timeperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_norateslowdownpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t norateslowdownpolicy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_norateslowdownpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_norateslowdownpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nooverridedefaultpeakpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t nooverridedefaultpeakpolicy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nooverridedefaultpeakpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nooverridedefaultpeakpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ratereductionpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t ratereductionpolicy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ratereductionpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ratereductionpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dtcpRateBasedFlowControlConfig_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sendingrate = 1;
  if (has_sendingrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sendingrate(), output);
  }

  // optional uint64 timeperiod = 2;
  if (has_timeperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timeperiod(), output);
  }

  // optional .rina.messages.policyDescriptor_t norateslowdownpolicy = 3;
  if (has_norateslowdownpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->norateslowdownpolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t nooverridedefaultpeakpolicy = 4;
  if (has_nooverridedefaultpeakpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nooverridedefaultpeakpolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t ratereductionpolicy = 5;
  if (has_ratereductionpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ratereductionpolicy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dtcpRateBasedFlowControlConfig_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sendingrate = 1;
  if (has_sendingrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sendingrate(), target);
  }

  // optional uint64 timeperiod = 2;
  if (has_timeperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timeperiod(), target);
  }

  // optional .rina.messages.policyDescriptor_t norateslowdownpolicy = 3;
  if (has_norateslowdownpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->norateslowdownpolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t nooverridedefaultpeakpolicy = 4;
  if (has_nooverridedefaultpeakpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nooverridedefaultpeakpolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t ratereductionpolicy = 5;
  if (has_ratereductionpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ratereductionpolicy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dtcpRateBasedFlowControlConfig_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sendingrate = 1;
    if (has_sendingrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendingrate());
    }

    // optional uint64 timeperiod = 2;
    if (has_timeperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeperiod());
    }

    // optional .rina.messages.policyDescriptor_t norateslowdownpolicy = 3;
    if (has_norateslowdownpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->norateslowdownpolicy());
    }

    // optional .rina.messages.policyDescriptor_t nooverridedefaultpeakpolicy = 4;
    if (has_nooverridedefaultpeakpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nooverridedefaultpeakpolicy());
    }

    // optional .rina.messages.policyDescriptor_t ratereductionpolicy = 5;
    if (has_ratereductionpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ratereductionpolicy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dtcpRateBasedFlowControlConfig_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dtcpRateBasedFlowControlConfig_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dtcpRateBasedFlowControlConfig_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dtcpRateBasedFlowControlConfig_t::MergeFrom(const dtcpRateBasedFlowControlConfig_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendingrate()) {
      set_sendingrate(from.sendingrate());
    }
    if (from.has_timeperiod()) {
      set_timeperiod(from.timeperiod());
    }
    if (from.has_norateslowdownpolicy()) {
      mutable_norateslowdownpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.norateslowdownpolicy());
    }
    if (from.has_nooverridedefaultpeakpolicy()) {
      mutable_nooverridedefaultpeakpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.nooverridedefaultpeakpolicy());
    }
    if (from.has_ratereductionpolicy()) {
      mutable_ratereductionpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.ratereductionpolicy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dtcpRateBasedFlowControlConfig_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dtcpRateBasedFlowControlConfig_t::CopyFrom(const dtcpRateBasedFlowControlConfig_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dtcpRateBasedFlowControlConfig_t::IsInitialized() const {

  if (has_norateslowdownpolicy()) {
    if (!this->norateslowdownpolicy().IsInitialized()) return false;
  }
  if (has_nooverridedefaultpeakpolicy()) {
    if (!this->nooverridedefaultpeakpolicy().IsInitialized()) return false;
  }
  if (has_ratereductionpolicy()) {
    if (!this->ratereductionpolicy().IsInitialized()) return false;
  }
  return true;
}

void dtcpRateBasedFlowControlConfig_t::Swap(dtcpRateBasedFlowControlConfig_t* other) {
  if (other != this) {
    std::swap(sendingrate_, other->sendingrate_);
    std::swap(timeperiod_, other->timeperiod_);
    std::swap(norateslowdownpolicy_, other->norateslowdownpolicy_);
    std::swap(nooverridedefaultpeakpolicy_, other->nooverridedefaultpeakpolicy_);
    std::swap(ratereductionpolicy_, other->ratereductionpolicy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dtcpRateBasedFlowControlConfig_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dtcpRateBasedFlowControlConfig_t_descriptor_;
  metadata.reflection = dtcpRateBasedFlowControlConfig_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dtcpFlowControlConfig_t::kWindowBasedFieldNumber;
const int dtcpFlowControlConfig_t::kWindowBasedConfigFieldNumber;
const int dtcpFlowControlConfig_t::kRateBasedFieldNumber;
const int dtcpFlowControlConfig_t::kRateBasedConfigFieldNumber;
const int dtcpFlowControlConfig_t::kSentbytesthresholdFieldNumber;
const int dtcpFlowControlConfig_t::kSentbytespercentthresholdFieldNumber;
const int dtcpFlowControlConfig_t::kSentbuffersthresholdFieldNumber;
const int dtcpFlowControlConfig_t::kRcvbytesthresholdFieldNumber;
const int dtcpFlowControlConfig_t::kRcvbytespercentthresholdFieldNumber;
const int dtcpFlowControlConfig_t::kRcvbuffersthresholdFieldNumber;
const int dtcpFlowControlConfig_t::kClosedwindowpolicyFieldNumber;
const int dtcpFlowControlConfig_t::kFlowcontroloverrunpolicyFieldNumber;
const int dtcpFlowControlConfig_t::kReconcileflowcontrolpolicyFieldNumber;
const int dtcpFlowControlConfig_t::kReceivingflowcontrolpolicyFieldNumber;
#endif  // !_MSC_VER

dtcpFlowControlConfig_t::dtcpFlowControlConfig_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dtcpFlowControlConfig_t::InitAsDefaultInstance() {
  windowbasedconfig_ = const_cast< ::rina::messages::dtcpWindowBasedFlowControlConfig_t*>(&::rina::messages::dtcpWindowBasedFlowControlConfig_t::default_instance());
  ratebasedconfig_ = const_cast< ::rina::messages::dtcpRateBasedFlowControlConfig_t*>(&::rina::messages::dtcpRateBasedFlowControlConfig_t::default_instance());
  closedwindowpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  flowcontroloverrunpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  reconcileflowcontrolpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  receivingflowcontrolpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
}

dtcpFlowControlConfig_t::dtcpFlowControlConfig_t(const dtcpFlowControlConfig_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dtcpFlowControlConfig_t::SharedCtor() {
  _cached_size_ = 0;
  windowbased_ = false;
  windowbasedconfig_ = NULL;
  ratebased_ = false;
  ratebasedconfig_ = NULL;
  sentbytesthreshold_ = GOOGLE_ULONGLONG(0);
  sentbytespercentthreshold_ = GOOGLE_ULONGLONG(0);
  sentbuffersthreshold_ = GOOGLE_ULONGLONG(0);
  rcvbytesthreshold_ = GOOGLE_ULONGLONG(0);
  rcvbytespercentthreshold_ = GOOGLE_ULONGLONG(0);
  rcvbuffersthreshold_ = GOOGLE_ULONGLONG(0);
  closedwindowpolicy_ = NULL;
  flowcontroloverrunpolicy_ = NULL;
  reconcileflowcontrolpolicy_ = NULL;
  receivingflowcontrolpolicy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dtcpFlowControlConfig_t::~dtcpFlowControlConfig_t() {
  SharedDtor();
}

void dtcpFlowControlConfig_t::SharedDtor() {
  if (this != default_instance_) {
    delete windowbasedconfig_;
    delete ratebasedconfig_;
    delete closedwindowpolicy_;
    delete flowcontroloverrunpolicy_;
    delete reconcileflowcontrolpolicy_;
    delete receivingflowcontrolpolicy_;
  }
}

void dtcpFlowControlConfig_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dtcpFlowControlConfig_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dtcpFlowControlConfig_t_descriptor_;
}

const dtcpFlowControlConfig_t& dtcpFlowControlConfig_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectionPoliciesMessage_2eproto();
  return *default_instance_;
}

dtcpFlowControlConfig_t* dtcpFlowControlConfig_t::default_instance_ = NULL;

dtcpFlowControlConfig_t* dtcpFlowControlConfig_t::New() const {
  return new dtcpFlowControlConfig_t;
}

void dtcpFlowControlConfig_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    windowbased_ = false;
    if (has_windowbasedconfig()) {
      if (windowbasedconfig_ != NULL) windowbasedconfig_->::rina::messages::dtcpWindowBasedFlowControlConfig_t::Clear();
    }
    ratebased_ = false;
    if (has_ratebasedconfig()) {
      if (ratebasedconfig_ != NULL) ratebasedconfig_->::rina::messages::dtcpRateBasedFlowControlConfig_t::Clear();
    }
    sentbytesthreshold_ = GOOGLE_ULONGLONG(0);
    sentbytespercentthreshold_ = GOOGLE_ULONGLONG(0);
    sentbuffersthreshold_ = GOOGLE_ULONGLONG(0);
    rcvbytesthreshold_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rcvbytespercentthreshold_ = GOOGLE_ULONGLONG(0);
    rcvbuffersthreshold_ = GOOGLE_ULONGLONG(0);
    if (has_closedwindowpolicy()) {
      if (closedwindowpolicy_ != NULL) closedwindowpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_flowcontroloverrunpolicy()) {
      if (flowcontroloverrunpolicy_ != NULL) flowcontroloverrunpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_reconcileflowcontrolpolicy()) {
      if (reconcileflowcontrolpolicy_ != NULL) reconcileflowcontrolpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_receivingflowcontrolpolicy()) {
      if (receivingflowcontrolpolicy_ != NULL) receivingflowcontrolpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dtcpFlowControlConfig_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool windowBased = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &windowbased_)));
          set_has_windowbased();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_windowBasedConfig;
        break;
      }

      // optional .rina.messages.dtcpWindowBasedFlowControlConfig_t windowBasedConfig = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_windowBasedConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_windowbasedconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rateBased;
        break;
      }

      // optional bool rateBased = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rateBased:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ratebased_)));
          set_has_ratebased();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rateBasedConfig;
        break;
      }

      // optional .rina.messages.dtcpRateBasedFlowControlConfig_t rateBasedConfig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rateBasedConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ratebasedconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sentbytesthreshold;
        break;
      }

      // optional uint64 sentbytesthreshold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentbytesthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sentbytesthreshold_)));
          set_has_sentbytesthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sentbytespercentthreshold;
        break;
      }

      // optional uint64 sentbytespercentthreshold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentbytespercentthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sentbytespercentthreshold_)));
          set_has_sentbytespercentthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sentbuffersthreshold;
        break;
      }

      // optional uint64 sentbuffersthreshold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentbuffersthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sentbuffersthreshold_)));
          set_has_sentbuffersthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rcvbytesthreshold;
        break;
      }

      // optional uint64 rcvbytesthreshold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcvbytesthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rcvbytesthreshold_)));
          set_has_rcvbytesthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rcvbytespercentthreshold;
        break;
      }

      // optional uint64 rcvbytespercentthreshold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcvbytespercentthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rcvbytespercentthreshold_)));
          set_has_rcvbytespercentthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rcvbuffersthreshold;
        break;
      }

      // optional uint64 rcvbuffersthreshold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rcvbuffersthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rcvbuffersthreshold_)));
          set_has_rcvbuffersthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_closedwindowpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t closedwindowpolicy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closedwindowpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closedwindowpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_flowcontroloverrunpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t flowcontroloverrunpolicy = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flowcontroloverrunpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flowcontroloverrunpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_reconcileflowcontrolpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t reconcileflowcontrolpolicy = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reconcileflowcontrolpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reconcileflowcontrolpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_receivingflowcontrolpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t receivingflowcontrolpolicy = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receivingflowcontrolpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receivingflowcontrolpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dtcpFlowControlConfig_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool windowBased = 1;
  if (has_windowbased()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->windowbased(), output);
  }

  // optional .rina.messages.dtcpWindowBasedFlowControlConfig_t windowBasedConfig = 2;
  if (has_windowbasedconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->windowbasedconfig(), output);
  }

  // optional bool rateBased = 3;
  if (has_ratebased()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ratebased(), output);
  }

  // optional .rina.messages.dtcpRateBasedFlowControlConfig_t rateBasedConfig = 4;
  if (has_ratebasedconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ratebasedconfig(), output);
  }

  // optional uint64 sentbytesthreshold = 5;
  if (has_sentbytesthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sentbytesthreshold(), output);
  }

  // optional uint64 sentbytespercentthreshold = 6;
  if (has_sentbytespercentthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sentbytespercentthreshold(), output);
  }

  // optional uint64 sentbuffersthreshold = 7;
  if (has_sentbuffersthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sentbuffersthreshold(), output);
  }

  // optional uint64 rcvbytesthreshold = 8;
  if (has_rcvbytesthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->rcvbytesthreshold(), output);
  }

  // optional uint64 rcvbytespercentthreshold = 9;
  if (has_rcvbytespercentthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->rcvbytespercentthreshold(), output);
  }

  // optional uint64 rcvbuffersthreshold = 10;
  if (has_rcvbuffersthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->rcvbuffersthreshold(), output);
  }

  // optional .rina.messages.policyDescriptor_t closedwindowpolicy = 11;
  if (has_closedwindowpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->closedwindowpolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t flowcontroloverrunpolicy = 12;
  if (has_flowcontroloverrunpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->flowcontroloverrunpolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t reconcileflowcontrolpolicy = 13;
  if (has_reconcileflowcontrolpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->reconcileflowcontrolpolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t receivingflowcontrolpolicy = 14;
  if (has_receivingflowcontrolpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->receivingflowcontrolpolicy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dtcpFlowControlConfig_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool windowBased = 1;
  if (has_windowbased()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->windowbased(), target);
  }

  // optional .rina.messages.dtcpWindowBasedFlowControlConfig_t windowBasedConfig = 2;
  if (has_windowbasedconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->windowbasedconfig(), target);
  }

  // optional bool rateBased = 3;
  if (has_ratebased()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ratebased(), target);
  }

  // optional .rina.messages.dtcpRateBasedFlowControlConfig_t rateBasedConfig = 4;
  if (has_ratebasedconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ratebasedconfig(), target);
  }

  // optional uint64 sentbytesthreshold = 5;
  if (has_sentbytesthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sentbytesthreshold(), target);
  }

  // optional uint64 sentbytespercentthreshold = 6;
  if (has_sentbytespercentthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sentbytespercentthreshold(), target);
  }

  // optional uint64 sentbuffersthreshold = 7;
  if (has_sentbuffersthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sentbuffersthreshold(), target);
  }

  // optional uint64 rcvbytesthreshold = 8;
  if (has_rcvbytesthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->rcvbytesthreshold(), target);
  }

  // optional uint64 rcvbytespercentthreshold = 9;
  if (has_rcvbytespercentthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->rcvbytespercentthreshold(), target);
  }

  // optional uint64 rcvbuffersthreshold = 10;
  if (has_rcvbuffersthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->rcvbuffersthreshold(), target);
  }

  // optional .rina.messages.policyDescriptor_t closedwindowpolicy = 11;
  if (has_closedwindowpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->closedwindowpolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t flowcontroloverrunpolicy = 12;
  if (has_flowcontroloverrunpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->flowcontroloverrunpolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t reconcileflowcontrolpolicy = 13;
  if (has_reconcileflowcontrolpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->reconcileflowcontrolpolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t receivingflowcontrolpolicy = 14;
  if (has_receivingflowcontrolpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->receivingflowcontrolpolicy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dtcpFlowControlConfig_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool windowBased = 1;
    if (has_windowbased()) {
      total_size += 1 + 1;
    }

    // optional .rina.messages.dtcpWindowBasedFlowControlConfig_t windowBasedConfig = 2;
    if (has_windowbasedconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->windowbasedconfig());
    }

    // optional bool rateBased = 3;
    if (has_ratebased()) {
      total_size += 1 + 1;
    }

    // optional .rina.messages.dtcpRateBasedFlowControlConfig_t rateBasedConfig = 4;
    if (has_ratebasedconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ratebasedconfig());
    }

    // optional uint64 sentbytesthreshold = 5;
    if (has_sentbytesthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sentbytesthreshold());
    }

    // optional uint64 sentbytespercentthreshold = 6;
    if (has_sentbytespercentthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sentbytespercentthreshold());
    }

    // optional uint64 sentbuffersthreshold = 7;
    if (has_sentbuffersthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sentbuffersthreshold());
    }

    // optional uint64 rcvbytesthreshold = 8;
    if (has_rcvbytesthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rcvbytesthreshold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 rcvbytespercentthreshold = 9;
    if (has_rcvbytespercentthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rcvbytespercentthreshold());
    }

    // optional uint64 rcvbuffersthreshold = 10;
    if (has_rcvbuffersthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rcvbuffersthreshold());
    }

    // optional .rina.messages.policyDescriptor_t closedwindowpolicy = 11;
    if (has_closedwindowpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closedwindowpolicy());
    }

    // optional .rina.messages.policyDescriptor_t flowcontroloverrunpolicy = 12;
    if (has_flowcontroloverrunpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flowcontroloverrunpolicy());
    }

    // optional .rina.messages.policyDescriptor_t reconcileflowcontrolpolicy = 13;
    if (has_reconcileflowcontrolpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reconcileflowcontrolpolicy());
    }

    // optional .rina.messages.policyDescriptor_t receivingflowcontrolpolicy = 14;
    if (has_receivingflowcontrolpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receivingflowcontrolpolicy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dtcpFlowControlConfig_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dtcpFlowControlConfig_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dtcpFlowControlConfig_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dtcpFlowControlConfig_t::MergeFrom(const dtcpFlowControlConfig_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_windowbased()) {
      set_windowbased(from.windowbased());
    }
    if (from.has_windowbasedconfig()) {
      mutable_windowbasedconfig()->::rina::messages::dtcpWindowBasedFlowControlConfig_t::MergeFrom(from.windowbasedconfig());
    }
    if (from.has_ratebased()) {
      set_ratebased(from.ratebased());
    }
    if (from.has_ratebasedconfig()) {
      mutable_ratebasedconfig()->::rina::messages::dtcpRateBasedFlowControlConfig_t::MergeFrom(from.ratebasedconfig());
    }
    if (from.has_sentbytesthreshold()) {
      set_sentbytesthreshold(from.sentbytesthreshold());
    }
    if (from.has_sentbytespercentthreshold()) {
      set_sentbytespercentthreshold(from.sentbytespercentthreshold());
    }
    if (from.has_sentbuffersthreshold()) {
      set_sentbuffersthreshold(from.sentbuffersthreshold());
    }
    if (from.has_rcvbytesthreshold()) {
      set_rcvbytesthreshold(from.rcvbytesthreshold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rcvbytespercentthreshold()) {
      set_rcvbytespercentthreshold(from.rcvbytespercentthreshold());
    }
    if (from.has_rcvbuffersthreshold()) {
      set_rcvbuffersthreshold(from.rcvbuffersthreshold());
    }
    if (from.has_closedwindowpolicy()) {
      mutable_closedwindowpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.closedwindowpolicy());
    }
    if (from.has_flowcontroloverrunpolicy()) {
      mutable_flowcontroloverrunpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.flowcontroloverrunpolicy());
    }
    if (from.has_reconcileflowcontrolpolicy()) {
      mutable_reconcileflowcontrolpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.reconcileflowcontrolpolicy());
    }
    if (from.has_receivingflowcontrolpolicy()) {
      mutable_receivingflowcontrolpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.receivingflowcontrolpolicy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dtcpFlowControlConfig_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dtcpFlowControlConfig_t::CopyFrom(const dtcpFlowControlConfig_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dtcpFlowControlConfig_t::IsInitialized() const {

  if (has_windowbasedconfig()) {
    if (!this->windowbasedconfig().IsInitialized()) return false;
  }
  if (has_ratebasedconfig()) {
    if (!this->ratebasedconfig().IsInitialized()) return false;
  }
  if (has_closedwindowpolicy()) {
    if (!this->closedwindowpolicy().IsInitialized()) return false;
  }
  if (has_flowcontroloverrunpolicy()) {
    if (!this->flowcontroloverrunpolicy().IsInitialized()) return false;
  }
  if (has_reconcileflowcontrolpolicy()) {
    if (!this->reconcileflowcontrolpolicy().IsInitialized()) return false;
  }
  if (has_receivingflowcontrolpolicy()) {
    if (!this->receivingflowcontrolpolicy().IsInitialized()) return false;
  }
  return true;
}

void dtcpFlowControlConfig_t::Swap(dtcpFlowControlConfig_t* other) {
  if (other != this) {
    std::swap(windowbased_, other->windowbased_);
    std::swap(windowbasedconfig_, other->windowbasedconfig_);
    std::swap(ratebased_, other->ratebased_);
    std::swap(ratebasedconfig_, other->ratebasedconfig_);
    std::swap(sentbytesthreshold_, other->sentbytesthreshold_);
    std::swap(sentbytespercentthreshold_, other->sentbytespercentthreshold_);
    std::swap(sentbuffersthreshold_, other->sentbuffersthreshold_);
    std::swap(rcvbytesthreshold_, other->rcvbytesthreshold_);
    std::swap(rcvbytespercentthreshold_, other->rcvbytespercentthreshold_);
    std::swap(rcvbuffersthreshold_, other->rcvbuffersthreshold_);
    std::swap(closedwindowpolicy_, other->closedwindowpolicy_);
    std::swap(flowcontroloverrunpolicy_, other->flowcontroloverrunpolicy_);
    std::swap(reconcileflowcontrolpolicy_, other->reconcileflowcontrolpolicy_);
    std::swap(receivingflowcontrolpolicy_, other->receivingflowcontrolpolicy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dtcpFlowControlConfig_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dtcpFlowControlConfig_t_descriptor_;
  metadata.reflection = dtcpFlowControlConfig_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dtcpRtxControlConfig_t::kDatarxmsnmaxFieldNumber;
const int dtcpRtxControlConfig_t::kRtxtimerexpirypolicyFieldNumber;
const int dtcpRtxControlConfig_t::kSenderackpolicyFieldNumber;
const int dtcpRtxControlConfig_t::kRecvingacklistpolicyFieldNumber;
const int dtcpRtxControlConfig_t::kRcvrackpolicyFieldNumber;
const int dtcpRtxControlConfig_t::kSendingackpolicyFieldNumber;
const int dtcpRtxControlConfig_t::kRcvrcontrolackpolicyFieldNumber;
#endif  // !_MSC_VER

dtcpRtxControlConfig_t::dtcpRtxControlConfig_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dtcpRtxControlConfig_t::InitAsDefaultInstance() {
  rtxtimerexpirypolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  senderackpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  recvingacklistpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  rcvrackpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  sendingackpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  rcvrcontrolackpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
}

dtcpRtxControlConfig_t::dtcpRtxControlConfig_t(const dtcpRtxControlConfig_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dtcpRtxControlConfig_t::SharedCtor() {
  _cached_size_ = 0;
  datarxmsnmax_ = 0u;
  rtxtimerexpirypolicy_ = NULL;
  senderackpolicy_ = NULL;
  recvingacklistpolicy_ = NULL;
  rcvrackpolicy_ = NULL;
  sendingackpolicy_ = NULL;
  rcvrcontrolackpolicy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dtcpRtxControlConfig_t::~dtcpRtxControlConfig_t() {
  SharedDtor();
}

void dtcpRtxControlConfig_t::SharedDtor() {
  if (this != default_instance_) {
    delete rtxtimerexpirypolicy_;
    delete senderackpolicy_;
    delete recvingacklistpolicy_;
    delete rcvrackpolicy_;
    delete sendingackpolicy_;
    delete rcvrcontrolackpolicy_;
  }
}

void dtcpRtxControlConfig_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dtcpRtxControlConfig_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dtcpRtxControlConfig_t_descriptor_;
}

const dtcpRtxControlConfig_t& dtcpRtxControlConfig_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectionPoliciesMessage_2eproto();
  return *default_instance_;
}

dtcpRtxControlConfig_t* dtcpRtxControlConfig_t::default_instance_ = NULL;

dtcpRtxControlConfig_t* dtcpRtxControlConfig_t::New() const {
  return new dtcpRtxControlConfig_t;
}

void dtcpRtxControlConfig_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    datarxmsnmax_ = 0u;
    if (has_rtxtimerexpirypolicy()) {
      if (rtxtimerexpirypolicy_ != NULL) rtxtimerexpirypolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_senderackpolicy()) {
      if (senderackpolicy_ != NULL) senderackpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_recvingacklistpolicy()) {
      if (recvingacklistpolicy_ != NULL) recvingacklistpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_rcvrackpolicy()) {
      if (rcvrackpolicy_ != NULL) rcvrackpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_sendingackpolicy()) {
      if (sendingackpolicy_ != NULL) sendingackpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_rcvrcontrolackpolicy()) {
      if (rcvrcontrolackpolicy_ != NULL) rcvrcontrolackpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dtcpRtxControlConfig_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 datarxmsnmax = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datarxmsnmax_)));
          set_has_datarxmsnmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rtxtimerexpirypolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t rtxtimerexpirypolicy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rtxtimerexpirypolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtxtimerexpirypolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_senderackpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t senderackpolicy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderackpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_senderackpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recvingacklistpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t recvingacklistpolicy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvingacklistpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvingacklistpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rcvrackpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t rcvrackpolicy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcvrackpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rcvrackpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sendingackpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t sendingackpolicy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendingackpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendingackpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rcvrcontrolackpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t rcvrcontrolackpolicy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcvrcontrolackpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rcvrcontrolackpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dtcpRtxControlConfig_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 datarxmsnmax = 1;
  if (has_datarxmsnmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->datarxmsnmax(), output);
  }

  // optional .rina.messages.policyDescriptor_t rtxtimerexpirypolicy = 2;
  if (has_rtxtimerexpirypolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rtxtimerexpirypolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t senderackpolicy = 3;
  if (has_senderackpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->senderackpolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t recvingacklistpolicy = 4;
  if (has_recvingacklistpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recvingacklistpolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t rcvrackpolicy = 5;
  if (has_rcvrackpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rcvrackpolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t sendingackpolicy = 6;
  if (has_sendingackpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sendingackpolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t rcvrcontrolackpolicy = 7;
  if (has_rcvrcontrolackpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rcvrcontrolackpolicy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dtcpRtxControlConfig_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 datarxmsnmax = 1;
  if (has_datarxmsnmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->datarxmsnmax(), target);
  }

  // optional .rina.messages.policyDescriptor_t rtxtimerexpirypolicy = 2;
  if (has_rtxtimerexpirypolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rtxtimerexpirypolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t senderackpolicy = 3;
  if (has_senderackpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->senderackpolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t recvingacklistpolicy = 4;
  if (has_recvingacklistpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recvingacklistpolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t rcvrackpolicy = 5;
  if (has_rcvrackpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rcvrackpolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t sendingackpolicy = 6;
  if (has_sendingackpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sendingackpolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t rcvrcontrolackpolicy = 7;
  if (has_rcvrcontrolackpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rcvrcontrolackpolicy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dtcpRtxControlConfig_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 datarxmsnmax = 1;
    if (has_datarxmsnmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datarxmsnmax());
    }

    // optional .rina.messages.policyDescriptor_t rtxtimerexpirypolicy = 2;
    if (has_rtxtimerexpirypolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rtxtimerexpirypolicy());
    }

    // optional .rina.messages.policyDescriptor_t senderackpolicy = 3;
    if (has_senderackpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->senderackpolicy());
    }

    // optional .rina.messages.policyDescriptor_t recvingacklistpolicy = 4;
    if (has_recvingacklistpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recvingacklistpolicy());
    }

    // optional .rina.messages.policyDescriptor_t rcvrackpolicy = 5;
    if (has_rcvrackpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rcvrackpolicy());
    }

    // optional .rina.messages.policyDescriptor_t sendingackpolicy = 6;
    if (has_sendingackpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendingackpolicy());
    }

    // optional .rina.messages.policyDescriptor_t rcvrcontrolackpolicy = 7;
    if (has_rcvrcontrolackpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rcvrcontrolackpolicy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dtcpRtxControlConfig_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dtcpRtxControlConfig_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dtcpRtxControlConfig_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dtcpRtxControlConfig_t::MergeFrom(const dtcpRtxControlConfig_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datarxmsnmax()) {
      set_datarxmsnmax(from.datarxmsnmax());
    }
    if (from.has_rtxtimerexpirypolicy()) {
      mutable_rtxtimerexpirypolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.rtxtimerexpirypolicy());
    }
    if (from.has_senderackpolicy()) {
      mutable_senderackpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.senderackpolicy());
    }
    if (from.has_recvingacklistpolicy()) {
      mutable_recvingacklistpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.recvingacklistpolicy());
    }
    if (from.has_rcvrackpolicy()) {
      mutable_rcvrackpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.rcvrackpolicy());
    }
    if (from.has_sendingackpolicy()) {
      mutable_sendingackpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.sendingackpolicy());
    }
    if (from.has_rcvrcontrolackpolicy()) {
      mutable_rcvrcontrolackpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.rcvrcontrolackpolicy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dtcpRtxControlConfig_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dtcpRtxControlConfig_t::CopyFrom(const dtcpRtxControlConfig_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dtcpRtxControlConfig_t::IsInitialized() const {

  if (has_rtxtimerexpirypolicy()) {
    if (!this->rtxtimerexpirypolicy().IsInitialized()) return false;
  }
  if (has_senderackpolicy()) {
    if (!this->senderackpolicy().IsInitialized()) return false;
  }
  if (has_recvingacklistpolicy()) {
    if (!this->recvingacklistpolicy().IsInitialized()) return false;
  }
  if (has_rcvrackpolicy()) {
    if (!this->rcvrackpolicy().IsInitialized()) return false;
  }
  if (has_sendingackpolicy()) {
    if (!this->sendingackpolicy().IsInitialized()) return false;
  }
  if (has_rcvrcontrolackpolicy()) {
    if (!this->rcvrcontrolackpolicy().IsInitialized()) return false;
  }
  return true;
}

void dtcpRtxControlConfig_t::Swap(dtcpRtxControlConfig_t* other) {
  if (other != this) {
    std::swap(datarxmsnmax_, other->datarxmsnmax_);
    std::swap(rtxtimerexpirypolicy_, other->rtxtimerexpirypolicy_);
    std::swap(senderackpolicy_, other->senderackpolicy_);
    std::swap(recvingacklistpolicy_, other->recvingacklistpolicy_);
    std::swap(rcvrackpolicy_, other->rcvrackpolicy_);
    std::swap(sendingackpolicy_, other->sendingackpolicy_);
    std::swap(rcvrcontrolackpolicy_, other->rcvrcontrolackpolicy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dtcpRtxControlConfig_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dtcpRtxControlConfig_t_descriptor_;
  metadata.reflection = dtcpRtxControlConfig_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dtcpConfig_t::kFlowControlFieldNumber;
const int dtcpConfig_t::kFlowControlConfigFieldNumber;
const int dtcpConfig_t::kRtxControlFieldNumber;
const int dtcpConfig_t::kRtxControlConfigFieldNumber;
const int dtcpConfig_t::kInitialsenderinactivitytimeFieldNumber;
const int dtcpConfig_t::kInitialrecvrinactivitytimeFieldNumber;
const int dtcpConfig_t::kRcvrtimerinactivitypolicyFieldNumber;
const int dtcpConfig_t::kSendertimerinactiviypolicyFieldNumber;
const int dtcpConfig_t::kLostcontrolpdupolicyFieldNumber;
const int dtcpConfig_t::kRttestimatorpolicyFieldNumber;
#endif  // !_MSC_VER

dtcpConfig_t::dtcpConfig_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dtcpConfig_t::InitAsDefaultInstance() {
  flowcontrolconfig_ = const_cast< ::rina::messages::dtcpFlowControlConfig_t*>(&::rina::messages::dtcpFlowControlConfig_t::default_instance());
  rtxcontrolconfig_ = const_cast< ::rina::messages::dtcpRtxControlConfig_t*>(&::rina::messages::dtcpRtxControlConfig_t::default_instance());
  rcvrtimerinactivitypolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  sendertimerinactiviypolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  lostcontrolpdupolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
  rttestimatorpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
}

dtcpConfig_t::dtcpConfig_t(const dtcpConfig_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dtcpConfig_t::SharedCtor() {
  _cached_size_ = 0;
  flowcontrol_ = false;
  flowcontrolconfig_ = NULL;
  rtxcontrol_ = false;
  rtxcontrolconfig_ = NULL;
  initialsenderinactivitytime_ = 0u;
  initialrecvrinactivitytime_ = 0u;
  rcvrtimerinactivitypolicy_ = NULL;
  sendertimerinactiviypolicy_ = NULL;
  lostcontrolpdupolicy_ = NULL;
  rttestimatorpolicy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dtcpConfig_t::~dtcpConfig_t() {
  SharedDtor();
}

void dtcpConfig_t::SharedDtor() {
  if (this != default_instance_) {
    delete flowcontrolconfig_;
    delete rtxcontrolconfig_;
    delete rcvrtimerinactivitypolicy_;
    delete sendertimerinactiviypolicy_;
    delete lostcontrolpdupolicy_;
    delete rttestimatorpolicy_;
  }
}

void dtcpConfig_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dtcpConfig_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dtcpConfig_t_descriptor_;
}

const dtcpConfig_t& dtcpConfig_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectionPoliciesMessage_2eproto();
  return *default_instance_;
}

dtcpConfig_t* dtcpConfig_t::default_instance_ = NULL;

dtcpConfig_t* dtcpConfig_t::New() const {
  return new dtcpConfig_t;
}

void dtcpConfig_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flowcontrol_ = false;
    if (has_flowcontrolconfig()) {
      if (flowcontrolconfig_ != NULL) flowcontrolconfig_->::rina::messages::dtcpFlowControlConfig_t::Clear();
    }
    rtxcontrol_ = false;
    if (has_rtxcontrolconfig()) {
      if (rtxcontrolconfig_ != NULL) rtxcontrolconfig_->::rina::messages::dtcpRtxControlConfig_t::Clear();
    }
    initialsenderinactivitytime_ = 0u;
    initialrecvrinactivitytime_ = 0u;
    if (has_rcvrtimerinactivitypolicy()) {
      if (rcvrtimerinactivitypolicy_ != NULL) rcvrtimerinactivitypolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_sendertimerinactiviypolicy()) {
      if (sendertimerinactiviypolicy_ != NULL) sendertimerinactiviypolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lostcontrolpdupolicy()) {
      if (lostcontrolpdupolicy_ != NULL) lostcontrolpdupolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    if (has_rttestimatorpolicy()) {
      if (rttestimatorpolicy_ != NULL) rttestimatorpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dtcpConfig_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool flowControl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flowcontrol_)));
          set_has_flowcontrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flowControlConfig;
        break;
      }

      // optional .rina.messages.dtcpFlowControlConfig_t flowControlConfig = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flowControlConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flowcontrolconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rtxControl;
        break;
      }

      // optional bool rtxControl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtxControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rtxcontrol_)));
          set_has_rtxcontrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rtxControlConfig;
        break;
      }

      // optional .rina.messages.dtcpRtxControlConfig_t rtxControlConfig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rtxControlConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtxcontrolconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_initialsenderinactivitytime;
        break;
      }

      // optional uint32 initialsenderinactivitytime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initialsenderinactivitytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initialsenderinactivitytime_)));
          set_has_initialsenderinactivitytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_initialrecvrinactivitytime;
        break;
      }

      // optional uint32 initialrecvrinactivitytime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initialrecvrinactivitytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initialrecvrinactivitytime_)));
          set_has_initialrecvrinactivitytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rcvrtimerinactivitypolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t rcvrtimerinactivitypolicy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcvrtimerinactivitypolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rcvrtimerinactivitypolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sendertimerinactiviypolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t sendertimerinactiviypolicy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendertimerinactiviypolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendertimerinactiviypolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_lostcontrolpdupolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t lostcontrolpdupolicy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lostcontrolpdupolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lostcontrolpdupolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_rttestimatorpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t rttestimatorpolicy = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rttestimatorpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rttestimatorpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dtcpConfig_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool flowControl = 1;
  if (has_flowcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flowcontrol(), output);
  }

  // optional .rina.messages.dtcpFlowControlConfig_t flowControlConfig = 2;
  if (has_flowcontrolconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flowcontrolconfig(), output);
  }

  // optional bool rtxControl = 3;
  if (has_rtxcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rtxcontrol(), output);
  }

  // optional .rina.messages.dtcpRtxControlConfig_t rtxControlConfig = 4;
  if (has_rtxcontrolconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rtxcontrolconfig(), output);
  }

  // optional uint32 initialsenderinactivitytime = 5;
  if (has_initialsenderinactivitytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->initialsenderinactivitytime(), output);
  }

  // optional uint32 initialrecvrinactivitytime = 6;
  if (has_initialrecvrinactivitytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->initialrecvrinactivitytime(), output);
  }

  // optional .rina.messages.policyDescriptor_t rcvrtimerinactivitypolicy = 7;
  if (has_rcvrtimerinactivitypolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rcvrtimerinactivitypolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t sendertimerinactiviypolicy = 8;
  if (has_sendertimerinactiviypolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sendertimerinactiviypolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t lostcontrolpdupolicy = 9;
  if (has_lostcontrolpdupolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->lostcontrolpdupolicy(), output);
  }

  // optional .rina.messages.policyDescriptor_t rttestimatorpolicy = 10;
  if (has_rttestimatorpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rttestimatorpolicy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dtcpConfig_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool flowControl = 1;
  if (has_flowcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flowcontrol(), target);
  }

  // optional .rina.messages.dtcpFlowControlConfig_t flowControlConfig = 2;
  if (has_flowcontrolconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flowcontrolconfig(), target);
  }

  // optional bool rtxControl = 3;
  if (has_rtxcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rtxcontrol(), target);
  }

  // optional .rina.messages.dtcpRtxControlConfig_t rtxControlConfig = 4;
  if (has_rtxcontrolconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rtxcontrolconfig(), target);
  }

  // optional uint32 initialsenderinactivitytime = 5;
  if (has_initialsenderinactivitytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->initialsenderinactivitytime(), target);
  }

  // optional uint32 initialrecvrinactivitytime = 6;
  if (has_initialrecvrinactivitytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->initialrecvrinactivitytime(), target);
  }

  // optional .rina.messages.policyDescriptor_t rcvrtimerinactivitypolicy = 7;
  if (has_rcvrtimerinactivitypolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rcvrtimerinactivitypolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t sendertimerinactiviypolicy = 8;
  if (has_sendertimerinactiviypolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sendertimerinactiviypolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t lostcontrolpdupolicy = 9;
  if (has_lostcontrolpdupolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->lostcontrolpdupolicy(), target);
  }

  // optional .rina.messages.policyDescriptor_t rttestimatorpolicy = 10;
  if (has_rttestimatorpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rttestimatorpolicy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dtcpConfig_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool flowControl = 1;
    if (has_flowcontrol()) {
      total_size += 1 + 1;
    }

    // optional .rina.messages.dtcpFlowControlConfig_t flowControlConfig = 2;
    if (has_flowcontrolconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flowcontrolconfig());
    }

    // optional bool rtxControl = 3;
    if (has_rtxcontrol()) {
      total_size += 1 + 1;
    }

    // optional .rina.messages.dtcpRtxControlConfig_t rtxControlConfig = 4;
    if (has_rtxcontrolconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rtxcontrolconfig());
    }

    // optional uint32 initialsenderinactivitytime = 5;
    if (has_initialsenderinactivitytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initialsenderinactivitytime());
    }

    // optional uint32 initialrecvrinactivitytime = 6;
    if (has_initialrecvrinactivitytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initialrecvrinactivitytime());
    }

    // optional .rina.messages.policyDescriptor_t rcvrtimerinactivitypolicy = 7;
    if (has_rcvrtimerinactivitypolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rcvrtimerinactivitypolicy());
    }

    // optional .rina.messages.policyDescriptor_t sendertimerinactiviypolicy = 8;
    if (has_sendertimerinactiviypolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendertimerinactiviypolicy());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .rina.messages.policyDescriptor_t lostcontrolpdupolicy = 9;
    if (has_lostcontrolpdupolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lostcontrolpdupolicy());
    }

    // optional .rina.messages.policyDescriptor_t rttestimatorpolicy = 10;
    if (has_rttestimatorpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rttestimatorpolicy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dtcpConfig_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dtcpConfig_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dtcpConfig_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dtcpConfig_t::MergeFrom(const dtcpConfig_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flowcontrol()) {
      set_flowcontrol(from.flowcontrol());
    }
    if (from.has_flowcontrolconfig()) {
      mutable_flowcontrolconfig()->::rina::messages::dtcpFlowControlConfig_t::MergeFrom(from.flowcontrolconfig());
    }
    if (from.has_rtxcontrol()) {
      set_rtxcontrol(from.rtxcontrol());
    }
    if (from.has_rtxcontrolconfig()) {
      mutable_rtxcontrolconfig()->::rina::messages::dtcpRtxControlConfig_t::MergeFrom(from.rtxcontrolconfig());
    }
    if (from.has_initialsenderinactivitytime()) {
      set_initialsenderinactivitytime(from.initialsenderinactivitytime());
    }
    if (from.has_initialrecvrinactivitytime()) {
      set_initialrecvrinactivitytime(from.initialrecvrinactivitytime());
    }
    if (from.has_rcvrtimerinactivitypolicy()) {
      mutable_rcvrtimerinactivitypolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.rcvrtimerinactivitypolicy());
    }
    if (from.has_sendertimerinactiviypolicy()) {
      mutable_sendertimerinactiviypolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.sendertimerinactiviypolicy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lostcontrolpdupolicy()) {
      mutable_lostcontrolpdupolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.lostcontrolpdupolicy());
    }
    if (from.has_rttestimatorpolicy()) {
      mutable_rttestimatorpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.rttestimatorpolicy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dtcpConfig_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dtcpConfig_t::CopyFrom(const dtcpConfig_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dtcpConfig_t::IsInitialized() const {

  if (has_flowcontrolconfig()) {
    if (!this->flowcontrolconfig().IsInitialized()) return false;
  }
  if (has_rtxcontrolconfig()) {
    if (!this->rtxcontrolconfig().IsInitialized()) return false;
  }
  if (has_rcvrtimerinactivitypolicy()) {
    if (!this->rcvrtimerinactivitypolicy().IsInitialized()) return false;
  }
  if (has_sendertimerinactiviypolicy()) {
    if (!this->sendertimerinactiviypolicy().IsInitialized()) return false;
  }
  if (has_lostcontrolpdupolicy()) {
    if (!this->lostcontrolpdupolicy().IsInitialized()) return false;
  }
  if (has_rttestimatorpolicy()) {
    if (!this->rttestimatorpolicy().IsInitialized()) return false;
  }
  return true;
}

void dtcpConfig_t::Swap(dtcpConfig_t* other) {
  if (other != this) {
    std::swap(flowcontrol_, other->flowcontrol_);
    std::swap(flowcontrolconfig_, other->flowcontrolconfig_);
    std::swap(rtxcontrol_, other->rtxcontrol_);
    std::swap(rtxcontrolconfig_, other->rtxcontrolconfig_);
    std::swap(initialsenderinactivitytime_, other->initialsenderinactivitytime_);
    std::swap(initialrecvrinactivitytime_, other->initialrecvrinactivitytime_);
    std::swap(rcvrtimerinactivitypolicy_, other->rcvrtimerinactivitypolicy_);
    std::swap(sendertimerinactiviypolicy_, other->sendertimerinactiviypolicy_);
    std::swap(lostcontrolpdupolicy_, other->lostcontrolpdupolicy_);
    std::swap(rttestimatorpolicy_, other->rttestimatorpolicy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dtcpConfig_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dtcpConfig_t_descriptor_;
  metadata.reflection = dtcpConfig_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int connectionPolicies_t::kDtcpPresentFieldNumber;
const int connectionPolicies_t::kDtcpConfigurationFieldNumber;
const int connectionPolicies_t::kInitialseqnumpolicyFieldNumber;
const int connectionPolicies_t::kSeqnumrolloverthresholdFieldNumber;
const int connectionPolicies_t::kInitialATimerFieldNumber;
#endif  // !_MSC_VER

connectionPolicies_t::connectionPolicies_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void connectionPolicies_t::InitAsDefaultInstance() {
  dtcpconfiguration_ = const_cast< ::rina::messages::dtcpConfig_t*>(&::rina::messages::dtcpConfig_t::default_instance());
  initialseqnumpolicy_ = const_cast< ::rina::messages::policyDescriptor_t*>(&::rina::messages::policyDescriptor_t::default_instance());
}

connectionPolicies_t::connectionPolicies_t(const connectionPolicies_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void connectionPolicies_t::SharedCtor() {
  _cached_size_ = 0;
  dtcppresent_ = false;
  dtcpconfiguration_ = NULL;
  initialseqnumpolicy_ = NULL;
  seqnumrolloverthreshold_ = GOOGLE_ULONGLONG(0);
  initialatimer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connectionPolicies_t::~connectionPolicies_t() {
  SharedDtor();
}

void connectionPolicies_t::SharedDtor() {
  if (this != default_instance_) {
    delete dtcpconfiguration_;
    delete initialseqnumpolicy_;
  }
}

void connectionPolicies_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connectionPolicies_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connectionPolicies_t_descriptor_;
}

const connectionPolicies_t& connectionPolicies_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectionPoliciesMessage_2eproto();
  return *default_instance_;
}

connectionPolicies_t* connectionPolicies_t::default_instance_ = NULL;

connectionPolicies_t* connectionPolicies_t::New() const {
  return new connectionPolicies_t;
}

void connectionPolicies_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dtcppresent_ = false;
    if (has_dtcpconfiguration()) {
      if (dtcpconfiguration_ != NULL) dtcpconfiguration_->::rina::messages::dtcpConfig_t::Clear();
    }
    if (has_initialseqnumpolicy()) {
      if (initialseqnumpolicy_ != NULL) initialseqnumpolicy_->::rina::messages::policyDescriptor_t::Clear();
    }
    seqnumrolloverthreshold_ = GOOGLE_ULONGLONG(0);
    initialatimer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool connectionPolicies_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dtcpPresent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dtcppresent_)));
          set_has_dtcppresent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dtcpConfiguration;
        break;
      }

      // optional .rina.messages.dtcpConfig_t dtcpConfiguration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtcpConfiguration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dtcpconfiguration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_initialseqnumpolicy;
        break;
      }

      // optional .rina.messages.policyDescriptor_t initialseqnumpolicy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initialseqnumpolicy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initialseqnumpolicy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seqnumrolloverthreshold;
        break;
      }

      // optional uint64 seqnumrolloverthreshold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqnumrolloverthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seqnumrolloverthreshold_)));
          set_has_seqnumrolloverthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_initialATimer;
        break;
      }

      // optional uint32 initialATimer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initialATimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initialatimer_)));
          set_has_initialatimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void connectionPolicies_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool dtcpPresent = 1;
  if (has_dtcppresent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dtcppresent(), output);
  }

  // optional .rina.messages.dtcpConfig_t dtcpConfiguration = 2;
  if (has_dtcpconfiguration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dtcpconfiguration(), output);
  }

  // optional .rina.messages.policyDescriptor_t initialseqnumpolicy = 3;
  if (has_initialseqnumpolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->initialseqnumpolicy(), output);
  }

  // optional uint64 seqnumrolloverthreshold = 4;
  if (has_seqnumrolloverthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->seqnumrolloverthreshold(), output);
  }

  // optional uint32 initialATimer = 5;
  if (has_initialatimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->initialatimer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* connectionPolicies_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool dtcpPresent = 1;
  if (has_dtcppresent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dtcppresent(), target);
  }

  // optional .rina.messages.dtcpConfig_t dtcpConfiguration = 2;
  if (has_dtcpconfiguration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dtcpconfiguration(), target);
  }

  // optional .rina.messages.policyDescriptor_t initialseqnumpolicy = 3;
  if (has_initialseqnumpolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->initialseqnumpolicy(), target);
  }

  // optional uint64 seqnumrolloverthreshold = 4;
  if (has_seqnumrolloverthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->seqnumrolloverthreshold(), target);
  }

  // optional uint32 initialATimer = 5;
  if (has_initialatimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->initialatimer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int connectionPolicies_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool dtcpPresent = 1;
    if (has_dtcppresent()) {
      total_size += 1 + 1;
    }

    // optional .rina.messages.dtcpConfig_t dtcpConfiguration = 2;
    if (has_dtcpconfiguration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dtcpconfiguration());
    }

    // optional .rina.messages.policyDescriptor_t initialseqnumpolicy = 3;
    if (has_initialseqnumpolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initialseqnumpolicy());
    }

    // optional uint64 seqnumrolloverthreshold = 4;
    if (has_seqnumrolloverthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seqnumrolloverthreshold());
    }

    // optional uint32 initialATimer = 5;
    if (has_initialatimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initialatimer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connectionPolicies_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const connectionPolicies_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const connectionPolicies_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void connectionPolicies_t::MergeFrom(const connectionPolicies_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dtcppresent()) {
      set_dtcppresent(from.dtcppresent());
    }
    if (from.has_dtcpconfiguration()) {
      mutable_dtcpconfiguration()->::rina::messages::dtcpConfig_t::MergeFrom(from.dtcpconfiguration());
    }
    if (from.has_initialseqnumpolicy()) {
      mutable_initialseqnumpolicy()->::rina::messages::policyDescriptor_t::MergeFrom(from.initialseqnumpolicy());
    }
    if (from.has_seqnumrolloverthreshold()) {
      set_seqnumrolloverthreshold(from.seqnumrolloverthreshold());
    }
    if (from.has_initialatimer()) {
      set_initialatimer(from.initialatimer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void connectionPolicies_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connectionPolicies_t::CopyFrom(const connectionPolicies_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connectionPolicies_t::IsInitialized() const {

  if (has_dtcpconfiguration()) {
    if (!this->dtcpconfiguration().IsInitialized()) return false;
  }
  if (has_initialseqnumpolicy()) {
    if (!this->initialseqnumpolicy().IsInitialized()) return false;
  }
  return true;
}

void connectionPolicies_t::Swap(connectionPolicies_t* other) {
  if (other != this) {
    std::swap(dtcppresent_, other->dtcppresent_);
    std::swap(dtcpconfiguration_, other->dtcpconfiguration_);
    std::swap(initialseqnumpolicy_, other->initialseqnumpolicy_);
    std::swap(seqnumrolloverthreshold_, other->seqnumrolloverthreshold_);
    std::swap(initialatimer_, other->initialatimer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata connectionPolicies_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connectionPolicies_t_descriptor_;
  metadata.reflection = connectionPolicies_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

// @@protoc_insertion_point(global_scope)
