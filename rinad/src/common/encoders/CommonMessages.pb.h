// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonMessages.proto

#ifndef PROTOBUF_CommonMessages_2eproto__INCLUDED
#define PROTOBUF_CommonMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CommonMessages_2eproto();
void protobuf_AssignDesc_CommonMessages_2eproto();
void protobuf_ShutdownFile_CommonMessages_2eproto();

class objectValue_t;
class nameValuePair_t;
class property_t;

// ===================================================================

class objectValue_t : public ::google::protobuf::Message {
 public:
  objectValue_t();
  virtual ~objectValue_t();

  objectValue_t(const objectValue_t& from);

  inline objectValue_t& operator=(const objectValue_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const objectValue_t& default_instance();

  void Swap(objectValue_t* other);

  // implements Message ----------------------------------------------

  objectValue_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const objectValue_t& from);
  void MergeFrom(const objectValue_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 intval = 1;
  inline bool has_intval() const;
  inline void clear_intval();
  static const int kIntvalFieldNumber = 1;
  inline ::google::protobuf::int32 intval() const;
  inline void set_intval(::google::protobuf::int32 value);

  // optional sint32 sintval = 2;
  inline bool has_sintval() const;
  inline void clear_sintval();
  static const int kSintvalFieldNumber = 2;
  inline ::google::protobuf::int32 sintval() const;
  inline void set_sintval(::google::protobuf::int32 value);

  // optional int64 int64val = 3;
  inline bool has_int64val() const;
  inline void clear_int64val();
  static const int kInt64ValFieldNumber = 3;
  inline ::google::protobuf::int64 int64val() const;
  inline void set_int64val(::google::protobuf::int64 value);

  // optional sint64 sint64val = 4;
  inline bool has_sint64val() const;
  inline void clear_sint64val();
  static const int kSint64ValFieldNumber = 4;
  inline ::google::protobuf::int64 sint64val() const;
  inline void set_sint64val(::google::protobuf::int64 value);

  // optional string strval = 5;
  inline bool has_strval() const;
  inline void clear_strval();
  static const int kStrvalFieldNumber = 5;
  inline const ::std::string& strval() const;
  inline void set_strval(const ::std::string& value);
  inline void set_strval(const char* value);
  inline void set_strval(const char* value, size_t size);
  inline ::std::string* mutable_strval();
  inline ::std::string* release_strval();
  inline void set_allocated_strval(::std::string* strval);

  // optional bytes byteval = 6;
  inline bool has_byteval() const;
  inline void clear_byteval();
  static const int kBytevalFieldNumber = 6;
  inline const ::std::string& byteval() const;
  inline void set_byteval(const ::std::string& value);
  inline void set_byteval(const char* value);
  inline void set_byteval(const void* value, size_t size);
  inline ::std::string* mutable_byteval();
  inline ::std::string* release_byteval();
  inline void set_allocated_byteval(::std::string* byteval);

  // optional fixed32 floatval = 7;
  inline bool has_floatval() const;
  inline void clear_floatval();
  static const int kFloatvalFieldNumber = 7;
  inline ::google::protobuf::uint32 floatval() const;
  inline void set_floatval(::google::protobuf::uint32 value);

  // optional fixed64 doubleval = 8;
  inline bool has_doubleval() const;
  inline void clear_doubleval();
  static const int kDoublevalFieldNumber = 8;
  inline ::google::protobuf::uint64 doubleval() const;
  inline void set_doubleval(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rina.messages.objectValue_t)
 private:
  inline void set_has_intval();
  inline void clear_has_intval();
  inline void set_has_sintval();
  inline void clear_has_sintval();
  inline void set_has_int64val();
  inline void clear_has_int64val();
  inline void set_has_sint64val();
  inline void clear_has_sint64val();
  inline void set_has_strval();
  inline void clear_has_strval();
  inline void set_has_byteval();
  inline void clear_has_byteval();
  inline void set_has_floatval();
  inline void clear_has_floatval();
  inline void set_has_doubleval();
  inline void clear_has_doubleval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 intval_;
  ::google::protobuf::int32 sintval_;
  ::google::protobuf::int64 int64val_;
  ::google::protobuf::int64 sint64val_;
  ::std::string* strval_;
  ::std::string* byteval_;
  ::google::protobuf::uint64 doubleval_;
  ::google::protobuf::uint32 floatval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_CommonMessages_2eproto();
  friend void protobuf_AssignDesc_CommonMessages_2eproto();
  friend void protobuf_ShutdownFile_CommonMessages_2eproto();

  void InitAsDefaultInstance();
  static objectValue_t* default_instance_;
};
// -------------------------------------------------------------------

class nameValuePair_t : public ::google::protobuf::Message {
 public:
  nameValuePair_t();
  virtual ~nameValuePair_t();

  nameValuePair_t(const nameValuePair_t& from);

  inline nameValuePair_t& operator=(const nameValuePair_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nameValuePair_t& default_instance();

  void Swap(nameValuePair_t* other);

  // implements Message ----------------------------------------------

  nameValuePair_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nameValuePair_t& from);
  void MergeFrom(const nameValuePair_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .rina.messages.objectValue_t value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::rina::messages::objectValue_t& value() const;
  inline ::rina::messages::objectValue_t* mutable_value();
  inline ::rina::messages::objectValue_t* release_value();
  inline void set_allocated_value(::rina::messages::objectValue_t* value);

  // @@protoc_insertion_point(class_scope:rina.messages.nameValuePair_t)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::rina::messages::objectValue_t* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CommonMessages_2eproto();
  friend void protobuf_AssignDesc_CommonMessages_2eproto();
  friend void protobuf_ShutdownFile_CommonMessages_2eproto();

  void InitAsDefaultInstance();
  static nameValuePair_t* default_instance_;
};
// -------------------------------------------------------------------

class property_t : public ::google::protobuf::Message {
 public:
  property_t();
  virtual ~property_t();

  property_t(const property_t& from);

  inline property_t& operator=(const property_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const property_t& default_instance();

  void Swap(property_t* other);

  // implements Message ----------------------------------------------

  property_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const property_t& from);
  void MergeFrom(const property_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:rina.messages.property_t)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CommonMessages_2eproto();
  friend void protobuf_AssignDesc_CommonMessages_2eproto();
  friend void protobuf_ShutdownFile_CommonMessages_2eproto();

  void InitAsDefaultInstance();
  static property_t* default_instance_;
};
// ===================================================================


// ===================================================================

// objectValue_t

// optional int32 intval = 1;
inline bool objectValue_t::has_intval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void objectValue_t::set_has_intval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void objectValue_t::clear_has_intval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void objectValue_t::clear_intval() {
  intval_ = 0;
  clear_has_intval();
}
inline ::google::protobuf::int32 objectValue_t::intval() const {
  return intval_;
}
inline void objectValue_t::set_intval(::google::protobuf::int32 value) {
  set_has_intval();
  intval_ = value;
}

// optional sint32 sintval = 2;
inline bool objectValue_t::has_sintval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void objectValue_t::set_has_sintval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void objectValue_t::clear_has_sintval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void objectValue_t::clear_sintval() {
  sintval_ = 0;
  clear_has_sintval();
}
inline ::google::protobuf::int32 objectValue_t::sintval() const {
  return sintval_;
}
inline void objectValue_t::set_sintval(::google::protobuf::int32 value) {
  set_has_sintval();
  sintval_ = value;
}

// optional int64 int64val = 3;
inline bool objectValue_t::has_int64val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void objectValue_t::set_has_int64val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void objectValue_t::clear_has_int64val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void objectValue_t::clear_int64val() {
  int64val_ = GOOGLE_LONGLONG(0);
  clear_has_int64val();
}
inline ::google::protobuf::int64 objectValue_t::int64val() const {
  return int64val_;
}
inline void objectValue_t::set_int64val(::google::protobuf::int64 value) {
  set_has_int64val();
  int64val_ = value;
}

// optional sint64 sint64val = 4;
inline bool objectValue_t::has_sint64val() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void objectValue_t::set_has_sint64val() {
  _has_bits_[0] |= 0x00000008u;
}
inline void objectValue_t::clear_has_sint64val() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void objectValue_t::clear_sint64val() {
  sint64val_ = GOOGLE_LONGLONG(0);
  clear_has_sint64val();
}
inline ::google::protobuf::int64 objectValue_t::sint64val() const {
  return sint64val_;
}
inline void objectValue_t::set_sint64val(::google::protobuf::int64 value) {
  set_has_sint64val();
  sint64val_ = value;
}

// optional string strval = 5;
inline bool objectValue_t::has_strval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void objectValue_t::set_has_strval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void objectValue_t::clear_has_strval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void objectValue_t::clear_strval() {
  if (strval_ != &::google::protobuf::internal::kEmptyString) {
    strval_->clear();
  }
  clear_has_strval();
}
inline const ::std::string& objectValue_t::strval() const {
  return *strval_;
}
inline void objectValue_t::set_strval(const ::std::string& value) {
  set_has_strval();
  if (strval_ == &::google::protobuf::internal::kEmptyString) {
    strval_ = new ::std::string;
  }
  strval_->assign(value);
}
inline void objectValue_t::set_strval(const char* value) {
  set_has_strval();
  if (strval_ == &::google::protobuf::internal::kEmptyString) {
    strval_ = new ::std::string;
  }
  strval_->assign(value);
}
inline void objectValue_t::set_strval(const char* value, size_t size) {
  set_has_strval();
  if (strval_ == &::google::protobuf::internal::kEmptyString) {
    strval_ = new ::std::string;
  }
  strval_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* objectValue_t::mutable_strval() {
  set_has_strval();
  if (strval_ == &::google::protobuf::internal::kEmptyString) {
    strval_ = new ::std::string;
  }
  return strval_;
}
inline ::std::string* objectValue_t::release_strval() {
  clear_has_strval();
  if (strval_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strval_;
    strval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void objectValue_t::set_allocated_strval(::std::string* strval) {
  if (strval_ != &::google::protobuf::internal::kEmptyString) {
    delete strval_;
  }
  if (strval) {
    set_has_strval();
    strval_ = strval;
  } else {
    clear_has_strval();
    strval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes byteval = 6;
inline bool objectValue_t::has_byteval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void objectValue_t::set_has_byteval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void objectValue_t::clear_has_byteval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void objectValue_t::clear_byteval() {
  if (byteval_ != &::google::protobuf::internal::kEmptyString) {
    byteval_->clear();
  }
  clear_has_byteval();
}
inline const ::std::string& objectValue_t::byteval() const {
  return *byteval_;
}
inline void objectValue_t::set_byteval(const ::std::string& value) {
  set_has_byteval();
  if (byteval_ == &::google::protobuf::internal::kEmptyString) {
    byteval_ = new ::std::string;
  }
  byteval_->assign(value);
}
inline void objectValue_t::set_byteval(const char* value) {
  set_has_byteval();
  if (byteval_ == &::google::protobuf::internal::kEmptyString) {
    byteval_ = new ::std::string;
  }
  byteval_->assign(value);
}
inline void objectValue_t::set_byteval(const void* value, size_t size) {
  set_has_byteval();
  if (byteval_ == &::google::protobuf::internal::kEmptyString) {
    byteval_ = new ::std::string;
  }
  byteval_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* objectValue_t::mutable_byteval() {
  set_has_byteval();
  if (byteval_ == &::google::protobuf::internal::kEmptyString) {
    byteval_ = new ::std::string;
  }
  return byteval_;
}
inline ::std::string* objectValue_t::release_byteval() {
  clear_has_byteval();
  if (byteval_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = byteval_;
    byteval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void objectValue_t::set_allocated_byteval(::std::string* byteval) {
  if (byteval_ != &::google::protobuf::internal::kEmptyString) {
    delete byteval_;
  }
  if (byteval) {
    set_has_byteval();
    byteval_ = byteval;
  } else {
    clear_has_byteval();
    byteval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 floatval = 7;
inline bool objectValue_t::has_floatval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void objectValue_t::set_has_floatval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void objectValue_t::clear_has_floatval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void objectValue_t::clear_floatval() {
  floatval_ = 0u;
  clear_has_floatval();
}
inline ::google::protobuf::uint32 objectValue_t::floatval() const {
  return floatval_;
}
inline void objectValue_t::set_floatval(::google::protobuf::uint32 value) {
  set_has_floatval();
  floatval_ = value;
}

// optional fixed64 doubleval = 8;
inline bool objectValue_t::has_doubleval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void objectValue_t::set_has_doubleval() {
  _has_bits_[0] |= 0x00000080u;
}
inline void objectValue_t::clear_has_doubleval() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void objectValue_t::clear_doubleval() {
  doubleval_ = GOOGLE_ULONGLONG(0);
  clear_has_doubleval();
}
inline ::google::protobuf::uint64 objectValue_t::doubleval() const {
  return doubleval_;
}
inline void objectValue_t::set_doubleval(::google::protobuf::uint64 value) {
  set_has_doubleval();
  doubleval_ = value;
}

// -------------------------------------------------------------------

// nameValuePair_t

// optional string name = 1;
inline bool nameValuePair_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nameValuePair_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nameValuePair_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nameValuePair_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& nameValuePair_t::name() const {
  return *name_;
}
inline void nameValuePair_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void nameValuePair_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void nameValuePair_t::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nameValuePair_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* nameValuePair_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void nameValuePair_t::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .rina.messages.objectValue_t value = 2;
inline bool nameValuePair_t::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nameValuePair_t::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nameValuePair_t::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nameValuePair_t::clear_value() {
  if (value_ != NULL) value_->::rina::messages::objectValue_t::Clear();
  clear_has_value();
}
inline const ::rina::messages::objectValue_t& nameValuePair_t::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::rina::messages::objectValue_t* nameValuePair_t::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::rina::messages::objectValue_t;
  return value_;
}
inline ::rina::messages::objectValue_t* nameValuePair_t::release_value() {
  clear_has_value();
  ::rina::messages::objectValue_t* temp = value_;
  value_ = NULL;
  return temp;
}
inline void nameValuePair_t::set_allocated_value(::rina::messages::objectValue_t* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
}

// -------------------------------------------------------------------

// property_t

// required string name = 1;
inline bool property_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void property_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void property_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void property_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& property_t::name() const {
  return *name_;
}
inline void property_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void property_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void property_t::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* property_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* property_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void property_t::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string value = 2;
inline bool property_t::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void property_t::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void property_t::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void property_t::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& property_t::value() const {
  return *value_;
}
inline void property_t::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void property_t::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void property_t::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* property_t::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* property_t::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void property_t::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CommonMessages_2eproto__INCLUDED
