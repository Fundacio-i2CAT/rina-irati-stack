// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DirectoryForwardingTableEntryMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DirectoryForwardingTableEntryMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* directoryForwardingTableEntry_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  directoryForwardingTableEntry_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DirectoryForwardingTableEntryMessage_2eproto() {
  protobuf_AddDesc_DirectoryForwardingTableEntryMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DirectoryForwardingTableEntryMessage.proto");
  GOOGLE_CHECK(file != NULL);
  directoryForwardingTableEntry_t_descriptor_ = file->message_type(0);
  static const int directoryForwardingTableEntry_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(directoryForwardingTableEntry_t, applicationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(directoryForwardingTableEntry_t, ipcprocesssynonym_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(directoryForwardingTableEntry_t, timestamp_),
  };
  directoryForwardingTableEntry_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      directoryForwardingTableEntry_t_descriptor_,
      directoryForwardingTableEntry_t::default_instance_,
      directoryForwardingTableEntry_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(directoryForwardingTableEntry_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(directoryForwardingTableEntry_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(directoryForwardingTableEntry_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DirectoryForwardingTableEntryMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    directoryForwardingTableEntry_t_descriptor_, &directoryForwardingTableEntry_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DirectoryForwardingTableEntryMessage_2eproto() {
  delete directoryForwardingTableEntry_t::default_instance_;
  delete directoryForwardingTableEntry_t_reflection_;
}

void protobuf_AddDesc_DirectoryForwardingTableEntryMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rina::messages::protobuf_AddDesc_ApplicationProcessNamingInfoMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n*DirectoryForwardingTableEntryMessage.p"
    "roto\022\rrina.messages\032)ApplicationProcessN"
    "amingInfoMessage.proto\"\227\001\n\037directoryForw"
    "ardingTableEntry_t\022F\n\017applicationName\030\001 "
    "\002(\0132-.rina.messages.applicationProcessNa"
    "mingInfo_t\022\031\n\021ipcProcessSynonym\030\002 \002(\004\022\021\n"
    "\ttimestamp\030\003 \001(\004B<\n:rina.encoding.impl.g"
    "oogleprotobuf.directoryforwardingtable", 318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DirectoryForwardingTableEntryMessage.proto", &protobuf_RegisterTypes);
  directoryForwardingTableEntry_t::default_instance_ = new directoryForwardingTableEntry_t();
  directoryForwardingTableEntry_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DirectoryForwardingTableEntryMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DirectoryForwardingTableEntryMessage_2eproto {
  StaticDescriptorInitializer_DirectoryForwardingTableEntryMessage_2eproto() {
    protobuf_AddDesc_DirectoryForwardingTableEntryMessage_2eproto();
  }
} static_descriptor_initializer_DirectoryForwardingTableEntryMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int directoryForwardingTableEntry_t::kApplicationNameFieldNumber;
const int directoryForwardingTableEntry_t::kIpcProcessSynonymFieldNumber;
const int directoryForwardingTableEntry_t::kTimestampFieldNumber;
#endif  // !_MSC_VER

directoryForwardingTableEntry_t::directoryForwardingTableEntry_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void directoryForwardingTableEntry_t::InitAsDefaultInstance() {
  applicationname_ = const_cast< ::rina::messages::applicationProcessNamingInfo_t*>(&::rina::messages::applicationProcessNamingInfo_t::default_instance());
}

directoryForwardingTableEntry_t::directoryForwardingTableEntry_t(const directoryForwardingTableEntry_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void directoryForwardingTableEntry_t::SharedCtor() {
  _cached_size_ = 0;
  applicationname_ = NULL;
  ipcprocesssynonym_ = GOOGLE_ULONGLONG(0);
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

directoryForwardingTableEntry_t::~directoryForwardingTableEntry_t() {
  SharedDtor();
}

void directoryForwardingTableEntry_t::SharedDtor() {
  if (this != default_instance_) {
    delete applicationname_;
  }
}

void directoryForwardingTableEntry_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* directoryForwardingTableEntry_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return directoryForwardingTableEntry_t_descriptor_;
}

const directoryForwardingTableEntry_t& directoryForwardingTableEntry_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DirectoryForwardingTableEntryMessage_2eproto();
  return *default_instance_;
}

directoryForwardingTableEntry_t* directoryForwardingTableEntry_t::default_instance_ = NULL;

directoryForwardingTableEntry_t* directoryForwardingTableEntry_t::New() const {
  return new directoryForwardingTableEntry_t;
}

void directoryForwardingTableEntry_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_applicationname()) {
      if (applicationname_ != NULL) applicationname_->::rina::messages::applicationProcessNamingInfo_t::Clear();
    }
    ipcprocesssynonym_ = GOOGLE_ULONGLONG(0);
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool directoryForwardingTableEntry_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rina.messages.applicationProcessNamingInfo_t applicationName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applicationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ipcProcessSynonym;
        break;
      }

      // required uint64 ipcProcessSynonym = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ipcProcessSynonym:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipcprocesssynonym_)));
          set_has_ipcprocesssynonym();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void directoryForwardingTableEntry_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rina.messages.applicationProcessNamingInfo_t applicationName = 1;
  if (has_applicationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applicationname(), output);
  }

  // required uint64 ipcProcessSynonym = 2;
  if (has_ipcprocesssynonym()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ipcprocesssynonym(), output);
  }

  // optional uint64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* directoryForwardingTableEntry_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rina.messages.applicationProcessNamingInfo_t applicationName = 1;
  if (has_applicationname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applicationname(), target);
  }

  // required uint64 ipcProcessSynonym = 2;
  if (has_ipcprocesssynonym()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ipcprocesssynonym(), target);
  }

  // optional uint64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int directoryForwardingTableEntry_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rina.messages.applicationProcessNamingInfo_t applicationName = 1;
    if (has_applicationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->applicationname());
    }

    // required uint64 ipcProcessSynonym = 2;
    if (has_ipcprocesssynonym()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipcprocesssynonym());
    }

    // optional uint64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void directoryForwardingTableEntry_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const directoryForwardingTableEntry_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const directoryForwardingTableEntry_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void directoryForwardingTableEntry_t::MergeFrom(const directoryForwardingTableEntry_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applicationname()) {
      mutable_applicationname()->::rina::messages::applicationProcessNamingInfo_t::MergeFrom(from.applicationname());
    }
    if (from.has_ipcprocesssynonym()) {
      set_ipcprocesssynonym(from.ipcprocesssynonym());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void directoryForwardingTableEntry_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void directoryForwardingTableEntry_t::CopyFrom(const directoryForwardingTableEntry_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool directoryForwardingTableEntry_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_applicationname()) {
    if (!this->applicationname().IsInitialized()) return false;
  }
  return true;
}

void directoryForwardingTableEntry_t::Swap(directoryForwardingTableEntry_t* other) {
  if (other != this) {
    std::swap(applicationname_, other->applicationname_);
    std::swap(ipcprocesssynonym_, other->ipcprocesssynonym_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata directoryForwardingTableEntry_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = directoryForwardingTableEntry_t_descriptor_;
  metadata.reflection = directoryForwardingTableEntry_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

// @@protoc_insertion_point(global_scope)
