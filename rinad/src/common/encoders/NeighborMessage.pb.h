// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NeighborMessage.proto

#ifndef PROTOBUF_NeighborMessage_2eproto__INCLUDED
#define PROTOBUF_NeighborMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NeighborMessage_2eproto();
void protobuf_AssignDesc_NeighborMessage_2eproto();
void protobuf_ShutdownFile_NeighborMessage_2eproto();

class neighbor_t;

// ===================================================================

class neighbor_t : public ::google::protobuf::Message {
 public:
  neighbor_t();
  virtual ~neighbor_t();

  neighbor_t(const neighbor_t& from);

  inline neighbor_t& operator=(const neighbor_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const neighbor_t& default_instance();

  void Swap(neighbor_t* other);

  // implements Message ----------------------------------------------

  neighbor_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const neighbor_t& from);
  void MergeFrom(const neighbor_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string applicationProcessName = 1;
  inline bool has_applicationprocessname() const;
  inline void clear_applicationprocessname();
  static const int kApplicationProcessNameFieldNumber = 1;
  inline const ::std::string& applicationprocessname() const;
  inline void set_applicationprocessname(const ::std::string& value);
  inline void set_applicationprocessname(const char* value);
  inline void set_applicationprocessname(const char* value, size_t size);
  inline ::std::string* mutable_applicationprocessname();
  inline ::std::string* release_applicationprocessname();
  inline void set_allocated_applicationprocessname(::std::string* applicationprocessname);

  // optional string applicationProcessInstance = 2;
  inline bool has_applicationprocessinstance() const;
  inline void clear_applicationprocessinstance();
  static const int kApplicationProcessInstanceFieldNumber = 2;
  inline const ::std::string& applicationprocessinstance() const;
  inline void set_applicationprocessinstance(const ::std::string& value);
  inline void set_applicationprocessinstance(const char* value);
  inline void set_applicationprocessinstance(const char* value, size_t size);
  inline ::std::string* mutable_applicationprocessinstance();
  inline ::std::string* release_applicationprocessinstance();
  inline void set_allocated_applicationprocessinstance(::std::string* applicationprocessinstance);

  // optional uint64 address = 3;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 3;
  inline ::google::protobuf::uint64 address() const;
  inline void set_address(::google::protobuf::uint64 value);

  // repeated string supportingDifs = 4;
  inline int supportingdifs_size() const;
  inline void clear_supportingdifs();
  static const int kSupportingDifsFieldNumber = 4;
  inline const ::std::string& supportingdifs(int index) const;
  inline ::std::string* mutable_supportingdifs(int index);
  inline void set_supportingdifs(int index, const ::std::string& value);
  inline void set_supportingdifs(int index, const char* value);
  inline void set_supportingdifs(int index, const char* value, size_t size);
  inline ::std::string* add_supportingdifs();
  inline void add_supportingdifs(const ::std::string& value);
  inline void add_supportingdifs(const char* value);
  inline void add_supportingdifs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& supportingdifs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_supportingdifs();

  // @@protoc_insertion_point(class_scope:rina.messages.neighbor_t)
 private:
  inline void set_has_applicationprocessname();
  inline void clear_has_applicationprocessname();
  inline void set_has_applicationprocessinstance();
  inline void clear_has_applicationprocessinstance();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* applicationprocessname_;
  ::std::string* applicationprocessinstance_;
  ::google::protobuf::uint64 address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> supportingdifs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_NeighborMessage_2eproto();
  friend void protobuf_AssignDesc_NeighborMessage_2eproto();
  friend void protobuf_ShutdownFile_NeighborMessage_2eproto();

  void InitAsDefaultInstance();
  static neighbor_t* default_instance_;
};
// ===================================================================


// ===================================================================

// neighbor_t

// optional string applicationProcessName = 1;
inline bool neighbor_t::has_applicationprocessname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void neighbor_t::set_has_applicationprocessname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void neighbor_t::clear_has_applicationprocessname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void neighbor_t::clear_applicationprocessname() {
  if (applicationprocessname_ != &::google::protobuf::internal::kEmptyString) {
    applicationprocessname_->clear();
  }
  clear_has_applicationprocessname();
}
inline const ::std::string& neighbor_t::applicationprocessname() const {
  return *applicationprocessname_;
}
inline void neighbor_t::set_applicationprocessname(const ::std::string& value) {
  set_has_applicationprocessname();
  if (applicationprocessname_ == &::google::protobuf::internal::kEmptyString) {
    applicationprocessname_ = new ::std::string;
  }
  applicationprocessname_->assign(value);
}
inline void neighbor_t::set_applicationprocessname(const char* value) {
  set_has_applicationprocessname();
  if (applicationprocessname_ == &::google::protobuf::internal::kEmptyString) {
    applicationprocessname_ = new ::std::string;
  }
  applicationprocessname_->assign(value);
}
inline void neighbor_t::set_applicationprocessname(const char* value, size_t size) {
  set_has_applicationprocessname();
  if (applicationprocessname_ == &::google::protobuf::internal::kEmptyString) {
    applicationprocessname_ = new ::std::string;
  }
  applicationprocessname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* neighbor_t::mutable_applicationprocessname() {
  set_has_applicationprocessname();
  if (applicationprocessname_ == &::google::protobuf::internal::kEmptyString) {
    applicationprocessname_ = new ::std::string;
  }
  return applicationprocessname_;
}
inline ::std::string* neighbor_t::release_applicationprocessname() {
  clear_has_applicationprocessname();
  if (applicationprocessname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = applicationprocessname_;
    applicationprocessname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void neighbor_t::set_allocated_applicationprocessname(::std::string* applicationprocessname) {
  if (applicationprocessname_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationprocessname_;
  }
  if (applicationprocessname) {
    set_has_applicationprocessname();
    applicationprocessname_ = applicationprocessname;
  } else {
    clear_has_applicationprocessname();
    applicationprocessname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string applicationProcessInstance = 2;
inline bool neighbor_t::has_applicationprocessinstance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void neighbor_t::set_has_applicationprocessinstance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void neighbor_t::clear_has_applicationprocessinstance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void neighbor_t::clear_applicationprocessinstance() {
  if (applicationprocessinstance_ != &::google::protobuf::internal::kEmptyString) {
    applicationprocessinstance_->clear();
  }
  clear_has_applicationprocessinstance();
}
inline const ::std::string& neighbor_t::applicationprocessinstance() const {
  return *applicationprocessinstance_;
}
inline void neighbor_t::set_applicationprocessinstance(const ::std::string& value) {
  set_has_applicationprocessinstance();
  if (applicationprocessinstance_ == &::google::protobuf::internal::kEmptyString) {
    applicationprocessinstance_ = new ::std::string;
  }
  applicationprocessinstance_->assign(value);
}
inline void neighbor_t::set_applicationprocessinstance(const char* value) {
  set_has_applicationprocessinstance();
  if (applicationprocessinstance_ == &::google::protobuf::internal::kEmptyString) {
    applicationprocessinstance_ = new ::std::string;
  }
  applicationprocessinstance_->assign(value);
}
inline void neighbor_t::set_applicationprocessinstance(const char* value, size_t size) {
  set_has_applicationprocessinstance();
  if (applicationprocessinstance_ == &::google::protobuf::internal::kEmptyString) {
    applicationprocessinstance_ = new ::std::string;
  }
  applicationprocessinstance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* neighbor_t::mutable_applicationprocessinstance() {
  set_has_applicationprocessinstance();
  if (applicationprocessinstance_ == &::google::protobuf::internal::kEmptyString) {
    applicationprocessinstance_ = new ::std::string;
  }
  return applicationprocessinstance_;
}
inline ::std::string* neighbor_t::release_applicationprocessinstance() {
  clear_has_applicationprocessinstance();
  if (applicationprocessinstance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = applicationprocessinstance_;
    applicationprocessinstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void neighbor_t::set_allocated_applicationprocessinstance(::std::string* applicationprocessinstance) {
  if (applicationprocessinstance_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationprocessinstance_;
  }
  if (applicationprocessinstance) {
    set_has_applicationprocessinstance();
    applicationprocessinstance_ = applicationprocessinstance;
  } else {
    clear_has_applicationprocessinstance();
    applicationprocessinstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 address = 3;
inline bool neighbor_t::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void neighbor_t::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void neighbor_t::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void neighbor_t::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
  clear_has_address();
}
inline ::google::protobuf::uint64 neighbor_t::address() const {
  return address_;
}
inline void neighbor_t::set_address(::google::protobuf::uint64 value) {
  set_has_address();
  address_ = value;
}

// repeated string supportingDifs = 4;
inline int neighbor_t::supportingdifs_size() const {
  return supportingdifs_.size();
}
inline void neighbor_t::clear_supportingdifs() {
  supportingdifs_.Clear();
}
inline const ::std::string& neighbor_t::supportingdifs(int index) const {
  return supportingdifs_.Get(index);
}
inline ::std::string* neighbor_t::mutable_supportingdifs(int index) {
  return supportingdifs_.Mutable(index);
}
inline void neighbor_t::set_supportingdifs(int index, const ::std::string& value) {
  supportingdifs_.Mutable(index)->assign(value);
}
inline void neighbor_t::set_supportingdifs(int index, const char* value) {
  supportingdifs_.Mutable(index)->assign(value);
}
inline void neighbor_t::set_supportingdifs(int index, const char* value, size_t size) {
  supportingdifs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* neighbor_t::add_supportingdifs() {
  return supportingdifs_.Add();
}
inline void neighbor_t::add_supportingdifs(const ::std::string& value) {
  supportingdifs_.Add()->assign(value);
}
inline void neighbor_t::add_supportingdifs(const char* value) {
  supportingdifs_.Add()->assign(value);
}
inline void neighbor_t::add_supportingdifs(const char* value, size_t size) {
  supportingdifs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
neighbor_t::supportingdifs() const {
  return supportingdifs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
neighbor_t::mutable_supportingdifs() {
  return &supportingdifs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NeighborMessage_2eproto__INCLUDED
