// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommonMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* objectValue_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  objectValue_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* nameValuePair_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nameValuePair_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* property_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  property_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommonMessages_2eproto() {
  protobuf_AddDesc_CommonMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommonMessages.proto");
  GOOGLE_CHECK(file != NULL);
  objectValue_t_descriptor_ = file->message_type(0);
  static const int objectValue_t_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectValue_t, intval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectValue_t, sintval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectValue_t, int64val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectValue_t, sint64val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectValue_t, strval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectValue_t, byteval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectValue_t, floatval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectValue_t, doubleval_),
  };
  objectValue_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      objectValue_t_descriptor_,
      objectValue_t::default_instance_,
      objectValue_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectValue_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectValue_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(objectValue_t));
  nameValuePair_t_descriptor_ = file->message_type(1);
  static const int nameValuePair_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nameValuePair_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nameValuePair_t, value_),
  };
  nameValuePair_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nameValuePair_t_descriptor_,
      nameValuePair_t::default_instance_,
      nameValuePair_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nameValuePair_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nameValuePair_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nameValuePair_t));
  property_t_descriptor_ = file->message_type(2);
  static const int property_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_t, value_),
  };
  property_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      property_t_descriptor_,
      property_t::default_instance_,
      property_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(property_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(property_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommonMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    objectValue_t_descriptor_, &objectValue_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nameValuePair_t_descriptor_, &nameValuePair_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    property_t_descriptor_, &property_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommonMessages_2eproto() {
  delete objectValue_t::default_instance_;
  delete objectValue_t_reflection_;
  delete nameValuePair_t::default_instance_;
  delete nameValuePair_t_reflection_;
  delete property_t::default_instance_;
  delete property_t_reflection_;
}

void protobuf_AddDesc_CommonMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024CommonMessages.proto\022\rrina.messages\"\233\001"
    "\n\robjectValue_t\022\016\n\006intval\030\001 \001(\005\022\017\n\007sintv"
    "al\030\002 \001(\021\022\020\n\010int64val\030\003 \001(\003\022\021\n\tsint64val\030"
    "\004 \001(\022\022\016\n\006strval\030\005 \001(\t\022\017\n\007byteval\030\006 \001(\014\022\020"
    "\n\010floatval\030\007 \001(\007\022\021\n\tdoubleval\030\010 \001(\006\"L\n\017n"
    "ameValuePair_t\022\014\n\004name\030\001 \001(\t\022+\n\005value\030\002 "
    "\001(\0132\034.rina.messages.objectValue_t\")\n\npro"
    "perty_t\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\tB*\n("
    "rina.encoding.impl.googleprotobuf.common", 360);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonMessages.proto", &protobuf_RegisterTypes);
  objectValue_t::default_instance_ = new objectValue_t();
  nameValuePair_t::default_instance_ = new nameValuePair_t();
  property_t::default_instance_ = new property_t();
  objectValue_t::default_instance_->InitAsDefaultInstance();
  nameValuePair_t::default_instance_->InitAsDefaultInstance();
  property_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommonMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommonMessages_2eproto {
  StaticDescriptorInitializer_CommonMessages_2eproto() {
    protobuf_AddDesc_CommonMessages_2eproto();
  }
} static_descriptor_initializer_CommonMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int objectValue_t::kIntvalFieldNumber;
const int objectValue_t::kSintvalFieldNumber;
const int objectValue_t::kInt64ValFieldNumber;
const int objectValue_t::kSint64ValFieldNumber;
const int objectValue_t::kStrvalFieldNumber;
const int objectValue_t::kBytevalFieldNumber;
const int objectValue_t::kFloatvalFieldNumber;
const int objectValue_t::kDoublevalFieldNumber;
#endif  // !_MSC_VER

objectValue_t::objectValue_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void objectValue_t::InitAsDefaultInstance() {
}

objectValue_t::objectValue_t(const objectValue_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void objectValue_t::SharedCtor() {
  _cached_size_ = 0;
  intval_ = 0;
  sintval_ = 0;
  int64val_ = GOOGLE_LONGLONG(0);
  sint64val_ = GOOGLE_LONGLONG(0);
  strval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  byteval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  floatval_ = 0u;
  doubleval_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

objectValue_t::~objectValue_t() {
  SharedDtor();
}

void objectValue_t::SharedDtor() {
  if (strval_ != &::google::protobuf::internal::kEmptyString) {
    delete strval_;
  }
  if (byteval_ != &::google::protobuf::internal::kEmptyString) {
    delete byteval_;
  }
  if (this != default_instance_) {
  }
}

void objectValue_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* objectValue_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return objectValue_t_descriptor_;
}

const objectValue_t& objectValue_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessages_2eproto();
  return *default_instance_;
}

objectValue_t* objectValue_t::default_instance_ = NULL;

objectValue_t* objectValue_t::New() const {
  return new objectValue_t;
}

void objectValue_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    intval_ = 0;
    sintval_ = 0;
    int64val_ = GOOGLE_LONGLONG(0);
    sint64val_ = GOOGLE_LONGLONG(0);
    if (has_strval()) {
      if (strval_ != &::google::protobuf::internal::kEmptyString) {
        strval_->clear();
      }
    }
    if (has_byteval()) {
      if (byteval_ != &::google::protobuf::internal::kEmptyString) {
        byteval_->clear();
      }
    }
    floatval_ = 0u;
    doubleval_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool objectValue_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 intval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intval_)));
          set_has_intval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sintval;
        break;
      }

      // optional sint32 sintval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sintval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sintval_)));
          set_has_sintval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int64val;
        break;
      }

      // optional int64 int64val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int64val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64val_)));
          set_has_int64val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sint64val;
        break;
      }

      // optional sint64 sint64val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sint64val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint64val_)));
          set_has_sint64val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strval;
        break;
      }

      // optional string strval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strval().data(), this->strval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_byteval;
        break;
      }

      // optional bytes byteval = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_byteval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byteval()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_floatval;
        break;
      }

      // optional fixed32 floatval = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_floatval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &floatval_)));
          set_has_floatval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_doubleval;
        break;
      }

      // optional fixed64 doubleval = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doubleval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &doubleval_)));
          set_has_doubleval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void objectValue_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 intval = 1;
  if (has_intval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->intval(), output);
  }

  // optional sint32 sintval = 2;
  if (has_sintval()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->sintval(), output);
  }

  // optional int64 int64val = 3;
  if (has_int64val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->int64val(), output);
  }

  // optional sint64 sint64val = 4;
  if (has_sint64val()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->sint64val(), output);
  }

  // optional string strval = 5;
  if (has_strval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strval().data(), this->strval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strval(), output);
  }

  // optional bytes byteval = 6;
  if (has_byteval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->byteval(), output);
  }

  // optional fixed32 floatval = 7;
  if (has_floatval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->floatval(), output);
  }

  // optional fixed64 doubleval = 8;
  if (has_doubleval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->doubleval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* objectValue_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 intval = 1;
  if (has_intval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->intval(), target);
  }

  // optional sint32 sintval = 2;
  if (has_sintval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->sintval(), target);
  }

  // optional int64 int64val = 3;
  if (has_int64val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->int64val(), target);
  }

  // optional sint64 sint64val = 4;
  if (has_sint64val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->sint64val(), target);
  }

  // optional string strval = 5;
  if (has_strval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strval().data(), this->strval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strval(), target);
  }

  // optional bytes byteval = 6;
  if (has_byteval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->byteval(), target);
  }

  // optional fixed32 floatval = 7;
  if (has_floatval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->floatval(), target);
  }

  // optional fixed64 doubleval = 8;
  if (has_doubleval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->doubleval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int objectValue_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 intval = 1;
    if (has_intval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intval());
    }

    // optional sint32 sintval = 2;
    if (has_sintval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sintval());
    }

    // optional int64 int64val = 3;
    if (has_int64val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64val());
    }

    // optional sint64 sint64val = 4;
    if (has_sint64val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint64val());
    }

    // optional string strval = 5;
    if (has_strval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strval());
    }

    // optional bytes byteval = 6;
    if (has_byteval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->byteval());
    }

    // optional fixed32 floatval = 7;
    if (has_floatval()) {
      total_size += 1 + 4;
    }

    // optional fixed64 doubleval = 8;
    if (has_doubleval()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void objectValue_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const objectValue_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const objectValue_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void objectValue_t::MergeFrom(const objectValue_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intval()) {
      set_intval(from.intval());
    }
    if (from.has_sintval()) {
      set_sintval(from.sintval());
    }
    if (from.has_int64val()) {
      set_int64val(from.int64val());
    }
    if (from.has_sint64val()) {
      set_sint64val(from.sint64val());
    }
    if (from.has_strval()) {
      set_strval(from.strval());
    }
    if (from.has_byteval()) {
      set_byteval(from.byteval());
    }
    if (from.has_floatval()) {
      set_floatval(from.floatval());
    }
    if (from.has_doubleval()) {
      set_doubleval(from.doubleval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void objectValue_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void objectValue_t::CopyFrom(const objectValue_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool objectValue_t::IsInitialized() const {

  return true;
}

void objectValue_t::Swap(objectValue_t* other) {
  if (other != this) {
    std::swap(intval_, other->intval_);
    std::swap(sintval_, other->sintval_);
    std::swap(int64val_, other->int64val_);
    std::swap(sint64val_, other->sint64val_);
    std::swap(strval_, other->strval_);
    std::swap(byteval_, other->byteval_);
    std::swap(floatval_, other->floatval_);
    std::swap(doubleval_, other->doubleval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata objectValue_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = objectValue_t_descriptor_;
  metadata.reflection = objectValue_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nameValuePair_t::kNameFieldNumber;
const int nameValuePair_t::kValueFieldNumber;
#endif  // !_MSC_VER

nameValuePair_t::nameValuePair_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void nameValuePair_t::InitAsDefaultInstance() {
  value_ = const_cast< ::rina::messages::objectValue_t*>(&::rina::messages::objectValue_t::default_instance());
}

nameValuePair_t::nameValuePair_t(const nameValuePair_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nameValuePair_t::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nameValuePair_t::~nameValuePair_t() {
  SharedDtor();
}

void nameValuePair_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void nameValuePair_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nameValuePair_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nameValuePair_t_descriptor_;
}

const nameValuePair_t& nameValuePair_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessages_2eproto();
  return *default_instance_;
}

nameValuePair_t* nameValuePair_t::default_instance_ = NULL;

nameValuePair_t* nameValuePair_t::New() const {
  return new nameValuePair_t;
}

void nameValuePair_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::rina::messages::objectValue_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nameValuePair_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .rina.messages.objectValue_t value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nameValuePair_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .rina.messages.objectValue_t value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* nameValuePair_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .rina.messages.objectValue_t value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nameValuePair_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .rina.messages.objectValue_t value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nameValuePair_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nameValuePair_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nameValuePair_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nameValuePair_t::MergeFrom(const nameValuePair_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      mutable_value()->::rina::messages::objectValue_t::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nameValuePair_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nameValuePair_t::CopyFrom(const nameValuePair_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nameValuePair_t::IsInitialized() const {

  return true;
}

void nameValuePair_t::Swap(nameValuePair_t* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nameValuePair_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nameValuePair_t_descriptor_;
  metadata.reflection = nameValuePair_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int property_t::kNameFieldNumber;
const int property_t::kValueFieldNumber;
#endif  // !_MSC_VER

property_t::property_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void property_t::InitAsDefaultInstance() {
}

property_t::property_t(const property_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void property_t::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

property_t::~property_t() {
  SharedDtor();
}

void property_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void property_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* property_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return property_t_descriptor_;
}

const property_t& property_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessages_2eproto();
  return *default_instance_;
}

property_t* property_t::default_instance_ = NULL;

property_t* property_t::New() const {
  return new property_t;
}

void property_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool property_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void property_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* property_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int property_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void property_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const property_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const property_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void property_t::MergeFrom(const property_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void property_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void property_t::CopyFrom(const property_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool property_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void property_t::Swap(property_t* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata property_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = property_t_descriptor_;
  metadata.reflection = property_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

// @@protoc_insertion_point(global_scope)
