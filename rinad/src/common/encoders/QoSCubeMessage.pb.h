// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QoSCubeMessage.proto

#ifndef PROTOBUF_QoSCubeMessage_2eproto__INCLUDED
#define PROTOBUF_QoSCubeMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConnectionPoliciesMessage.pb.h"
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_QoSCubeMessage_2eproto();
void protobuf_AssignDesc_QoSCubeMessage_2eproto();
void protobuf_ShutdownFile_QoSCubeMessage_2eproto();

class qosCube_t;

// ===================================================================

class qosCube_t : public ::google::protobuf::Message {
 public:
  qosCube_t();
  virtual ~qosCube_t();

  qosCube_t(const qosCube_t& from);

  inline qosCube_t& operator=(const qosCube_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qosCube_t& default_instance();

  void Swap(qosCube_t* other);

  // implements Message ----------------------------------------------

  qosCube_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qosCube_t& from);
  void MergeFrom(const qosCube_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 qosId = 1;
  inline bool has_qosid() const;
  inline void clear_qosid();
  static const int kQosIdFieldNumber = 1;
  inline ::google::protobuf::uint32 qosid() const;
  inline void set_qosid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 averageBandwidth = 3;
  inline bool has_averagebandwidth() const;
  inline void clear_averagebandwidth();
  static const int kAverageBandwidthFieldNumber = 3;
  inline ::google::protobuf::uint64 averagebandwidth() const;
  inline void set_averagebandwidth(::google::protobuf::uint64 value);

  // optional uint64 averageSDUBandwidth = 4;
  inline bool has_averagesdubandwidth() const;
  inline void clear_averagesdubandwidth();
  static const int kAverageSDUBandwidthFieldNumber = 4;
  inline ::google::protobuf::uint64 averagesdubandwidth() const;
  inline void set_averagesdubandwidth(::google::protobuf::uint64 value);

  // optional uint32 peakBandwidthDuration = 5;
  inline bool has_peakbandwidthduration() const;
  inline void clear_peakbandwidthduration();
  static const int kPeakBandwidthDurationFieldNumber = 5;
  inline ::google::protobuf::uint32 peakbandwidthduration() const;
  inline void set_peakbandwidthduration(::google::protobuf::uint32 value);

  // optional uint32 peakSDUBandwidthDuration = 6;
  inline bool has_peaksdubandwidthduration() const;
  inline void clear_peaksdubandwidthduration();
  static const int kPeakSDUBandwidthDurationFieldNumber = 6;
  inline ::google::protobuf::uint32 peaksdubandwidthduration() const;
  inline void set_peaksdubandwidthduration(::google::protobuf::uint32 value);

  // optional double undetectedBitErrorRate = 7;
  inline bool has_undetectedbiterrorrate() const;
  inline void clear_undetectedbiterrorrate();
  static const int kUndetectedBitErrorRateFieldNumber = 7;
  inline double undetectedbiterrorrate() const;
  inline void set_undetectedbiterrorrate(double value);

  // optional bool partialDelivery = 8;
  inline bool has_partialdelivery() const;
  inline void clear_partialdelivery();
  static const int kPartialDeliveryFieldNumber = 8;
  inline bool partialdelivery() const;
  inline void set_partialdelivery(bool value);

  // optional bool order = 9;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 9;
  inline bool order() const;
  inline void set_order(bool value);

  // optional uint32 maxAllowableGapSdu = 10;
  inline bool has_maxallowablegapsdu() const;
  inline void clear_maxallowablegapsdu();
  static const int kMaxAllowableGapSduFieldNumber = 10;
  inline ::google::protobuf::uint32 maxallowablegapsdu() const;
  inline void set_maxallowablegapsdu(::google::protobuf::uint32 value);

  // optional uint32 delay = 11;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 11;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // optional uint32 jitter = 12;
  inline bool has_jitter() const;
  inline void clear_jitter();
  static const int kJitterFieldNumber = 12;
  inline ::google::protobuf::uint32 jitter() const;
  inline void set_jitter(::google::protobuf::uint32 value);

  // optional .rina.messages.connectionPolicies_t efcpPolicies = 13;
  inline bool has_efcppolicies() const;
  inline void clear_efcppolicies();
  static const int kEfcpPoliciesFieldNumber = 13;
  inline const ::rina::messages::connectionPolicies_t& efcppolicies() const;
  inline ::rina::messages::connectionPolicies_t* mutable_efcppolicies();
  inline ::rina::messages::connectionPolicies_t* release_efcppolicies();
  inline void set_allocated_efcppolicies(::rina::messages::connectionPolicies_t* efcppolicies);

  // @@protoc_insertion_point(class_scope:rina.messages.qosCube_t)
 private:
  inline void set_has_qosid();
  inline void clear_has_qosid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_averagebandwidth();
  inline void clear_has_averagebandwidth();
  inline void set_has_averagesdubandwidth();
  inline void clear_has_averagesdubandwidth();
  inline void set_has_peakbandwidthduration();
  inline void clear_has_peakbandwidthduration();
  inline void set_has_peaksdubandwidthduration();
  inline void clear_has_peaksdubandwidthduration();
  inline void set_has_undetectedbiterrorrate();
  inline void clear_has_undetectedbiterrorrate();
  inline void set_has_partialdelivery();
  inline void clear_has_partialdelivery();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_maxallowablegapsdu();
  inline void clear_has_maxallowablegapsdu();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_jitter();
  inline void clear_has_jitter();
  inline void set_has_efcppolicies();
  inline void clear_has_efcppolicies();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 averagebandwidth_;
  ::google::protobuf::uint32 qosid_;
  ::google::protobuf::uint32 peakbandwidthduration_;
  ::google::protobuf::uint64 averagesdubandwidth_;
  double undetectedbiterrorrate_;
  ::google::protobuf::uint32 peaksdubandwidthduration_;
  bool partialdelivery_;
  bool order_;
  ::google::protobuf::uint32 maxallowablegapsdu_;
  ::google::protobuf::uint32 delay_;
  ::rina::messages::connectionPolicies_t* efcppolicies_;
  ::google::protobuf::uint32 jitter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_QoSCubeMessage_2eproto();
  friend void protobuf_AssignDesc_QoSCubeMessage_2eproto();
  friend void protobuf_ShutdownFile_QoSCubeMessage_2eproto();

  void InitAsDefaultInstance();
  static qosCube_t* default_instance_;
};
// ===================================================================


// ===================================================================

// qosCube_t

// required uint32 qosId = 1;
inline bool qosCube_t::has_qosid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qosCube_t::set_has_qosid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qosCube_t::clear_has_qosid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qosCube_t::clear_qosid() {
  qosid_ = 0u;
  clear_has_qosid();
}
inline ::google::protobuf::uint32 qosCube_t::qosid() const {
  return qosid_;
}
inline void qosCube_t::set_qosid(::google::protobuf::uint32 value) {
  set_has_qosid();
  qosid_ = value;
}

// optional string name = 2;
inline bool qosCube_t::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qosCube_t::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qosCube_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qosCube_t::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& qosCube_t::name() const {
  return *name_;
}
inline void qosCube_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void qosCube_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void qosCube_t::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* qosCube_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* qosCube_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void qosCube_t::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 averageBandwidth = 3;
inline bool qosCube_t::has_averagebandwidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qosCube_t::set_has_averagebandwidth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qosCube_t::clear_has_averagebandwidth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qosCube_t::clear_averagebandwidth() {
  averagebandwidth_ = GOOGLE_ULONGLONG(0);
  clear_has_averagebandwidth();
}
inline ::google::protobuf::uint64 qosCube_t::averagebandwidth() const {
  return averagebandwidth_;
}
inline void qosCube_t::set_averagebandwidth(::google::protobuf::uint64 value) {
  set_has_averagebandwidth();
  averagebandwidth_ = value;
}

// optional uint64 averageSDUBandwidth = 4;
inline bool qosCube_t::has_averagesdubandwidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void qosCube_t::set_has_averagesdubandwidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void qosCube_t::clear_has_averagesdubandwidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void qosCube_t::clear_averagesdubandwidth() {
  averagesdubandwidth_ = GOOGLE_ULONGLONG(0);
  clear_has_averagesdubandwidth();
}
inline ::google::protobuf::uint64 qosCube_t::averagesdubandwidth() const {
  return averagesdubandwidth_;
}
inline void qosCube_t::set_averagesdubandwidth(::google::protobuf::uint64 value) {
  set_has_averagesdubandwidth();
  averagesdubandwidth_ = value;
}

// optional uint32 peakBandwidthDuration = 5;
inline bool qosCube_t::has_peakbandwidthduration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void qosCube_t::set_has_peakbandwidthduration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void qosCube_t::clear_has_peakbandwidthduration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void qosCube_t::clear_peakbandwidthduration() {
  peakbandwidthduration_ = 0u;
  clear_has_peakbandwidthduration();
}
inline ::google::protobuf::uint32 qosCube_t::peakbandwidthduration() const {
  return peakbandwidthduration_;
}
inline void qosCube_t::set_peakbandwidthduration(::google::protobuf::uint32 value) {
  set_has_peakbandwidthduration();
  peakbandwidthduration_ = value;
}

// optional uint32 peakSDUBandwidthDuration = 6;
inline bool qosCube_t::has_peaksdubandwidthduration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void qosCube_t::set_has_peaksdubandwidthduration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void qosCube_t::clear_has_peaksdubandwidthduration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void qosCube_t::clear_peaksdubandwidthduration() {
  peaksdubandwidthduration_ = 0u;
  clear_has_peaksdubandwidthduration();
}
inline ::google::protobuf::uint32 qosCube_t::peaksdubandwidthduration() const {
  return peaksdubandwidthduration_;
}
inline void qosCube_t::set_peaksdubandwidthduration(::google::protobuf::uint32 value) {
  set_has_peaksdubandwidthduration();
  peaksdubandwidthduration_ = value;
}

// optional double undetectedBitErrorRate = 7;
inline bool qosCube_t::has_undetectedbiterrorrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void qosCube_t::set_has_undetectedbiterrorrate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void qosCube_t::clear_has_undetectedbiterrorrate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void qosCube_t::clear_undetectedbiterrorrate() {
  undetectedbiterrorrate_ = 0;
  clear_has_undetectedbiterrorrate();
}
inline double qosCube_t::undetectedbiterrorrate() const {
  return undetectedbiterrorrate_;
}
inline void qosCube_t::set_undetectedbiterrorrate(double value) {
  set_has_undetectedbiterrorrate();
  undetectedbiterrorrate_ = value;
}

// optional bool partialDelivery = 8;
inline bool qosCube_t::has_partialdelivery() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void qosCube_t::set_has_partialdelivery() {
  _has_bits_[0] |= 0x00000080u;
}
inline void qosCube_t::clear_has_partialdelivery() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void qosCube_t::clear_partialdelivery() {
  partialdelivery_ = false;
  clear_has_partialdelivery();
}
inline bool qosCube_t::partialdelivery() const {
  return partialdelivery_;
}
inline void qosCube_t::set_partialdelivery(bool value) {
  set_has_partialdelivery();
  partialdelivery_ = value;
}

// optional bool order = 9;
inline bool qosCube_t::has_order() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void qosCube_t::set_has_order() {
  _has_bits_[0] |= 0x00000100u;
}
inline void qosCube_t::clear_has_order() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void qosCube_t::clear_order() {
  order_ = false;
  clear_has_order();
}
inline bool qosCube_t::order() const {
  return order_;
}
inline void qosCube_t::set_order(bool value) {
  set_has_order();
  order_ = value;
}

// optional uint32 maxAllowableGapSdu = 10;
inline bool qosCube_t::has_maxallowablegapsdu() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void qosCube_t::set_has_maxallowablegapsdu() {
  _has_bits_[0] |= 0x00000200u;
}
inline void qosCube_t::clear_has_maxallowablegapsdu() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void qosCube_t::clear_maxallowablegapsdu() {
  maxallowablegapsdu_ = 0u;
  clear_has_maxallowablegapsdu();
}
inline ::google::protobuf::uint32 qosCube_t::maxallowablegapsdu() const {
  return maxallowablegapsdu_;
}
inline void qosCube_t::set_maxallowablegapsdu(::google::protobuf::uint32 value) {
  set_has_maxallowablegapsdu();
  maxallowablegapsdu_ = value;
}

// optional uint32 delay = 11;
inline bool qosCube_t::has_delay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void qosCube_t::set_has_delay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void qosCube_t::clear_has_delay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void qosCube_t::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 qosCube_t::delay() const {
  return delay_;
}
inline void qosCube_t::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
}

// optional uint32 jitter = 12;
inline bool qosCube_t::has_jitter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void qosCube_t::set_has_jitter() {
  _has_bits_[0] |= 0x00000800u;
}
inline void qosCube_t::clear_has_jitter() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void qosCube_t::clear_jitter() {
  jitter_ = 0u;
  clear_has_jitter();
}
inline ::google::protobuf::uint32 qosCube_t::jitter() const {
  return jitter_;
}
inline void qosCube_t::set_jitter(::google::protobuf::uint32 value) {
  set_has_jitter();
  jitter_ = value;
}

// optional .rina.messages.connectionPolicies_t efcpPolicies = 13;
inline bool qosCube_t::has_efcppolicies() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void qosCube_t::set_has_efcppolicies() {
  _has_bits_[0] |= 0x00001000u;
}
inline void qosCube_t::clear_has_efcppolicies() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void qosCube_t::clear_efcppolicies() {
  if (efcppolicies_ != NULL) efcppolicies_->::rina::messages::connectionPolicies_t::Clear();
  clear_has_efcppolicies();
}
inline const ::rina::messages::connectionPolicies_t& qosCube_t::efcppolicies() const {
  return efcppolicies_ != NULL ? *efcppolicies_ : *default_instance_->efcppolicies_;
}
inline ::rina::messages::connectionPolicies_t* qosCube_t::mutable_efcppolicies() {
  set_has_efcppolicies();
  if (efcppolicies_ == NULL) efcppolicies_ = new ::rina::messages::connectionPolicies_t;
  return efcppolicies_;
}
inline ::rina::messages::connectionPolicies_t* qosCube_t::release_efcppolicies() {
  clear_has_efcppolicies();
  ::rina::messages::connectionPolicies_t* temp = efcppolicies_;
  efcppolicies_ = NULL;
  return temp;
}
inline void qosCube_t::set_allocated_efcppolicies(::rina::messages::connectionPolicies_t* efcppolicies) {
  delete efcppolicies_;
  efcppolicies_ = efcppolicies;
  if (efcppolicies) {
    set_has_efcppolicies();
  } else {
    clear_has_efcppolicies();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_QoSCubeMessage_2eproto__INCLUDED
