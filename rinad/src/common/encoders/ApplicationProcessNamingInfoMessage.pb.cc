// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApplicationProcessNamingInfoMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ApplicationProcessNamingInfoMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* applicationProcessNamingInfo_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  applicationProcessNamingInfo_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ApplicationProcessNamingInfoMessage_2eproto() {
  protobuf_AddDesc_ApplicationProcessNamingInfoMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ApplicationProcessNamingInfoMessage.proto");
  GOOGLE_CHECK(file != NULL);
  applicationProcessNamingInfo_t_descriptor_ = file->message_type(0);
  static const int applicationProcessNamingInfo_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(applicationProcessNamingInfo_t, applicationprocessname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(applicationProcessNamingInfo_t, applicationprocessinstance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(applicationProcessNamingInfo_t, applicationentityname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(applicationProcessNamingInfo_t, applicationentityinstance_),
  };
  applicationProcessNamingInfo_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      applicationProcessNamingInfo_t_descriptor_,
      applicationProcessNamingInfo_t::default_instance_,
      applicationProcessNamingInfo_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(applicationProcessNamingInfo_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(applicationProcessNamingInfo_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(applicationProcessNamingInfo_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ApplicationProcessNamingInfoMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    applicationProcessNamingInfo_t_descriptor_, &applicationProcessNamingInfo_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ApplicationProcessNamingInfoMessage_2eproto() {
  delete applicationProcessNamingInfo_t::default_instance_;
  delete applicationProcessNamingInfo_t_reflection_;
}

void protobuf_AddDesc_ApplicationProcessNamingInfoMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)ApplicationProcessNamingInfoMessage.pr"
    "oto\022\rrina.messages\"\246\001\n\036applicationProces"
    "sNamingInfo_t\022\036\n\026applicationProcessName\030"
    "\001 \002(\t\022\"\n\032applicationProcessInstance\030\002 \001("
    "\t\022\035\n\025applicationEntityName\030\003 \001(\t\022!\n\031appl"
    "icationEntityInstance\030\004 \001(\tB0\n.rina.enco"
    "ding.impl.googleprotobuf.apnaminginfo", 277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ApplicationProcessNamingInfoMessage.proto", &protobuf_RegisterTypes);
  applicationProcessNamingInfo_t::default_instance_ = new applicationProcessNamingInfo_t();
  applicationProcessNamingInfo_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ApplicationProcessNamingInfoMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ApplicationProcessNamingInfoMessage_2eproto {
  StaticDescriptorInitializer_ApplicationProcessNamingInfoMessage_2eproto() {
    protobuf_AddDesc_ApplicationProcessNamingInfoMessage_2eproto();
  }
} static_descriptor_initializer_ApplicationProcessNamingInfoMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int applicationProcessNamingInfo_t::kApplicationProcessNameFieldNumber;
const int applicationProcessNamingInfo_t::kApplicationProcessInstanceFieldNumber;
const int applicationProcessNamingInfo_t::kApplicationEntityNameFieldNumber;
const int applicationProcessNamingInfo_t::kApplicationEntityInstanceFieldNumber;
#endif  // !_MSC_VER

applicationProcessNamingInfo_t::applicationProcessNamingInfo_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void applicationProcessNamingInfo_t::InitAsDefaultInstance() {
}

applicationProcessNamingInfo_t::applicationProcessNamingInfo_t(const applicationProcessNamingInfo_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void applicationProcessNamingInfo_t::SharedCtor() {
  _cached_size_ = 0;
  applicationprocessname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applicationprocessinstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applicationentityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applicationentityinstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

applicationProcessNamingInfo_t::~applicationProcessNamingInfo_t() {
  SharedDtor();
}

void applicationProcessNamingInfo_t::SharedDtor() {
  if (applicationprocessname_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationprocessname_;
  }
  if (applicationprocessinstance_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationprocessinstance_;
  }
  if (applicationentityname_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationentityname_;
  }
  if (applicationentityinstance_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationentityinstance_;
  }
  if (this != default_instance_) {
  }
}

void applicationProcessNamingInfo_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* applicationProcessNamingInfo_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return applicationProcessNamingInfo_t_descriptor_;
}

const applicationProcessNamingInfo_t& applicationProcessNamingInfo_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ApplicationProcessNamingInfoMessage_2eproto();
  return *default_instance_;
}

applicationProcessNamingInfo_t* applicationProcessNamingInfo_t::default_instance_ = NULL;

applicationProcessNamingInfo_t* applicationProcessNamingInfo_t::New() const {
  return new applicationProcessNamingInfo_t;
}

void applicationProcessNamingInfo_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_applicationprocessname()) {
      if (applicationprocessname_ != &::google::protobuf::internal::kEmptyString) {
        applicationprocessname_->clear();
      }
    }
    if (has_applicationprocessinstance()) {
      if (applicationprocessinstance_ != &::google::protobuf::internal::kEmptyString) {
        applicationprocessinstance_->clear();
      }
    }
    if (has_applicationentityname()) {
      if (applicationentityname_ != &::google::protobuf::internal::kEmptyString) {
        applicationentityname_->clear();
      }
    }
    if (has_applicationentityinstance()) {
      if (applicationentityinstance_ != &::google::protobuf::internal::kEmptyString) {
        applicationentityinstance_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool applicationProcessNamingInfo_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string applicationProcessName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationprocessname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicationprocessname().data(), this->applicationprocessname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applicationProcessInstance;
        break;
      }

      // optional string applicationProcessInstance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicationProcessInstance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationprocessinstance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicationprocessinstance().data(), this->applicationprocessinstance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_applicationEntityName;
        break;
      }

      // optional string applicationEntityName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicationEntityName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationentityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicationentityname().data(), this->applicationentityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_applicationEntityInstance;
        break;
      }

      // optional string applicationEntityInstance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicationEntityInstance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationentityinstance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicationentityinstance().data(), this->applicationentityinstance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void applicationProcessNamingInfo_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string applicationProcessName = 1;
  if (has_applicationprocessname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationprocessname().data(), this->applicationprocessname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->applicationprocessname(), output);
  }

  // optional string applicationProcessInstance = 2;
  if (has_applicationprocessinstance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationprocessinstance().data(), this->applicationprocessinstance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->applicationprocessinstance(), output);
  }

  // optional string applicationEntityName = 3;
  if (has_applicationentityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationentityname().data(), this->applicationentityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->applicationentityname(), output);
  }

  // optional string applicationEntityInstance = 4;
  if (has_applicationentityinstance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationentityinstance().data(), this->applicationentityinstance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->applicationentityinstance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* applicationProcessNamingInfo_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string applicationProcessName = 1;
  if (has_applicationprocessname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationprocessname().data(), this->applicationprocessname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->applicationprocessname(), target);
  }

  // optional string applicationProcessInstance = 2;
  if (has_applicationprocessinstance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationprocessinstance().data(), this->applicationprocessinstance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->applicationprocessinstance(), target);
  }

  // optional string applicationEntityName = 3;
  if (has_applicationentityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationentityname().data(), this->applicationentityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->applicationentityname(), target);
  }

  // optional string applicationEntityInstance = 4;
  if (has_applicationentityinstance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicationentityinstance().data(), this->applicationentityinstance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->applicationentityinstance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int applicationProcessNamingInfo_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string applicationProcessName = 1;
    if (has_applicationprocessname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicationprocessname());
    }

    // optional string applicationProcessInstance = 2;
    if (has_applicationprocessinstance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicationprocessinstance());
    }

    // optional string applicationEntityName = 3;
    if (has_applicationentityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicationentityname());
    }

    // optional string applicationEntityInstance = 4;
    if (has_applicationentityinstance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicationentityinstance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void applicationProcessNamingInfo_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const applicationProcessNamingInfo_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const applicationProcessNamingInfo_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void applicationProcessNamingInfo_t::MergeFrom(const applicationProcessNamingInfo_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applicationprocessname()) {
      set_applicationprocessname(from.applicationprocessname());
    }
    if (from.has_applicationprocessinstance()) {
      set_applicationprocessinstance(from.applicationprocessinstance());
    }
    if (from.has_applicationentityname()) {
      set_applicationentityname(from.applicationentityname());
    }
    if (from.has_applicationentityinstance()) {
      set_applicationentityinstance(from.applicationentityinstance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void applicationProcessNamingInfo_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void applicationProcessNamingInfo_t::CopyFrom(const applicationProcessNamingInfo_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool applicationProcessNamingInfo_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void applicationProcessNamingInfo_t::Swap(applicationProcessNamingInfo_t* other) {
  if (other != this) {
    std::swap(applicationprocessname_, other->applicationprocessname_);
    std::swap(applicationprocessinstance_, other->applicationprocessinstance_);
    std::swap(applicationentityname_, other->applicationentityname_);
    std::swap(applicationentityinstance_, other->applicationentityinstance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata applicationProcessNamingInfo_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = applicationProcessNamingInfo_t_descriptor_;
  metadata.reflection = applicationProcessNamingInfo_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

// @@protoc_insertion_point(global_scope)
