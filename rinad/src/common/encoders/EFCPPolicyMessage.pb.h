// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EFCPPolicyMessage.proto

#ifndef PROTOBUF_EFCPPolicyMessage_2eproto__INCLUDED
#define PROTOBUF_EFCPPolicyMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PolicyDescriptorMessage.pb.h"
// @@protoc_insertion_point(includes)

namespace rina {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EFCPPolicyMessage_2eproto();
void protobuf_AssignDesc_EFCPPolicyMessage_2eproto();
void protobuf_ShutdownFile_EFCPPolicyMessage_2eproto();

class efcpPolicy_t;

// ===================================================================

class efcpPolicy_t : public ::google::protobuf::Message {
 public:
  efcpPolicy_t();
  virtual ~efcpPolicy_t();

  efcpPolicy_t(const efcpPolicy_t& from);

  inline efcpPolicy_t& operator=(const efcpPolicy_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const efcpPolicy_t& default_instance();

  void Swap(efcpPolicy_t* other);

  // implements Message ----------------------------------------------

  efcpPolicy_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const efcpPolicy_t& from);
  void MergeFrom(const efcpPolicy_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes qosId = 1;
  inline bool has_qosid() const;
  inline void clear_qosid();
  static const int kQosIdFieldNumber = 1;
  inline const ::std::string& qosid() const;
  inline void set_qosid(const ::std::string& value);
  inline void set_qosid(const char* value);
  inline void set_qosid(const void* value, size_t size);
  inline ::std::string* mutable_qosid();
  inline ::std::string* release_qosid();
  inline void set_allocated_qosid(::std::string* qosid);

  // optional .rina.messages.policyDescriptor_t policyDescriptor = 2;
  inline bool has_policydescriptor() const;
  inline void clear_policydescriptor();
  static const int kPolicyDescriptorFieldNumber = 2;
  inline const ::rina::messages::policyDescriptor_t& policydescriptor() const;
  inline ::rina::messages::policyDescriptor_t* mutable_policydescriptor();
  inline ::rina::messages::policyDescriptor_t* release_policydescriptor();
  inline void set_allocated_policydescriptor(::rina::messages::policyDescriptor_t* policydescriptor);

  // @@protoc_insertion_point(class_scope:rina.messages.efcpPolicy_t)
 private:
  inline void set_has_qosid();
  inline void clear_has_qosid();
  inline void set_has_policydescriptor();
  inline void clear_has_policydescriptor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* qosid_;
  ::rina::messages::policyDescriptor_t* policydescriptor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EFCPPolicyMessage_2eproto();
  friend void protobuf_AssignDesc_EFCPPolicyMessage_2eproto();
  friend void protobuf_ShutdownFile_EFCPPolicyMessage_2eproto();

  void InitAsDefaultInstance();
  static efcpPolicy_t* default_instance_;
};
// ===================================================================


// ===================================================================

// efcpPolicy_t

// optional bytes qosId = 1;
inline bool efcpPolicy_t::has_qosid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void efcpPolicy_t::set_has_qosid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void efcpPolicy_t::clear_has_qosid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void efcpPolicy_t::clear_qosid() {
  if (qosid_ != &::google::protobuf::internal::kEmptyString) {
    qosid_->clear();
  }
  clear_has_qosid();
}
inline const ::std::string& efcpPolicy_t::qosid() const {
  return *qosid_;
}
inline void efcpPolicy_t::set_qosid(const ::std::string& value) {
  set_has_qosid();
  if (qosid_ == &::google::protobuf::internal::kEmptyString) {
    qosid_ = new ::std::string;
  }
  qosid_->assign(value);
}
inline void efcpPolicy_t::set_qosid(const char* value) {
  set_has_qosid();
  if (qosid_ == &::google::protobuf::internal::kEmptyString) {
    qosid_ = new ::std::string;
  }
  qosid_->assign(value);
}
inline void efcpPolicy_t::set_qosid(const void* value, size_t size) {
  set_has_qosid();
  if (qosid_ == &::google::protobuf::internal::kEmptyString) {
    qosid_ = new ::std::string;
  }
  qosid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* efcpPolicy_t::mutable_qosid() {
  set_has_qosid();
  if (qosid_ == &::google::protobuf::internal::kEmptyString) {
    qosid_ = new ::std::string;
  }
  return qosid_;
}
inline ::std::string* efcpPolicy_t::release_qosid() {
  clear_has_qosid();
  if (qosid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qosid_;
    qosid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void efcpPolicy_t::set_allocated_qosid(::std::string* qosid) {
  if (qosid_ != &::google::protobuf::internal::kEmptyString) {
    delete qosid_;
  }
  if (qosid) {
    set_has_qosid();
    qosid_ = qosid;
  } else {
    clear_has_qosid();
    qosid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .rina.messages.policyDescriptor_t policyDescriptor = 2;
inline bool efcpPolicy_t::has_policydescriptor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void efcpPolicy_t::set_has_policydescriptor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void efcpPolicy_t::clear_has_policydescriptor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void efcpPolicy_t::clear_policydescriptor() {
  if (policydescriptor_ != NULL) policydescriptor_->::rina::messages::policyDescriptor_t::Clear();
  clear_has_policydescriptor();
}
inline const ::rina::messages::policyDescriptor_t& efcpPolicy_t::policydescriptor() const {
  return policydescriptor_ != NULL ? *policydescriptor_ : *default_instance_->policydescriptor_;
}
inline ::rina::messages::policyDescriptor_t* efcpPolicy_t::mutable_policydescriptor() {
  set_has_policydescriptor();
  if (policydescriptor_ == NULL) policydescriptor_ = new ::rina::messages::policyDescriptor_t;
  return policydescriptor_;
}
inline ::rina::messages::policyDescriptor_t* efcpPolicy_t::release_policydescriptor() {
  clear_has_policydescriptor();
  ::rina::messages::policyDescriptor_t* temp = policydescriptor_;
  policydescriptor_ = NULL;
  return temp;
}
inline void efcpPolicy_t::set_allocated_policydescriptor(::rina::messages::policyDescriptor_t* policydescriptor) {
  delete policydescriptor_;
  policydescriptor_ = policydescriptor;
  if (policydescriptor) {
    set_has_policydescriptor();
  } else {
    clear_has_policydescriptor();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace rina

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EFCPPolicyMessage_2eproto__INCLUDED
